


Gadgets
=======


0x00001224: aad 0xff; call dword ptr [eax + 0x51]; 
0x0000133a: adc al, 0x24; ret; 
0x0000127a: adc al, 0x51; call eax; 
0x0000127a: adc al, 0x51; call eax; add esp, 0x10; leave; ret; 
0x000013a9: adc byte ptr [ebp - 0x7ce38640], al; in al, dx; or al, 0x8d; cmp dword ptr [ebx - 0x20], -1; call dword ptr [eax - 0x18]; 
0x00001280: adc cl, cl; ret; 
0x00001274: adc edx, dword ptr [ebp - 0x77]; in eax, 0x83; in al, dx; adc al, 0x51; call eax; 
0x00001032: add al, 0; add byte ptr [eax], al; jmp dword ptr [ebx + 8]; 
0x00001454: add bh, dh; ja 0x143a; mov eax, dword ptr [ebp - 0xc]; mov ebx, dword ptr [ebp - 4]; leave; ret; 
0x00001028: add byte ptr [eax], al; add byte ptr [eax], al; add byte ptr [eax], al; add byte ptr [eax], al; push dword ptr [ebx + 4]; jmp dword ptr [ebx + 8]; 
0x0000102a: add byte ptr [eax], al; add byte ptr [eax], al; add byte ptr [eax], al; push dword ptr [ebx + 4]; jmp dword ptr [ebx + 8]; 
0x000015c8: add byte ptr [eax], al; add byte ptr [eax], al; lea esi, [esi]; endbr32; ret; 
0x00001543: add byte ptr [eax], al; add byte ptr [eax], al; mov eax, dword ptr [ebp - 0x14]; call eax; 
0x0000102c: add byte ptr [eax], al; add byte ptr [eax], al; push dword ptr [ebx + 4]; jmp dword ptr [ebx + 8]; 
0x00001211: add byte ptr [eax], al; add byte ptr [ecx + 0x2d94c3], al; add byte ptr [ebp - 0x29d77d], cl; call dword ptr [eax - 0x73]; 
0x000010a6: add byte ptr [eax], al; add cl, ch; cmp bh, 0xff; jmp dword ptr [esi - 0x70]; 
0x00001066: add byte ptr [eax], al; add cl, ch; ret 0xffff; 
0x000015ed: add byte ptr [eax], al; add esp, 8; pop ebx; ret; 
0x0000122e: add byte ptr [eax], al; call 0x11b0; hlt; mov ebx, dword ptr [esp]; ret; 
0x00001453: add byte ptr [eax], al; div dword ptr [edi - 0x1e]; mov eax, dword ptr [ebp - 0xc]; mov ebx, dword ptr [ebp - 4]; leave; ret; 
0x0000112e: add byte ptr [eax], al; endbr32; jmp dword ptr [ebx + 0xc]; 
0x00001034: add byte ptr [eax], al; jmp dword ptr [ebx + 8]; 
0x000015ca: add byte ptr [eax], al; lea esi, [esi]; endbr32; ret; 
0x00001545: add byte ptr [eax], al; mov eax, dword ptr [ebp - 0x14]; call eax; 
0x00001011: add byte ptr [eax], al; mov eax, dword ptr [ebx + 0x48]; test eax, eax; je 0x101f; call eax; 
0x00001128: add byte ptr [eax], al; nop word ptr [eax + eax]; endbr32; jmp dword ptr [ebx + 0xc]; 
0x0000102e: add byte ptr [eax], al; push dword ptr [ebx + 4]; jmp dword ptr [ebx + 8]; 
0x00001017: add byte ptr [eax], al; test eax, eax; je 0x101f; call eax; 
0x00001550: add byte ptr [ebp + 0x5b59f865], cl; pop ebp; lea esp, [ecx - 4]; ret; 
0x000013ea: add byte ptr [ebp - 0x1f6e7d], cl; call dword ptr [eax - 0x18]; 
0x00001219: add byte ptr [ebp - 0x29d77d], cl; call dword ptr [eax - 0x73]; 
0x000012c3: add byte ptr [ebp - 0x7cf58b2e], al; in al, dx; or byte ptr [eax + 0x51], dl; call edx; 
0x00001213: add byte ptr [ecx + 0x2d94c3], al; add byte ptr [ebp - 0x29d77d], cl; call dword ptr [eax - 0x73]; 
0x00001324: add byte ptr [ecx], al; mov ebx, dword ptr [ebp - 4]; leave; ret; 
0x00001129: add byte ptr [esi + 0xf], ah; pop ds; inc esp; add byte ptr [eax], al; endbr32; jmp dword ptr [ebx + 0xc]; 
0x000015c7: add byte ptr es:[eax], al; add byte ptr [eax], al; lea esi, [esi]; endbr32; ret; 
0x000010a8: add cl, ch; cmp bh, 0xff; jmp dword ptr [esi - 0x70]; 
0x00001068: add cl, ch; ret 0xffff; 
0x00001322: add dword ptr [eax], eax; add byte ptr [ecx], al; mov ebx, dword ptr [ebp - 4]; leave; ret; 
0x00001317: add esp, 0x10; call 0x1250; mov byte ptr [ebx + 0x128], 1; mov ebx, dword ptr [ebp - 4]; leave; ret; 
0x0000127e: add esp, 0x10; leave; ret; 
0x000012cf: add esp, 0x10; mov ebx, dword ptr [ebp - 4]; leave; ret; 
0x000015bd: add esp, 0xc; pop ebx; pop esi; pop edi; pop ebp; ret; 
0x0000101f: add esp, 8; pop ebx; ret; 
0x00001541: and al, 0xc; add byte ptr [eax], al; add byte ptr [eax], al; mov eax, dword ptr [ebp - 0x14]; call eax; 
0x00001376: and byte ptr [ebp - 0x7ce38640], al; in al, dx; or al, 0x8d; and dword ptr [eax - 0x20], 0xffffffff; call dword ptr [eax - 0x18]; 
0x0000137f: and dword ptr [eax - 0x20], 0xffffffff; call dword ptr [eax - 0x18]; 
0x000013c5: call 0x1120; nop; mov ebx, dword ptr [ebp - 4]; leave; ret; 
0x00001230: call 0x11b0; hlt; mov ebx, dword ptr [esp]; ret; 
0x0000131a: call 0x1250; mov byte ptr [ebx + 0x128], 1; mov ebx, dword ptr [ebp - 4]; leave; ret; 
0x00001226: call dword ptr [eax + 0x51]; 
0x00001383: call dword ptr [eax - 0x18]; 
0x000013c9: call dword ptr [eax - 0x3603a275]; ret; 
0x0000121f: call dword ptr [eax - 0x73]; 
0x0000101d: call eax; 
0x0000127c: call eax; add esp, 0x10; leave; ret; 
0x0000101d: call eax; add esp, 8; pop ebx; ret; 
0x000012cd: call edx; 
0x000012cd: call edx; add esp, 0x10; mov ebx, dword ptr [ebp - 4]; leave; ret; 
0x00001553: clc; pop ecx; pop ebx; pop ebp; lea esp, [ecx - 4]; ret; 
0x000012d4: cld; leave; ret; 
0x00001559: cld; ret; 
0x000010aa: cmp bh, 0xff; jmp dword ptr [esi - 0x70]; 
0x000013b2: cmp dword ptr [ebx - 0x20], -1; call dword ptr [eax - 0x18]; 
0x00001010: das; add byte ptr [eax], al; mov eax, dword ptr [ebx + 0x48]; test eax, eax; je 0x101f; call eax; 
0x00001580: dec dword ptr [ebp - 0xfb63]; dec dword ptr [ebp - 0xff7b]; ljmp [ecx]; ret; 
0x00001586: dec dword ptr [ebp - 0xff7b]; ljmp [ecx]; ret; 
0x00001455: div dword ptr [edi - 0x1e]; mov eax, dword ptr [ebp - 0xc]; mov ebx, dword ptr [ebp - 4]; leave; ret; 
0x00001130: endbr32; jmp dword ptr [ebx + 0xc]; 
0x000015d0: endbr32; ret; 
0x0000145a: hlt; mov ebx, dword ptr [ebp - 4]; leave; ret; 
0x00001235: hlt; mov ebx, dword ptr [esp]; ret; 
0x00001279: in al, dx; adc al, 0x51; call eax; 
0x00001279: in al, dx; adc al, 0x51; call eax; add esp, 0x10; leave; ret; 
0x00001549: in al, dx; call eax; 
0x0000137c: in al, dx; or al, 0x8d; and dword ptr [eax - 0x20], 0xffffffff; call dword ptr [eax - 0x18]; 
0x000013af: in al, dx; or al, 0x8d; cmp dword ptr [ebx - 0x20], -1; call dword ptr [eax - 0x18]; 
0x000012c9: in al, dx; or byte ptr [eax + 0x51], dl; call edx; 
0x00001277: in eax, 0x83; in al, dx; adc al, 0x51; call eax; 
0x00001459: inc ebp; hlt; mov ebx, dword ptr [ebp - 4]; leave; ret; 
0x00001548: inc ebp; in al, dx; call eax; 
0x0000112d: inc esp; add byte ptr [eax], al; endbr32; jmp dword ptr [ebx + 0xc]; 
0x00001540: inc esp; and al, 0xc; add byte ptr [eax], al; add byte ptr [eax], al; mov eax, dword ptr [ebp - 0x14]; call eax; 
0x00001456: ja 0x143a; mov eax, dword ptr [ebp - 0xc]; mov ebx, dword ptr [ebp - 4]; leave; ret; 
0x0000101b: je 0x101f; call eax; 
0x0000101b: je 0x101f; call eax; add esp, 8; pop ebx; ret; 
0x00001273: je 0x1288; push ebp; mov ebp, esp; sub esp, 0x14; push ecx; call eax; 
0x000012c6: je 0x12d2; sub esp, 8; push eax; push ecx; call edx; 
0x000015bc: jecxz 0x1541; les ecx, ptr [ebx + ebx*2]; pop esi; pop edi; pop ebp; ret; 
0x00001134: jmp dword ptr [ebx + 0xc]; 
0x00001036: jmp dword ptr [ebx + 8]; 
0x0000104d: jmp dword ptr [esi - 0x70]; 
0x000015cc: lea esi, [esi]; endbr32; ret; 
0x000015c5: lea esi, [esi]; lea esi, [esi]; endbr32; ret; 
0x00001283: lea esi, [esi]; nop; ret; 
0x00001551: lea esp, [ebp - 8]; pop ecx; pop ebx; pop ebp; lea esp, [ecx - 4]; ret; 
0x00001557: lea esp, [ecx - 4]; ret; 
0x00001281: leave; ret; 
0x00001020: les ecx, ptr [eax]; pop ebx; ret; 
0x000015be: les ecx, ptr [ebx + ebx*2]; pop esi; pop edi; pop ebp; ret; 
0x00001318: les edx, ptr [eax]; call 0x1250; mov byte ptr [ebx + 0x128], 1; mov ebx, dword ptr [ebp - 4]; leave; ret; 
0x0000127f: les edx, ptr [eax]; leave; ret; 
0x000012d0: les edx, ptr [eax]; mov ebx, dword ptr [ebp - 4]; leave; ret; 
0x0000158c: ljmp [ecx]; ret; 
0x000015c6: mov ah, 0x26; add byte ptr [eax], al; add byte ptr [eax], al; lea esi, [esi]; endbr32; ret; 
0x0000131f: mov byte ptr [ebx + 0x128], 1; mov ebx, dword ptr [ebp - 4]; leave; ret; 
0x0000153f: mov dword ptr [esp + 0xc], 0; mov eax, dword ptr [ebp - 0x14]; call eax; 
0x00001547: mov eax, dword ptr [ebp - 0x14]; call eax; 
0x00001458: mov eax, dword ptr [ebp - 0xc]; mov ebx, dword ptr [ebp - 4]; leave; ret; 
0x00001013: mov eax, dword ptr [ebx + 0x48]; test eax, eax; je 0x101f; call eax; 
0x000015d5: mov ebp, dword ptr [esp]; ret; 
0x00001276: mov ebp, esp; sub esp, 0x14; push ecx; call eax; 
0x000012d2: mov ebx, dword ptr [ebp - 4]; leave; ret; 
0x00001236: mov ebx, dword ptr [esp]; ret; 
0x000015eb: mov edi, 0x83000029; les ecx, ptr [eax]; pop ebx; ret; 
0x00001339: mov edx, dword ptr [esp]; ret; 
0x0000112b: nop dword ptr [eax + eax]; endbr32; jmp dword ptr [ebx + 0xc]; 
0x0000112a: nop word ptr [eax + eax]; endbr32; jmp dword ptr [ebx + 0xc]; 
0x000013ca: nop; mov ebx, dword ptr [ebp - 4]; leave; ret; 
0x0000123f: nop; mov ebx, dword ptr [esp]; ret; 
0x0000123d: nop; nop; mov ebx, dword ptr [esp]; ret; 
0x0000123b: nop; nop; nop; mov ebx, dword ptr [esp]; ret; 
0x00001287: nop; ret; 
0x000015bf: or al, 0x5b; pop esi; pop edi; pop ebp; ret; 
0x0000137d: or al, 0x8d; and dword ptr [eax - 0x20], 0xffffffff; call dword ptr [eax - 0x18]; 
0x000013b0: or al, 0x8d; cmp dword ptr [ebx - 0x20], -1; call dword ptr [eax - 0x18]; 
0x000012c7: or al, byte ptr [ebx + 0x515008ec]; call edx; 
0x000012ca: or byte ptr [eax + 0x51], dl; call edx; 
0x0000112c: pop ds; inc esp; add byte ptr [eax], al; endbr32; jmp dword ptr [ebx + 0xc]; 
0x000012d3: pop ebp; cld; leave; ret; 
0x00001556: pop ebp; lea esp, [ecx - 4]; ret; 
0x000015c3: pop ebp; ret; 
0x00001555: pop ebx; pop ebp; lea esp, [ecx - 4]; ret; 
0x000015c0: pop ebx; pop esi; pop edi; pop ebp; ret; 
0x00001022: pop ebx; ret; 
0x00001554: pop ecx; pop ebx; pop ebp; lea esp, [ecx - 4]; ret; 
0x000015c2: pop edi; pop ebp; ret; 
0x000015c1: pop esi; pop edi; pop ebp; ret; 
0x00001558: popal; cld; ret; 
0x000013c3: push 2; call 0x1120; nop; mov ebx, dword ptr [ebp - 4]; leave; ret; 
0x00001132: push ds; sti; jmp dword ptr [ebx + 0xc]; 
0x000015d2: push ds; sti; ret; 
0x0000122a: push dword ptr [ebx + 0x50]; call 0x11b0; hlt; mov ebx, dword ptr [esp]; ret; 
0x00001030: push dword ptr [ebx + 4]; jmp dword ptr [ebx + 8]; 
0x000012cb: push eax; push ecx; call edx; 
0x00001275: push ebp; mov ebp, esp; sub esp, 0x14; push ecx; call eax; 
0x0000127b: push ecx; call eax; 
0x0000127b: push ecx; call eax; add esp, 0x10; leave; ret; 
0x000012cc: push ecx; call edx; 
0x000012cc: push ecx; call edx; add esp, 0x10; mov ebx, dword ptr [ebp - 4]; leave; ret; 
0x00001229: push esi; push dword ptr [ebx + 0x50]; call 0x11b0; hlt; mov ebx, dword ptr [esp]; ret; 
0x00001234: push esp; mov ebx, dword ptr [esp]; ret; 
0x00001296: ret 0x2d13; 
0x00001256: ret 0x2d53; 
0x0000106a: ret 0xffff; 
0x0000100e: ret; 
0x000012ce: rol byte ptr [ebx + 0x5d8b10c4], cl; cld; leave; ret; 
0x00001272: sal byte ptr [ebx + edx + 0x55], 0x89; in eax, 0x83; in al, dx; adc al, 0x51; call eax; 
0x0000101a: sal byte ptr [edx + eax - 1], 0xd0; add esp, 8; pop ebx; ret; 
0x000012c5: sal byte ptr [edx + ecx - 0x7d], cl; in al, dx; or byte ptr [eax + 0x51], dl; call edx; 
0x00001378: sar byte ptr [ecx + 0x1c], 0x83; in al, dx; or al, 0x8d; and dword ptr [eax - 0x20], 0xffffffff; call dword ptr [eax - 0x18]; 
0x000013ab: sar byte ptr [ecx + 0x1c], 0x83; in al, dx; or al, 0x8d; cmp dword ptr [ebx - 0x20], -1; call dword ptr [eax - 0x18]; 
0x00001237: sbb al, 0x24; ret; 
0x0000137a: sbb al, 0x83; in al, dx; or al, 0x8d; and dword ptr [eax - 0x20], 0xffffffff; call dword ptr [eax - 0x18]; 
0x000013ad: sbb al, 0x83; in al, dx; or al, 0x8d; cmp dword ptr [ebx - 0x20], -1; call dword ptr [eax - 0x18]; 
0x00001133: sti; jmp dword ptr [ebx + 0xc]; 
0x000015d3: sti; ret; 
0x000015d6: sub al, 0x24; ret; 
0x00001278: sub esp, 0x14; push ecx; call eax; 
0x00001278: sub esp, 0x14; push ecx; call eax; add esp, 0x10; leave; ret; 
0x000012c8: sub esp, 8; push eax; push ecx; call edx; 
0x00001019: test eax, eax; je 0x101f; call eax; 
0x00001019: test eax, eax; je 0x101f; call eax; add esp, 8; pop ebx; ret; 
0x000012c4: test edx, edx; je 0x12d2; sub esp, 8; push eax; push ecx; call edx; 

174 gadgets found
