


Gadgets
=======


0x000000000001c9e3: adc al, 0; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000009a83: adc al, 0x48; mov eax, dword ptr [rip + 0x5d485]; test rax, rax; je 0x9a98; jmp rax; 
0x00000000000474b4: adc al, 0x66; mov ebx, 0xb70f0b01; ret; 
0x000000000004dc5c: adc al, 0x80; cmp al, 7; mov edi, 0x8948107f; ret 0x8948; 
0x000000000001e36c: adc al, 0x81; add rdx, rcx; jmp rdx; 
0x000000000002c6c2: adc al, 0x88; add rdx, rax; jmp rdx; 
0x000000000002c1ee: adc al, 0x90; add rdx, r8; jmp rdx; 
0x000000000002c2f1: adc al, 0x96; add rdx, rsi; jmp rdx; 
0x0000000000033172: adc al, 0xb9; add rdx, rcx; jmp rdx; 
0x000000000000c978: adc al, 0xc; add al, byte ptr [rax]; lea rdi, [rsp + 0x90]; call rax; 
0x000000000003db4b: adc al, 0xca; ret; 
0x000000000003d35d: adc al, 1; add rdx, -0x10; mov eax, 1; ret; 
0x000000000003d3a2: adc al, 1; add rdx, 0x10; mov eax, 1; ret; 
0x000000000003d3c4: adc al, 1; add rdx, 0x20; mov eax, 1; ret; 
0x000000000004aae2: adc al, ah; add dword ptr [rax], eax; pop rcx; ret; 
0x000000000001caa8: adc al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x00000000000106d3: adc al, byte ptr [rbx]; add al, 0; lea rdx, [rip + 0x5333a]; lea rax, [rip - 0x71f5]; mov esi, 0x2b; call rax; 
0x0000000000042e30: adc al, byte ptr [rcx]; add byte ptr [rax + 0x63], cl; cmp al, 0xbb; add rdi, rbx; jmp rdi; 
0x0000000000049e4a: adc al, byte ptr [rdx + rdx*8 - 0xb6eb8b]; ret 0xc801; 
0x0000000000007e18: adc al, ch; rcl byte ptr [rcx], cl; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x0000000000007e68: adc al, ch; ret 0xc; 
0x0000000000031467: adc al, ch; ret; 
0x000000000002f724: adc al, ch; xchg byte ptr [rbp - 0x7ab70001], bh; sal byte ptr [rsp + rcx*2 + 0x48], 0x89; ret; 
0x000000000004ad06: adc bh, bh; adc eax, 0x1c20b; add rsp, 0x48; ret; 
0x000000000003fe46: adc bh, bh; adc eax, 0x270cb; add rsp, 0x48; ret; 
0x0000000000015246: adc bh, bh; adc eax, 0x51ccb; add rsp, 0x48; ret; 
0x00000000000151f6: adc bh, bh; adc eax, 0x51d1b; add rsp, 0x48; ret; 
0x00000000000151a6: adc bh, bh; adc eax, 0x51d6b; add rsp, 0x48; ret; 
0x0000000000015156: adc bh, bh; adc eax, 0x51dbb; add rsp, 0x48; ret; 
0x0000000000011d83: adc bh, bh; adc eax, 0x5518e; add rsp, 0x48; ret; 
0x0000000000011d43: adc bh, bh; adc eax, 0x551ce; add rsp, 0x48; ret; 
0x0000000000011d03: adc bh, bh; adc eax, 0x5520e; add rsp, 0x48; ret; 
0x000000000000e593: adc bh, bh; adc eax, 0x586fe; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000d45a: adc bh, bh; adc eax, 0x59467; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000b5f7: adc bl, ch; in eax, 0x48; mov edi, dword ptr [rsp]; call 0xb620; add rsp, 0x18; ret; 
0x000000000000b6f7: adc bl, ch; in eax, 0x48; mov edi, dword ptr [rsp]; call 0xb7c0; add rsp, 0x18; ret; 
0x000000000000b747: adc bl, ch; in eax, 0x48; mov edi, dword ptr [rsp]; call 0xb920; add rsp, 0x18; ret; 
0x000000000000b987: adc bl, ch; in eax, 0x48; mov edi, dword ptr [rsp]; call 0xb9c0; add rsp, 0x18; ret; 
0x000000000000bc57: adc bl, ch; in eax, 0x48; mov edi, dword ptr [rsp]; call 0xbcf0; add rsp, 0x18; ret; 
0x0000000000045d34: adc byte ptr [r15], cl; adc dword ptr [rbx], eax; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x000000000001ce76: adc byte ptr [r8 + 1], r15b; mov qword ptr [rdi], rax; add rsp, 0x30; ret; 
0x0000000000012082: adc byte ptr [r8 - 0x77], r9b; adc byte ptr [rdi], r9b; adc byte ptr [rdi], al; movups xmmword ptr [rsi], xmm0; ret; 
0x000000000003ddfd: adc byte ptr [r9], r8b; add byte ptr [rax], al; add cl, ch; ret; 
0x000000000003f5f6: adc byte ptr [rax + 0x110001], bh; add rsp, 0x98; pop rbx; pop r14; ret; 
0x0000000000028ccb: adc byte ptr [rax + 0x39], cl; ret; 
0x00000000000277ec: adc byte ptr [rax + 0x63480002], ah; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000001ce77: adc byte ptr [rax + 1], bh; mov qword ptr [rdi], rax; add rsp, 0x30; ret; 
0x000000000003d3a7: adc byte ptr [rax + 1], bh; ret; 
0x0000000000037f9c: adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000003c6d4: adc byte ptr [rax + 3], cl; push rdi; adc byte ptr [rbx + 4], dh; xor eax, eax; pop rbx; ret; 
0x000000000001cdb9: adc byte ptr [rax + 8], al; movups xmmword ptr [rdi + 8], xmm0; mov qword ptr [rdi], 0; add rsp, 0x30; ret; 
0x000000000001b924: adc byte ptr [rax + 9], cl; ret; 
0x000000000000d5cc: adc byte ptr [rax - 0x39], cl; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x168; ret; 
0x00000000000103f4: adc byte ptr [rax - 0x73], cl; adc eax, 0x535ec; lea rax, [rip - 0x6e63]; mov esi, 0x100; call rax; 
0x000000000000e30d: adc byte ptr [rax - 0x73], cl; adc eax, 0x5565b; lea rax, [rip - 0x4d7c]; call rax; 
0x00000000000111e4: adc byte ptr [rax - 0x73], cl; add eax, 0xffff8804; xor edx, edx; call rax; 
0x000000000003fe02: adc byte ptr [rax - 0x73], cl; je 0x3fe2b; add al, 0xff; adc eax, 0x26c8a; pop rcx; ret; 
0x0000000000007e63: adc byte ptr [rax - 0x73], cl; jl 0x7e8c; adc al, ch; ret 0xc; 
0x000000000004a54a: adc byte ptr [rax - 0x73], cl; xor eax, 0xa76e; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000010cd7: adc byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x20; ret; 
0x000000000000d3cc: adc byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x38; ret; 
0x000000000001000e: adc byte ptr [rax - 0x75], cl; and al, 0x10; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000d309: adc byte ptr [rax - 0x75], cl; and al, 0x10; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000f250: adc byte ptr [rax - 0x75], cl; and al, 0x10; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000000da10: adc byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x38; ret; 
0x000000000004aa5c: adc byte ptr [rax - 0x75], cl; and al, 0x18; lea rsi, [rip + 0xa8ac]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a8c1: adc byte ptr [rax - 0x75], cl; and al, 0x18; lea rsi, [rip + 0xaa47]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000000ce30: adc byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x38; ret; 
0x000000000004a433: adc byte ptr [rax - 0x75], cl; and al, 8; call qword ptr [rax + 0x18]; 
0x000000000000d482: adc byte ptr [rax - 0x75], cl; and al, 8; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000a523: adc byte ptr [rax - 0x75], cl; and al, 8; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000000b136: adc byte ptr [rax - 0x75], cl; and al, 8; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x30; ret; 
0x000000000004adf1: adc byte ptr [rax - 0x75], cl; jae 0x4adee; call qword ptr [rax + 0x18]; 
0x000000000000b01d: adc byte ptr [rax - 0x75], cl; je 0xb046; sbb al, ch; push 0x48000004; add esp, 0x38; ret; 
0x000000000002bab8: adc byte ptr [rax - 0x75], cl; jge 0x2babd; call rbx; 
0x00000000000102b9: adc byte ptr [rax - 0x75], cl; jl 0x102e2; sbb byte ptr [rax - 0x73], cl; add eax, 0xffff919a; call rax; 
0x0000000000034d61: adc byte ptr [rax - 0x75], cl; mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000004c3cf: adc byte ptr [rax - 0x75], cl; mov rcx, qword ptr ds:[rsi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov esi, eax; pop rax; jmp rcx; 
0x000000000000b174: adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; add rsp, 0x20; ret; 
0x000000000000f255: adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; add rsp, 0x58; ret; 
0x000000000004b3b3: adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x20; call qword ptr [rbp + 0x18]; 
0x000000000000d857: adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; mov qword ptr [rcx + 0x18], rdx; add rsp, 0xb0; ret; 
0x000000000002fb3d: adc byte ptr [rax - 0x75], cl; sbb dil, r15b; push rax; sub byte ptr [rax - 0x77], cl; ret 0xdeb; 
0x0000000000012083: adc byte ptr [rax - 0x77], cl; adc byte ptr [rdi], r9b; adc byte ptr [rdi], al; movups xmmword ptr [rsi], xmm0; ret; 
0x000000000000b16a: adc byte ptr [rax - 0x77], cl; and al, 0x18; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x000000000002da5c: adc byte ptr [rax - 0x77], cl; and al, 0x40; mov qword ptr [rsp + 0x48], 1; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x0000000000010013: adc byte ptr [rax - 0x77], cl; and al, 8; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000d30e: adc byte ptr [rax - 0x77], cl; and al, 8; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000a811: adc byte ptr [rax - 0x77], cl; and al, 8; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000003f53e: adc byte ptr [rax - 0x77], cl; clc; pop rcx; ret; 
0x000000000001166d: adc byte ptr [rax - 0x77], cl; ja 0x1168a; add rsp, 0x10; pop rbx; ret; 
0x0000000000049392: adc byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; jo 0x493ab; ret; 
0x00000000000493af: adc byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; jo 0x493c8; ret; 
0x00000000000493c7: adc byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; jo 0x493e0; ret; 
0x00000000000493e1: adc byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; jo 0x493fa; ret; 
0x0000000000030e7a: adc byte ptr [rax - 0x77], cl; out 0x41, al; call rdi; 
0x000000000002b0d3: adc byte ptr [rax - 0x77], cl; ret 0x3948; 
0x000000000004dc62: adc byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000031583: adc byte ptr [rax - 0x77], cl; ret; 
0x000000000004d96d: adc byte ptr [rax - 0x77], cl; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000030133: adc byte ptr [rax - 0x77], cl; xor al, 0x24; call qword ptr [rax + 0x20]; 
0x00000000000170dd: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rdi*2 + 0x48], 0x8d; dec qword ptr [rax - 0x77]; ret 0x8348; 
0x0000000000027e87: adc byte ptr [rax - 0x7bf0b405], al; ret 0xfffe; 
0x000000000004cf01: adc byte ptr [rax - 0x7d], cl; ret 0x6620; 
0x000000000002ca8e: adc byte ptr [rax - 0x7d], cl; ret 0xeb04; 
0x000000000004adcd: adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000000141ff: adc byte ptr [rax - 1], cl; ret 0x8949; 
0x00000000000204bd: adc byte ptr [rax - 1], cl; ret; 
0x000000000000c2ee: adc byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x1df58; call rax; 
0x000000000000f773: adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x28; add rsp, 0x68; ret; 
0x000000000001c849: adc byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000003038a: adc byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rax; call qword ptr [rip + 0x36541]; pop rcx; ret; 
0x000000000002f7e7: adc byte ptr [rax], al; mov rax, qword ptr [r14 + 0x20]; jne 0x2f80b; mov rdi, r15; call rax; 
0x000000000001552d: adc byte ptr [rbp - 0x77], cl; fmul qword ptr [rcx - 9]; fsub st(1), st(0); retf 3; add byte ptr [rax - 1], cl; ret; 
0x0000000000011cb0: adc byte ptr [rbx + 0x41], bl; pop rsi; pop r15; ret; 
0x0000000000015e09: adc byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x000000000002a315: adc byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; pop rbp; ret; 
0x000000000003c6d8: adc byte ptr [rbx + 4], dh; xor eax, eax; pop rbx; ret; 
0x000000000004a94d: adc byte ptr [rcx + 0x5e415bd8], cl; pop r15; ret; 
0x000000000001fb7e: adc byte ptr [rcx + rcx*4 + 0x45], cl; sbb byte ptr [rax - 0x7d], cl; ret 0x48e0; 
0x000000000004b38b: adc byte ptr [rcx + rcx*4 - 6], cl; call qword ptr [rbx + 0x18]; 
0x000000000000b247: adc byte ptr [rcx - 0x5fea003a], cl; mov ch, 5; add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x18; ret; 
0x000000000000b287: adc byte ptr [rcx - 0x5fea003a], cl; mov eax, 0x8b480005; and al, 0x10; add rsp, 0x18; ret; 
0x000000000002ba92: adc byte ptr [rcx - 0x73], cl; outsb dx, byte ptr [rsi]; dec dword ptr [rcx - 0x75]; jle 0x2ba9a; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x000000000002b3c7: adc byte ptr [rcx - 0x75], cl; cmp al, 0x24; call rbx; 
0x0000000000049608: adc byte ptr [rcx - 0x75], cl; or sil, r8b; add al, 0x18; add byte ptr [rax - 1], cl; ret; 
0x000000000003efce: adc byte ptr [rcx - 0x77], cl; test dh, bl; fadd dword ptr [rax + rax]; add byte ptr [rax + 0x6b], cl; ret; 
0x000000000003ddfe: adc byte ptr [rcx], al; add byte ptr [rax], al; add cl, ch; ret; 
0x00000000000285ad: adc byte ptr [rcx], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x000000000002996e: adc byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; pop r14; pop r15; ret; 
0x000000000003d44c: adc byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 3; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ce8c: adc byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 7; add rsp, 0x30; ret; 
0x0000000000011caa: adc byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x41], bl; pop rsi; pop r15; ret; 
0x0000000000015e03: adc byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x0000000000012089: adc byte ptr [rdi], al; movups xmmword ptr [rsi], xmm0; ret; 
0x0000000000012087: adc byte ptr [rdi], cl; adc byte ptr [rdi], al; movups xmmword ptr [rsi], xmm0; ret; 
0x0000000000045d35: adc byte ptr [rdi], cl; adc dword ptr [rbx], eax; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x000000000002697f: adc byte ptr [rdi], cl; mov bh, 0x94; and al, 0xa4; add byte ptr [rax], al; add byte ptr [rcx], cl; ret 0xc148; 
0x00000000000073a1: adc byte ptr [rdi], cl; sub byte ptr [rsp], al; movups xmmword ptr [rdi + rax*8], xmm0; add rsp, 0x20; pop rbx; ret; 
0x000000000004ee02: adc byte ptr [rdi], cl; sub dword ptr [rsp], eax; mov rdx, rsp; call qword ptr [rip + 0x18108]; add rsp, 0x38; ret; 
0x0000000000024bc1: adc byte ptr [rdi], cl; xchg eax, ebp; ret; 
0x0000000000012086: adc byte ptr [rdi], r9b; adc byte ptr [rdi], al; movups xmmword ptr [rsi], xmm0; ret; 
0x00000000000106f6: adc byte ptr [rdx + 0x30], bh; call 0x7078; mov rax, qword ptr [rsp + 8]; add rsp, 0x58; ret; 
0x000000000000d039: adc byte ptr [rdx + 0x38], bh; call 0x7078; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x0000000000049c67: adc byte ptr [rdx + 8], bh; mov rdi, rax; call qword ptr [rip + 0x1d22a]; add rsp, 0x18; ret; 
0x000000000004af55: adc byte ptr [rdx - 0x75], cl; xor al, 0x28; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000004af03: adc byte ptr [rdx - 0x75], cl; xor al, 0x33; call qword ptr [rax + 0x18]; 
0x0000000000007524: adc byte ptr [rdx - 0x77], cl; pop rsp; call qword ptr [rax]; 
0x00000000000135c1: adc byte ptr [rdx], al; jae 0x135e5; pop rbx; ret; 
0x000000000003d380: adc byte ptr [rsi + 0xf], ah; mov esp, 0xd1b70fc9; add rdx, rax; mov eax, 1; ret; 
0x000000000001e38b: adc byte ptr [rsi + 8], al; movups xmmword ptr [rdi + 8], xmm0; mov qword ptr [rdi], rax; ret; 
0x000000000000d8ca: adc byte ptr [rsp + 0x28], al; movups xmmword ptr [rcx], xmm0; add rsp, 0x58; ret; 
0x00000000000294be: adc byte ptr [rsp], al; movups xmmword ptr [rbx], xmm0; mov rax, rbx; add rsp, 0x1b0; pop rbx; ret; 
0x000000000003db78: adc byte ptr [rsp], al; movups xmmword ptr [rdi], xmm0; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000002bffd: adc cl, byte ptr [rax - 0x7d]; ret 0xeb04; 
0x00000000000142bd: adc cl, byte ptr [rax - 1]; ret 0x8948; 
0x00000000000078a8: adc cl, byte ptr [rax - 1]; ret 0x894d; 
0x000000000001e2cb: adc cl, ch; idiv di; jmp qword ptr [rsi + 0x2e]; 
0x0000000000013a6a: adc dh, byte ptr [rax]; add eax, 0x5c415b00; pop r13; pop r14; pop r15; ret; 
0x0000000000010191: adc dh, dh; and al, 0x57; add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x0000000000030345: adc dword ptr [r15], r9d; xchg eax, esp; rcr byte ptr [rbx + 0x41], 0x5e; pop r15; ret; 
0x000000000004ba41: adc dword ptr [r8 - 0x77], ecx; fcomp dword ptr [rbx + 0x41]; pop rsi; pop r15; ret; 
0x000000000002c2e2: adc dword ptr [rax + 6], edi; lea rsi, [rip + 0x2565d]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000004ba42: adc dword ptr [rax - 0x77], ecx; fcomp dword ptr [rbx + 0x41]; pop rsi; pop r15; ret; 
0x0000000000038dc0: adc dword ptr [rax - 0x7d], ecx; ret 0xf20; 
0x0000000000041904: adc dword ptr [rax - 1], ecx; ret; 
0x000000000000c1f5: adc dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x1e051; call rax; 
0x000000000001c97d: adc dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004e2de: adc dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000003f5fa: adc dword ptr [rax], eax; add rsp, 0x98; pop rbx; pop r14; ret; 
0x0000000000041977: adc dword ptr [rax], eax; cmovae rax, rdx; shl rax, 0x20; or rax, rcx; ret; 
0x000000000000c1a2: adc dword ptr [rax], eax; cmove rax, rcx; cmp rax, 0; jne 0xc1b3; add rsp, 0x78; ret; 
0x000000000004c2fa: adc dword ptr [rax], eax; jmp rcx; 
0x000000000002f395: adc dword ptr [rax], eax; lea rdx, [rip + 0x35722]; add rsp, 0x58; pop rbx; pop r14; ret; 
0x0000000000049faa: adc dword ptr [rax], eax; lea rsi, [rip + 0xaff5]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000004c0b7: adc dword ptr [rax], eax; mov eax, 0x30; lea rcx, [rip + 0x8fbf]; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x0000000000049fc2: adc dword ptr [rax], eax; mov eax, 0x5c; ret; 
0x000000000003f4bb: adc dword ptr [rax], eax; mov qword ptr [rbx], 1; add rsp, 0x18; pop rbx; pop r14; ret; 
0x000000000004bea0: adc dword ptr [rax], eax; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; mov esi, 0x5c; jmp rax; 
0x0000000000049fd1: adc dword ptr [rax], eax; ret; 
0x000000000004c54f: adc dword ptr [rbx + 0x10], eax; mov dword ptr [rbx + 0x30], ebp; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000045d33: adc dword ptr [rbx + 0x10], ecx; movups xmmword ptr [rbx], xmm0; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x000000000003f4d7: adc dword ptr [rbx + rdi + 0x10], eax; inc qword ptr [rbx + 8]; add rsp, 0x18; pop rbx; pop r14; ret; 
0x000000000002f454: adc dword ptr [rbx], eax; lea rdx, [rip + 0x35663]; mov rax, rbx; add rsp, 0x50; pop rbx; ret; 
0x00000000000294c2: adc dword ptr [rbx], eax; mov rax, rbx; add rsp, 0x1b0; pop rbx; ret; 
0x0000000000045d37: adc dword ptr [rbx], eax; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x0000000000030342: adc dword ptr [rcx + 0x3a], eax; adc dword ptr [r15], r9d; xchg eax, esp; rcr byte ptr [rbx + 0x41], 0x5e; pop r15; ret; 
0x0000000000030341: adc dword ptr [rcx + 0x3a], r8d; adc dword ptr [r15], r9d; xchg eax, esp; rcr byte ptr [rbx + 0x41], 0x5e; pop r15; ret; 
0x000000000004b3db: adc dword ptr [rcx + rcx*4 - 1], ecx; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000000d8cf: adc dword ptr [rcx], eax; add rsp, 0x58; ret; 
0x000000000003f3c6: adc dword ptr [rdi + 0xc], eax; ret; 
0x000000000001cdbd: adc dword ptr [rdi + 8], eax; mov qword ptr [rdi], 0; add rsp, 0x30; ret; 
0x000000000001e38f: adc dword ptr [rdi + 8], eax; mov qword ptr [rdi], rax; ret; 
0x00000000000073a7: adc dword ptr [rdi + rax*8], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000003db7c: adc dword ptr [rdi], eax; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000003f3c3: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0xc], xmm0; ret; 
0x000000000002806c: adc dword ptr [rdi], eax; pop rbx; pop r14; pop rbp; ret; 
0x0000000000030346: adc dword ptr [rdi], ecx; xchg eax, esp; rcr byte ptr [rbx + 0x41], 0x5e; pop r15; ret; 
0x0000000000041cf2: adc dword ptr [rsi + 0x10], ecx; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000001c960: adc dword ptr [rsi + 8], eax; mov qword ptr [r14], 8; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000041cee: adc dword ptr [rsi], eax; movups xmmword ptr [r14 + 0x10], xmm1; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000001208c: adc dword ptr [rsi], eax; ret; 
0x0000000000030130: adc dword ptr [rsp + 0x10], eax; mov qword ptr [rsp], rsi; call qword ptr [rax + 0x20]; 
0x000000000003f5bf: adc eax, 0x142f8; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000003db44: adc eax, 0x16427; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x000000000004ed49: adc eax, 0x17b4a; add rsp, 0x28; ret; 
0x000000000004ec19: adc eax, 0x17c7a; add rsp, 0x28; ret; 
0x000000000004eaeb: adc eax, 0x17da8; add rsp, 0x30; pop rbx; ret; 
0x000000000004e9b5: adc eax, 0x17ede; add rsp, 0x28; ret; 
0x000000000004e907: adc eax, 0x17f8c; add rsp, 0x88; ret; 
0x000000000004e8b1: adc eax, 0x17fe2; add rsp, 0x88; ret; 
0x000000000004ee0b: adc eax, 0x18108; add rsp, 0x38; ret; 
0x000000000004e6d1: adc eax, 0x181c2; add rsp, 0x88; ret; 
0x000000000004e631: adc eax, 0x18262; add rsp, 0x88; ret; 
0x000000000004e59e: adc eax, 0x182f5; add rsp, 0x88; ret; 
0x000000000004e50e: adc eax, 0x18385; add rsp, 0x88; ret; 
0x000000000004e47c: adc eax, 0x18417; add rsp, 0x88; ret; 
0x000000000004e3ec: adc eax, 0x184a7; add rsp, 0x88; ret; 
0x000000000004c48f: adc eax, 0x1aabc; pop rcx; ret; 
0x000000000004b8ce: adc eax, 0x1b645; add rsp, 0x38; ret; 
0x000000000004ad5b: adc eax, 0x1c1b8; add rsp, 0x38; ret; 
0x000000000004ad08: adc eax, 0x1c20b; add rsp, 0x48; ret; 
0x000000000004acc7: adc eax, 0x1c22c; pop rcx; ret; 
0x000000000004ac83: adc eax, 0x1c270; pop rcx; ret; 
0x000000000004ac46: adc eax, 0x1c2ad; pop rcx; ret; 
0x000000000004ac14: adc eax, 0x1c2df; pop rcx; ret; 
0x000000000004aae1: adc eax, 0x1c412; pop rcx; ret; 
0x000000000004a186: adc eax, 0x1cd8d; add rsp, 0x68; ret; 
0x000000000004a0f8: adc eax, 0x1ce73; mov rax, rbx; pop rbx; ret; 
0x0000000000049c71: adc eax, 0x1d22a; add rsp, 0x18; ret; 
0x0000000000045eb2: adc eax, 0x209f9; add rsp, 0x68; pop rbx; pop r14; ret; 
0x000000000002fa40: adc eax, 0x21f97; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000009b22: adc eax, 0x24448b48; and byte ptr [rax - 0x73], cl; or eax, 0x464d1; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004aef9: adc eax, 0x247c8b48; or byte ptr [rax - 0x75], cl; and al, 0x10; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000002c745: adc eax, 0x2524a; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000003fe09: adc eax, 0x26c8a; pop rcx; ret; 
0x000000000003fe48: adc eax, 0x270cb; add rsp, 0x48; ret; 
0x000000000003c6ee: adc eax, 0x2a585; pop rbx; ret; 
0x0000000000025189: adc eax, 0x2c4be; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000024466: adc eax, 0x2d159; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000024440: adc eax, 0x2d197; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002441a: adc eax, 0x2d1d5; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000001ed62: adc eax, 0x326ed; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000001ea73: adc eax, 0x3299c; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x000000000002f4d5: adc eax, 0x35606; ret; 
0x000000000002f4a9: adc eax, 0x35632; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002f458: adc eax, 0x35663; mov rax, rbx; add rsp, 0x50; pop rbx; ret; 
0x000000000002f399: adc eax, 0x35722; add rsp, 0x58; pop rbx; pop r14; ret; 
0x0000000000030c44: adc eax, 0x364cf; lea rax, [rip + 0x364d1]; pop rcx; ret; 
0x0000000000030392: adc eax, 0x36541; pop rcx; ret; 
0x000000000002f4c1: adc eax, 0x3798a; ud2; nop dword ptr [rax + rax]; mov rax, rdi; lea rdx, [rip + 0x35606]; ret; 
0x000000000002ec61: adc eax, 0x37b9a; mov r15, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000002ec32: adc eax, 0x37bc9; mov rbx, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000002e985: adc eax, 0x38106; mov rax, r14; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002e77a: adc eax, 0x38301; add rsp, 0x50; pop rbx; pop r14; pop r15; ret; 
0x000000000002e855: adc eax, 0x386ae; test eax, eax; jne 0x2e864; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000002e2af: adc eax, 0x3878c; add rsp, 0x80; pop rbx; pop r14; pop r15; ret; 
0x000000000002d994: adc eax, 0x390b7; ud2; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x000000000002ad5e: adc eax, 0x3bf5d; test rax, rax; jne 0x2ad78; add rsp, 0xb0; pop rbx; ret; 
0x000000000002a489: adc eax, 0x3c7a2; pop rcx; ret; 
0x00000000000285a4: adc eax, 0x3e3cf; mov rdi, qword ptr [rsp + 0x110]; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x0000000000028a11: adc eax, 0x3e582; add rsp, 0x10; pop rbx; ret; 
0x0000000000009cdf: adc eax, 0x44c60beb; and al, 7; add byte ptr [rdx + 0x59072444], cl; ret; 
0x000000000001ca8c: adc eax, 0x48000000; add esp, 8; pop rbx; pop r14; ret; 
0x000000000001e34d: adc eax, 0x48586; pop rcx; ret; 
0x000000000001e328: adc eax, 0x485ab; pop rcx; ret; 
0x0000000000015248: adc eax, 0x51ccb; add rsp, 0x48; ret; 
0x00000000000151f8: adc eax, 0x51d1b; add rsp, 0x48; ret; 
0x00000000000151a8: adc eax, 0x51d6b; add rsp, 0x48; ret; 
0x0000000000015158: adc eax, 0x51dbb; add rsp, 0x48; ret; 
0x0000000000010c36: adc eax, 0x52df5; lea rax, [rip - 0x7752]; mov esi, 0x2b; call rax; 
0x0000000000013b43: adc eax, 0x53278; mov qword ptr [r14 + 0x10], rbx; add rsp, 8; pop rbx; pop r14; ret; 
0x00000000000106d9: adc eax, 0x5333a; lea rax, [rip - 0x71f5]; mov esi, 0x2b; call rax; 
0x0000000000010533: adc eax, 0x534c8; lea rax, [rip - 0x704f]; mov esi, 0x19; call rax; 
0x00000000000103f7: adc eax, 0x535ec; lea rax, [rip - 0x6e63]; mov esi, 0x100; call rax; 
0x00000000000103bd: adc eax, 0x5360e; lea rax, [rip - 0x6e29]; mov esi, 0x100; call rax; 
0x0000000000011e23: adc eax, 0x54c58; mov eax, ebp; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000011d85: adc eax, 0x5518e; add rsp, 0x48; ret; 
0x0000000000011d45: adc eax, 0x551ce; add rsp, 0x48; ret; 
0x0000000000011d05: adc eax, 0x5520e; add rsp, 0x48; ret; 
0x00000000000116c6: adc eax, 0x55385; ud2; nop dword ptr [rax]; movabs rax, 0x245dac89066f9f; ret; 
0x000000000000e341: adc eax, 0x55642; lea rax, [rip - 0x4dad]; call rax; 
0x000000000000e310: adc eax, 0x5565b; lea rax, [rip - 0x4d7c]; call rax; 
0x000000000000e19a: adc eax, 0x557b9; lea rax, [rip - 0x4c06]; call rax; 
0x000000000000e169: adc eax, 0x557d2; lea rax, [rip - 0x4bd5]; call rax; 
0x000000000000d973: adc eax, 0x55fb0; lea rax, [rip - 0x448f]; mov esi, 0x49; call rax; 
0x000000000000f0cb: adc eax, 0x579b0; add rsp, 0x38; ret; 
0x000000000000e595: adc eax, 0x586fe; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000d45c: adc eax, 0x59467; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000d3c3: adc eax, 0x596e8; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x0000000000009b41: adc eax, 0x59a9a; lea rax, [rip - 0x65d]; mov esi, 0x28; call rax; 
0x000000000000d212: adc eax, 0x59ac9; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000cb1a: adc eax, 0x5a049; mov rdi, rax; lea rsi, [rip + 0x56d27]; call 0xced0; add rsp, 0x128; ret; 
0x000000000000c8f3: adc eax, 0x5a0e8; add rsp, 0x1a8; ret; 
0x000000000000c64a: adc eax, 0x5a391; add rsp, 0x318; ret; 
0x000000000000c0bb: adc eax, 0x5a920; add rsp, 0x1b8; ret; 
0x000000000000beb4: adc eax, 0x5ac1f; pop rax; ret; 
0x000000000000bc82: adc eax, 0x5ad09; pop rax; ret; 
0x000000000000b24b: adc eax, 0x5b5a0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000b28b: adc eax, 0x5b8a0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000868c: adc eax, 0x5e4f7; test rax, rax; jle 0x863a; pop rbx; ret; 
0x00000000000354ea: adc eax, 0x89480003; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x4de8; 
0x000000000003549d: adc eax, 0x89480003; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x9ae8; 
0x0000000000025372: adc eax, 0x8b440000; add byte ptr gs:[rax - 0x7d], cl; ret; 
0x00000000000253b9: adc eax, 0x8b4c0000; add byte ptr gs:[rax - 0x7d], cl; ret; 
0x0000000000025184: adc eax, 0x8d480000; adc eax, 0x2c4be; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002510a: adc eax, 0x8d480000; or eax, 0x2c518; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004bd64: adc eax, 0x9267; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000001c1fa: adc eax, 0xba3d8d48; add r8, qword ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000003d398: adc eax, 0xc9bc0f66; movzx ecx, cx; lea rdx, [rcx + rax]; add rdx, 0x10; mov eax, 1; ret; 
0x0000000000046ed4: adc eax, 0xdaeb; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000025326: adc eax, 0xf440000; mov bh, 0x65; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000004ad25: adc eax, 0xffffef56; ret; 
0x000000000001f867: adc eax, dword ptr [rax]; add byte ptr [rax + 3], cl; test byte ptr [rax + rcx*4], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000041742: adc ebx, ebp; and esi, eax; or byte ptr [r8], r8b; mov qword ptr [rdi], 0; pop rbx; ret; 
0x000000000004b9de: adc ecx, dword ptr [rax - 0x75]; cmp byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x73], cl; xor eax, 0x992f; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a771: adc ecx, dword ptr [rax - 0x75]; cmp byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x73], cl; xor eax, 0xab9c; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000001ce73: adc ecx, dword ptr [rax - 0x77]; adc byte ptr [r8 + 1], r15b; mov qword ptr [rdi], rax; add rsp, 0x30; ret; 
0x000000000004ade2: adc ecx, dword ptr [rax - 0x7b]; sal byte ptr [rcx + rbx + 0x48], cl; mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x0000000000015b58: adc ecx, dword ptr [rax - 1]; ret; 
0x0000000000047f48: adc ecx, dword ptr [rcx - 1]; ret; 
0x000000000001e2ca: adc r9b, r13b; idiv di; jmp qword ptr [rsi + 0x2e]; 
0x0000000000010190: adc sil, sil; and al, 0x57; add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x000000000000c82c: add al, 0; add bl, ch; add byte ptr [rax - 0x73], cl; add eax, 0x1e468; lea rdi, [rsp + 0x2b0]; call rax; 
0x000000000003efd4: add al, 0; add byte ptr [rax + 0x6b], cl; ret; 
0x000000000001c6f0: add al, 0; add byte ptr [rax - 0x73], cl; or eax, 0x348f6; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000039f2f: add al, 0; add byte ptr [rax - 0x75], cl; and al, 8; call qword ptr [rax + 0x20]; 
0x000000000004cc5a: add al, 0; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000011ba7: add al, 0; add byte ptr [rax], al; lea rsi, [rsp + 4]; call 0x2b6b0; pop rcx; ret; 
0x0000000000011ac7: add al, 0; add byte ptr [rax], al; lea rsi, [rsp + 4]; call 0x2b760; pop rcx; ret; 
0x0000000000037252: add al, 0; add byte ptr [rcx], dh; rol byte ptr [rax + 0xf084979], cl; xchg eax, esp; ret 0x8b48; 
0x000000000003dc3c: add al, 0; add byte ptr [rdi], cl; xchg eax, ebp; ret 0xf41; 
0x00000000000247f4: add al, 0; add byte ptr [rdi], cl; xchg eax, ebp; ret 0xffbb; 
0x000000000000c790: add al, 0; lea rax, [rip + 0x3cec7]; lea rdi, [rsp + 0x2f0]; mov edx, 1; mov ecx, 0x4a; call rax; 
0x000000000000c684: add al, 0; lea rax, [rip + 0x3cfd3]; lea rdi, [rsp + 0x268]; mov edx, 1; mov ecx, 0x4a; call rax; 
0x000000000000d064: add al, 0; lea rcx, [rip + 0x5686b]; lea rax, [rip - 0x3864]; mov esi, 0x2b; lea rdx, [rsp + 0x20]; call rax; 
0x000000000000cfa7: add al, 0; lea rcx, [rip + 0x56928]; lea rax, [rip - 0x37a7]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000000cf0f: add al, 0; lea rcx, [rip + 0x569c0]; lea rax, [rip - 0x370f]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000000c8a4: add al, 0; lea rdi, [rsp + 0xc8]; mov edx, 7; call 0xb180; lea rax, [rip + 0x210e1]; call rax; 
0x00000000000106d5: add al, 0; lea rdx, [rip + 0x5333a]; lea rax, [rip - 0x71f5]; mov esi, 0x2b; call rax; 
0x000000000001052f: add al, 0; lea rdx, [rip + 0x534c8]; lea rax, [rip - 0x704f]; mov esi, 0x19; call rax; 
0x000000000000d96f: add al, 0; lea rdx, [rip + 0x55fb0]; lea rax, [rip - 0x448f]; mov esi, 0x49; call rax; 
0x0000000000009b3d: add al, 0; lea rdx, [rip + 0x59a9a]; lea rax, [rip - 0x65d]; mov esi, 0x28; call rax; 
0x0000000000009b2d: add al, 0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000018f00: add al, 0; pop rbx; ret; 
0x000000000001e32b: add al, 0; pop rcx; ret; 
0x0000000000018f2b: add al, 0; ret; 
0x000000000004682d: add al, 0x17; mov byte ptr [rdi + r10], al; pop rax; ret; 
0x0000000000046694: add al, 0x17; mov byte ptr [rdi + rcx], al; pop rbx; ret; 
0x0000000000046831: add al, 0x17; pop rax; ret; 
0x000000000004960e: add al, 0x18; add byte ptr [rax - 1], cl; ret; 
0x000000000001081c: add al, 0x24; add rax, 8; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x78; ret; 
0x0000000000009fee: add al, 0x24; add rsp, 0x18; ret; 
0x000000000000a994: add al, 0x24; add rsp, 0x28; ret; 
0x0000000000011248: add al, 0x24; add rsp, 4; ret; 
0x0000000000010436: add al, 0x24; call 0xd0c0; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000deb6: add al, 0x24; call 0xe450; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000010c8a: add al, 0x24; mov byte ptr [rax], 0; pop rax; ret; 
0x000000000001cf1e: add al, 0x24; mov ecx, dword ptr [rsp + 3]; mov dword ptr [rdi + 9], eax; mov dword ptr [rdi + 0xc], ecx; add rsp, 0x18; ret; 
0x0000000000010a2a: add al, 0x24; mov qword ptr [rax + 8], 0; mov rax, qword ptr [rsp + 8]; add rsp, 0x138; ret; 
0x000000000000cf85: add al, 0x24; mov rax, qword ptr [rax + 8]; add rsp, 0x28; ret; 
0x0000000000009fea: add al, 0x24; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000010c86: add al, 0x24; mov rax, qword ptr [rsp]; mov byte ptr [rax], 0; pop rax; ret; 
0x000000000001d359: add al, 0x24; mov rcx, qword ptr [rsp + 7]; mov qword ptr [rdi + 1], rax; mov qword ptr [rdi + 8], rcx; add rsp, 0x20; ret; 
0x000000000000ba22: add al, 0x24; mov rdi, qword ptr [rax]; call 0xeda0; add rsp, 0x18; ret; 
0x000000000000b399: add al, 0x24; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax]; call rax; 
0x000000000000b92a: add al, 0x24; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xecf0; add rsp, 0x18; ret; 
0x000000000000b94a: add al, 0x24; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xee50; add rsp, 0x18; ret; 
0x000000000000b45d: add al, 0x24; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xef00; add rsp, 0x18; ret; 
0x000000000000b3cd: add al, 0x24; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xefc0; add rsp, 0x18; ret; 
0x000000000000a7af: add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000000a819: add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000cc8a: add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000110f3: add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000d357: add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000004ee05: add al, 0x24; mov rdx, rsp; call qword ptr [rip + 0x18108]; add rsp, 0x38; ret; 
0x000000000004ad52: add al, 0x24; mov rdx, rsp; mov rdi, rax; call qword ptr [rip + 0x1c1b8]; add rsp, 0x38; ret; 
0x00000000000294bf: add al, 0x24; movups xmmword ptr [rbx], xmm0; mov rax, rbx; add rsp, 0x1b0; pop rbx; ret; 
0x00000000000073a4: add al, 0x24; movups xmmword ptr [rdi + rax*8], xmm0; add rsp, 0x20; pop rbx; ret; 
0x000000000003db79: add al, 0x24; movups xmmword ptr [rdi], xmm0; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000000a1e1: add al, 0x24; pop rcx; ret; 
0x000000000004df84: add al, 0x24; ret 1; 
0x000000000004b3d4: add al, 0x34; cmp rax, -1; je 0x4b3ed; mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000000b358: add al, 0x48; add esp, 0x28; ret; 
0x000000000000bd4e: add al, 0x48; cmove eax, ecx; cmp rax, 0; jne 0xbd5b; pop rax; ret; 
0x000000000004af4b: add al, 0x48; mov edi, dword ptr [rsp + 8]; mov rcx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000004c487: add al, 0x48; mov edi, esi; mov rsi, rax; call qword ptr [rip + 0x1aabc]; pop rcx; ret; 
0x0000000000046ecd: add al, 0x66; mov ecx, 0x8d480001; adc eax, 0xdaeb; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000854a: add al, 0x74; ret; 
0x000000000002815c: add al, 0x75; add eax, 0x18c48348; ret; 
0x0000000000007dec: add al, 0x75; add eax, 0x28c48348; ret; 
0x000000000002a459: add al, 0x75; or dword ptr [rax - 0x73], ecx; add eax, 0x3cc1d; pop rcx; ret; 
0x000000000002a259: add al, 0x75; or dword ptr [rax - 0x73], ecx; add eax, 0x3cde5; pop rcx; ret; 
0x000000000004e33e: add al, 0x75; sbb cl, byte ptr [rcx - 0x75]; mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x6fd3]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bac3: add al, 0x75; sbb cl, byte ptr [rcx - 0x75]; mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x984e]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000001cc6e: add al, 0x81; add rax, r9; jmp rax; 
0x0000000000009b31: add al, 0x81; add rax, rcx; jmp rax; 
0x000000000002261a: add al, 0x81; add rax, rcx; xor ebx, ebx; jmp rax; 
0x000000000004c33c: add al, 0x81; add rax, rcx; xor r12d, r12d; mov ebp, edx; jmp rax; 
0x000000000004bec2: add al, 0x81; add rax, rcx; xor r12d, r12d; mov r13d, r14d; jmp rax; 
0x0000000000046edb: add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000008723: add al, 0x84; add rax, r12; jmp rax; 
0x000000000004bea4: add al, 0x87; add rax, r15; mov esi, 0x5c; jmp rax; 
0x000000000001c204: add al, 0x87; add rax, rdi; jmp rax; 
0x0000000000031e82: add al, 0x88; ret; 
0x000000000001ab47: add al, 0x89; add rax, r9; jmp rax; 
0x0000000000011243: add al, 0x89; cmp al, 0x24; mov eax, dword ptr [rsp]; add rsp, 4; ret; 
0x000000000001ea7a: add al, 0x8a; add rax, rdx; jmp rax; 
0x000000000003db3d: add al, 0x8a; add rax, rdx; lea rdx, [rip + 0x16427]; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x000000000002ba3c: add al, 0xa9; add rax, rcx; jmp rax; 
0x0000000000039636: add al, 0xba; or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r14; lea rbx, [rip - 0x28206]; call rbx; 
0x000000000002033e: add al, 0xba; or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r14; lea rbx, [rip - 0xef0e]; call rbx; 
0x0000000000021d46: add al, 0xba; or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r15; lea rbx, [rip - 0x10916]; call rbx; 
0x0000000000034d77: add al, 0xc0; add rsp, 0x28; ret; 
0x000000000004edca: add al, 0xc1; mov rdi, qword ptr [rsi]; mov rcx, qword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rsi, rax; jmp rcx; 
0x00000000000073a8: add al, 0xc7; add rsp, 0x20; pop rbx; ret; 
0x0000000000015112: add al, 0xe8; add word ptr [rax], ax; pop rcx; ret; 
0x0000000000015062: add al, 0xe8; clc; add word ptr [rax], ax; pop rcx; ret; 
0x0000000000011b30: add al, 0xe8; jp 0x11acf; add dword ptr [rax], eax; pop rcx; ret; 
0x000000000000ffab: add al, 0xe8; mov edi, 0x24ffffbd; add dword ptr [rdi], ecx; mov dh, 0xc0; pop rcx; ret; 
0x0000000000014fdf: add al, 0xe8; retf; add word ptr [rax], ax; pop rcx; ret; 
0x0000000000011aff: add al, 0xe8; stosd dword ptr [rdi], eax; wait; add dword ptr [rax], eax; pop rcx; ret; 
0x0000000000011b6c: add al, 0xe8; wait; add dword ptr [rax], eax; pop rcx; ret; 
0x000000000002f20e: add al, 0xeb; add ch, bl; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000046697: add al, 0xf; pop rbx; ret; 
0x000000000002536e: add al, 0xf; test byte ptr [rbp + rdx], dh; add byte ptr [rbx + rcx*4 + 0x65], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000009048: add al, 0xf; xchg dword ptr [rbx], edi; add dword ptr [rax], eax; add byte ptr [rcx + 0xc6349c1], cl; mov word ptr [rcx + rax - 0x1f], cs; jmp rcx; 
0x0000000000008df8: add al, 0xf; xchg dword ptr [rsi], ebp; add dword ptr [rax], eax; add byte ptr [rcx + 0xc6349c1], cl; mov word ptr [rcx + rax - 0x1f], cs; jmp rcx; 
0x0000000000008718: add al, 0xf; xchg esi, edx; add al, byte ptr [rax]; add byte ptr [rcx + 0x46349c0], cl; test byte ptr [rcx + rax - 0x20], cl; jmp rax; 
0x000000000004acc5: add al, 0xff; adc eax, 0x1c22c; pop rcx; ret; 
0x000000000004ac81: add al, 0xff; adc eax, 0x1c270; pop rcx; ret; 
0x000000000004ac44: add al, 0xff; adc eax, 0x1c2ad; pop rcx; ret; 
0x000000000004ac12: add al, 0xff; adc eax, 0x1c2df; pop rcx; ret; 
0x000000000004aadf: add al, 0xff; adc eax, 0x1c412; pop rcx; ret; 
0x000000000003fe07: add al, 0xff; adc eax, 0x26c8a; pop rcx; ret; 
0x00000000000133a7: add al, 0xff; and eax, 0x5372a; ret; 
0x000000000002c546: add al, 1; add byte ptr [rax], al; movzx ecx, byte ptr [r10]; movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x000000000001052e: add al, 4; add byte ptr [rax - 0x73], cl; adc eax, 0x534c8; lea rax, [rip - 0x704f]; mov esi, 0x19; call rax; 
0x000000000003f66c: add al, 8; ret 0x4e78; 
0x000000000003f95c: add al, 8; ret 0x8b48; 
0x000000000003bad6: add al, byte ptr [rax]; add al, ch; ret 0xfd6e; 
0x000000000000c5ce: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x1dea8; lea rdi, [rsp + 0x208]; call rax; 
0x0000000000029749: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; dec dword ptr [r8 - 0x7d]; ret; 
0x0000000000043670: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; or eax, 0x10aa6; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001d819: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; or eax, 0x33ab9; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004b116: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; out dx, eax; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x0000000000031c7c: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x3b66; 
0x000000000003c345: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000011645: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x75f8; 
0x000000000001870f: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; rol byte ptr [rsp + rcx*2], 0x39; ret 0xa575; 
0x00000000000115c5: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; sar al, 0x75; ret 0x280f; 
0x00000000000175c5: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; sar al, 0x75; ret 0xc031; 
0x0000000000017655: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; sar eax, 0x75; ret 0xc749; 
0x0000000000012239: add al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret; 
0x0000000000016cee: add al, byte ptr [rax]; add byte ptr [rax - 1], cl; ret 0x3948; 
0x0000000000011574: add al, byte ptr [rax]; add byte ptr [rax - 1], cl; ret; 
0x000000000004a631: add al, byte ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000004e0c6: add al, byte ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x0000000000014f9b: add al, byte ptr [rax]; add byte ptr [rax], al; lea rsi, [rsp + 4]; call 0x2b6b0; pop rcx; ret; 
0x0000000000011a48: add al, byte ptr [rax]; add byte ptr [rax], al; lea rsi, [rsp + 4]; call 0x2b760; pop rcx; ret; 
0x000000000000de4c: add al, byte ptr [rax]; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x30]; add rsp, 0x58; ret; 
0x0000000000045d45: add al, byte ptr [rax]; add byte ptr [rax], al; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x000000000001e345: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, rax; call qword ptr [rip + 0x48586]; pop rcx; ret; 
0x000000000003d5e8: add al, byte ptr [rax]; add byte ptr [rax], al; pop rbx; pop r14; pop rbp; ret; 
0x000000000004a7f6: add al, byte ptr [rax]; add byte ptr [rax], al; sub rdx, rax; mov rdi, qword ptr [r12]; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x0000000000023f3d: add al, byte ptr [rax]; add byte ptr [rbp - 0x77], cl; ret 0x8b48; 
0x0000000000030aad: add al, byte ptr [rax]; add byte ptr [rbx + 0x41], bl; pop rsi; pop r15; ret; 
0x00000000000271c0: add al, byte ptr [rax]; add byte ptr [rbx - 0x7af0d108], al; mov esp, 0x41000007; call rdx; 
0x000000000000871c: add al, byte ptr [rax]; add byte ptr [rcx + 0x46349c0], cl; test byte ptr [rcx + rax - 0x20], cl; jmp rax; 
0x0000000000048721: add al, byte ptr [rax]; add byte ptr [rcx + 0xf], al; mov dh, 0x73; add dword ptr [rcx - 0x7d], ecx; ret; 
0x000000000001a88c: add al, byte ptr [rax]; add byte ptr [rcx + 1], cl; ret; 
0x000000000000c692: add al, byte ptr [rax]; add byte ptr [rdx + 1], bh; mov ecx, 0x4a; call rax; 
0x00000000000472f2: add al, byte ptr [rax]; add cl, al; clc; or dword ptr [rcx], edi; ret 0x830f; 
0x000000000003782b: add al, byte ptr [rax]; add dh, dh; ret; 
0x000000000003fe4b: add al, byte ptr [rax]; add rsp, 0x48; ret; 
0x0000000000045eb5: add al, byte ptr [rax]; add rsp, 0x68; pop rbx; pop r14; ret; 
0x000000000003cf61: add al, byte ptr [rax]; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000000c8bd: add al, byte ptr [rax]; call rax; 
0x000000000000b1e5: add al, byte ptr [rax]; lea rdi, [rsp + 0x38]; call rax; 
0x000000000000c97a: add al, byte ptr [rax]; lea rdi, [rsp + 0x90]; call rax; 
0x000000000000c17c: add al, byte ptr [rax]; mov edi, 1; call rax; 
0x0000000000022d02: add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000022616: add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor ebx, ebx; jmp rax; 
0x000000000002ba38: add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x00000000000302e7: add al, byte ptr [rax]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x0000000000029b8f: add al, byte ptr [rax]; movsxd rcx, dword ptr [rax + rdi*4]; add rcx, rax; jmp rcx; 
0x000000000002441d: add al, byte ptr [rax]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002fb21: add al, byte ptr [rax]; movsxd rdi, dword ptr [rcx + rdx*4]; add rdi, rcx; jmp rdi; 
0x000000000002c1ea: add al, byte ptr [rax]; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x000000000002c6be: add al, byte ptr [rax]; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x000000000002c2ed: add al, byte ptr [rax]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x0000000000023437: add al, byte ptr [rax]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000003d831: add al, byte ptr [rax]; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x000000000003fbf3: add al, byte ptr [rax]; nop word ptr cs:[rax + rax]; nop; ret; 
0x000000000003c6f1: add al, byte ptr [rax]; pop rbx; ret; 
0x000000000003fe0c: add al, byte ptr [rax]; pop rcx; ret; 
0x000000000003d019: add al, byte ptr [rax]; ret; 
0x0000000000038add: add al, ch; in eax, dx; cmp edi, esi; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000156c1: add al, ch; leave; sbb edi, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000000cb28: add al, ch; movabs byte ptr [0x128c48148000003], al; add byte ptr [rax], al; ret; 
0x000000000000c164: add al, ch; or eax, dword ptr ss:[rax]; add byte ptr [rax - 0x75], cl; cmp al, 0x24; lea rax, [rip + 0x1eb2b]; call rax; 
0x000000000003bad8: add al, ch; ret 0xfd6e; 
0x000000000000f6e7: add al, ch; ret; 
0x0000000000042954: add al, ch; sbb ax, word ptr [rax]; add byte ptr [rax + rax*8 - 0xb7eb8b], al; ret; 
0x0000000000015748: add al, ch; sbb edi, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000000bc0e: add al, ch; sub al, 1; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000000c770: add al, ch; sub al, byte ptr [rip + 0xeb0000]; lea rax, [rip + 0x1e521]; lea rdi, [rsp + 0x280]; call rax; 
0x000000000004e8af: add bh, bh; adc eax, 0x17fe2; add rsp, 0x88; ret; 
0x000000000004e6cf: add bh, bh; adc eax, 0x181c2; add rsp, 0x88; ret; 
0x000000000004e62f: add bh, bh; adc eax, 0x18262; add rsp, 0x88; ret; 
0x000000000004e59c: add bh, bh; adc eax, 0x182f5; add rsp, 0x88; ret; 
0x000000000004e50c: add bh, bh; adc eax, 0x18385; add rsp, 0x88; ret; 
0x000000000004e47a: add bh, bh; adc eax, 0x18417; add rsp, 0x88; ret; 
0x000000000004e3ea: add bh, bh; adc eax, 0x184a7; add rsp, 0x88; ret; 
0x000000000000c648: add bh, bh; adc eax, 0x5a391; add rsp, 0x318; ret; 
0x000000000000c0b9: add bh, bh; adc eax, 0x5a920; add rsp, 0x1b8; ret; 
0x00000000000491b0: add bh, bh; and eax, 0x1d8c9; ret; 
0x0000000000049190: add bh, bh; and eax, 0x1d8e9; ret; 
0x000000000003fbee: add bh, bh; and eax, 0x2735b; nop word ptr cs:[rax + rax]; nop; ret; 
0x000000000003d8f4: add bh, bh; and eax, 0x29185; ret; 
0x000000000003d8bc: add bh, bh; and eax, 0x291bd; ret; 
0x000000000003d88b: add bh, bh; and eax, 0x291ee; ret; 
0x0000000000018f26: add bh, bh; and eax, 0x4db53; ret; 
0x00000000000137b4: add bh, bh; and eax, 0x532c5; ret; 
0x00000000000136fb: add bh, bh; and eax, 0x5337e; ret; 
0x0000000000013409: add bh, bh; and eax, 0x53670; ret; 
0x00000000000130b4: add bh, bh; and eax, 0x539c5; ret; 
0x0000000000012f4b: add bh, bh; and eax, 0x53b2e; ret; 
0x0000000000012ea6: add bh, bh; and eax, 0x53bd3; ret; 
0x0000000000012e01: add bh, bh; and eax, 0x53c78; ret; 
0x00000000000127b1: add bh, bh; and eax, 0x542c8; ret; 
0x0000000000012758: add bh, bh; and eax, 0x54321; ret; 
0x0000000000012714: add bh, bh; and eax, 0x54365; ret; 
0x00000000000126f8: add bh, bh; and eax, 0x54381; ret; 
0x000000000001250f: add bh, bh; and eax, 0x5456a; ret; 
0x0000000000011f9b: add bh, bh; and eax, 0x54ade; ret; 
0x000000000000881b: add bh, bh; ret 0x4475; 
0x0000000000048dec: add bh, bh; ret 0x8348; 
0x000000000004a01e: add bh, byte ptr [rax + 0x7b]; ret; 
0x000000000000c3fe: add bl, al; lea rax, [rip - 0x2de7]; call rax; 
0x0000000000049fd2: add bl, al; movzx ecx, byte ptr [rdi + 0xc]; lea rsi, [rip + 0xafd9]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000000c82e: add bl, ch; add byte ptr [rax - 0x73], cl; add eax, 0x1e468; lea rdi, [rsp + 0x2b0]; call rax; 
0x000000000000c775: add bl, ch; add byte ptr [rax - 0x73], cl; add eax, 0x1e521; lea rdi, [rsp + 0x280]; call rax; 
0x000000000000c721: add bl, ch; add byte ptr [rax - 0x73], cl; add eax, 0x1e575; lea rdi, [rsp + 0x228]; call rax; 
0x000000000000a1ab: add bl, ch; cmpsb byte ptr [rsi], byte ptr [rdi]; mov rax, qword ptr [rsp + 0x50]; add rsp, 0xe8; ret; 
0x0000000000010f46: add bl, ch; lodsb al, byte ptr [rsi]; mov eax, dword ptr [rsp + 0x18]; mov edx, dword ptr [rsp + 0x1c]; add rsp, 0x38; ret; 
0x0000000000010dc5: add bl, ch; popfq; mov eax, dword ptr [rsp + 0x18]; mov edx, dword ptr [rsp + 0x1c]; add rsp, 0x38; ret; 
0x000000000000ba8e: add bl, ch; sub cl, byte ptr [rax - 0x73]; add eax, 0xffffdb88; call rax; 
0x000000000000e783: add bl, ch; xchg byte ptr [rax - 0x75], cl; and al, 0x48; add rsp, 0xd8; ret; 
0x000000000001a443: add byte ptr [r8], al; add byte ptr [rax - 0x7af0b407], al; ret 1; 
0x000000000000b30a: add byte ptr [r8], al; add rsp, 0x18; ret; 
0x000000000000b9c3: add byte ptr [r8], al; pop rax; ret; 
0x0000000000049f5c: add byte ptr [r8], r8b; nop; movabs rax, 0x6d420b247d05a67e; ret; 
0x000000000000b623: add byte ptr [r8], r8b; pop rax; ret; 
0x000000000000be6e: add byte ptr [rax + 0x136ae850], dl; add byte ptr [rax], al; pop rcx; ret; 
0x000000000004a1ae: add byte ptr [rax + 0x18478b48], dl; ret; 
0x000000000000f0de: add byte ptr [rax + 0x1b950], dl; add byte ptr [rax], al; call 0xeb40; pop rcx; ret; 
0x000000000004a1be: add byte ptr [rax + 0x2047b60f], dl; ret; 
0x000000000004a7f9: add byte ptr [rax + 0x29], cl; ret 0x8b49; 
0x00000000000304a2: add byte ptr [rax + 0x29], cl; ret; 
0x000000000004c0b8: add byte ptr [rax + 0x30], bh; lea rcx, [rip + 0x8fbf]; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x000000000000f0ef: add byte ptr [rax + 0x31], dl; leave; call 0xeb40; pop rcx; ret; 
0x000000000002574f: add byte ptr [rax + 0x39], cl; fimul dword ptr [rdi]; test byte ptr [rdi], bl; add eax, 0x8b480000; add dword ptr [rax - 1], ecx; ret; 
0x00000000000454ef: add byte ptr [rax + 0x39], cl; ret 0xc974; 
0x000000000002af3f: add byte ptr [rax + 0x39], cl; ret; 
0x000000000004bc2e: add byte ptr [rax + 0x48078b48], dl; mov ecx, dword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov rdi, rax; jmp rcx; 
0x000000000000b29f: add byte ptr [rax + 0x48], dl; add edi, esi; mov qword ptr [rsp], rdi; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000d1df: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000002a47f: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; mov rdi, rsp; call qword ptr [rip + 0x3c7a2]; pop rcx; ret; 
0x000000000003497f: add byte ptr [rax + 0x48], dl; mov eax, dword ptr [rip + 0x32748]; test rax, rax; lea rcx, [rip - 0x62d2]; cmovne rcx, rax; call rcx; 
0x000000000001502f: add byte ptr [rax + 0x48], dl; mov edi, dword ptr [rdi]; call 0x11bc0; xor eax, eax; pop rcx; ret; 
0x0000000000014f3f: add byte ptr [rax + 0x48], dl; mov edi, dword ptr [rdi]; call 0x15d00; xor eax, eax; pop rcx; ret; 
0x000000000000b2df: add byte ptr [rax + 0x48], dl; mov edi, dword ptr [rdi]; call 0xb320; pop rcx; ret; 
0x000000000000a21e: add byte ptr [rax + 0x48f88948], dl; mov dword ptr [rdi], esi; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000041844: add byte ptr [rax + 0x5b078801], dh; ret; 
0x0000000000049fc3: add byte ptr [rax + 0x5c], bh; ret; 
0x000000000001e369: add byte ptr [rax + 0x63], cl; adc al, 0x81; add rdx, rcx; jmp rdx; 
0x000000000002c6bf: add byte ptr [rax + 0x63], cl; adc al, 0x88; add rdx, rax; jmp rdx; 
0x000000000002c2ee: add byte ptr [rax + 0x63], cl; adc al, 0x96; add rdx, rsi; jmp rdx; 
0x000000000003316f: add byte ptr [rax + 0x63], cl; adc al, 0xb9; add rdx, rcx; jmp rdx; 
0x0000000000009b2e: add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x0000000000022617: add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; xor ebx, ebx; jmp rax; 
0x000000000004c339: add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; xor r12d, r12d; mov ebp, edx; jmp rax; 
0x000000000004bebf: add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; xor r12d, r12d; mov r13d, r14d; jmp rax; 
0x0000000000046ed8: add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000001c201: add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdi; jmp rax; 
0x000000000001ea77: add byte ptr [rax + 0x63], cl; add al, 0x8a; add rax, rdx; jmp rax; 
0x000000000003db3a: add byte ptr [rax + 0x63], cl; add al, 0x8a; add rax, rdx; lea rdx, [rip + 0x16427]; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x000000000002ba39: add byte ptr [rax + 0x63], cl; add al, 0xa9; add rax, rcx; jmp rax; 
0x000000000002fb22: add byte ptr [rax + 0x63], cl; cmp al, 0x91; add rdi, rcx; jmp rdi; 
0x0000000000042e32: add byte ptr [rax + 0x63], cl; cmp al, 0xbb; add rdi, rbx; jmp rdi; 
0x000000000001dfbb: add byte ptr [rax + 0x63], cl; je 0x1df75; add byte ptr [rax + 1], cl; out dx, al; jmp rsi; 
0x0000000000019e6b: add byte ptr [rax + 0x63], cl; or al, 0x88; add rcx, rax; jmp rcx; 
0x000000000004c2ed: add byte ptr [rax + 0x63], cl; or al, 0x88; add rcx, rax; mov edx, ebp; mov ebp, 0x110001; jmp rcx; 
0x000000000004c19a: add byte ptr [rax + 0x63], cl; or al, 0x88; add rcx, rax; mov edx, r15d; jmp rcx; 
0x000000000001ed66: add byte ptr [rax + 0x63], cl; or al, 0x8a; add rcx, rdx; jmp rcx; 
0x0000000000049fb2: add byte ptr [rax + 0x63], cl; or al, 0x8e; add rcx, rsi; jmp rcx; 
0x0000000000029b90: add byte ptr [rax + 0x63], cl; or al, 0xb8; add rcx, rax; jmp rcx; 
0x000000000001c25f: add byte ptr [rax + 0x63], cl; test dword ptr [rax], r8d; add rax, rbp; jmp rax; 
0x0000000000023438: add byte ptr [rax + 0x63], cl; xor al, 0xb7; add rsi, rdi; jmp rsi; 
0x000000000003efd6: add byte ptr [rax + 0x6b], cl; ret; 
0x000000000004a49f: add byte ptr [rax + 0x740a163c], al; xor byte ptr [rax - 1], cl; ret 0x3948; 
0x0000000000049feb: add byte ptr [rax + 0x7d], bh; ret; 
0x000000000000a82e: add byte ptr [rax + 0x8478b48], dl; ret; 
0x000000000001d113: add byte ptr [rax + 0xc754bf9], al; mov qword ptr [rdi + 8], rdx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000001cd9f: add byte ptr [rax + 0xf00103c], al; test bl, bl; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x3948; 
0x0000000000037518: add byte ptr [rax + 0xf], cl; call 0x2c40a; jmp qword ptr [rsi + 0x66]; 
0x000000000000bca2: add byte ptr [rax + 0xf], cl; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 2], dh; pop rax; ret; 
0x000000000000ceec: add byte ptr [rax + 0xf], cl; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 5], dh; add rsp, 0x28; ret; 
0x000000000000c1a3: add byte ptr [rax + 0xf], cl; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 5], dh; add rsp, 0x78; ret; 
0x000000000001dfc0: add byte ptr [rax + 1], cl; out dx, al; jmp rsi; 
0x0000000000032e50: add byte ptr [rax + 1], cl; ret; 
0x000000000001f396: add byte ptr [rax + 3], cl; test byte ptr [rax + rcx*4], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000002c73d: add byte ptr [rax + 6], bh; lea rdx, [rip + 0x2524a]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000030e71: add byte ptr [rax + rax*8 - 0x72b7b78b], al; jl 0x30e9e; adc byte ptr [rax - 0x77], cl; out 0x41, al; call rdi; 
0x0000000000042959: add byte ptr [rax + rax*8 - 0xb7eb8b], al; ret; 
0x000000000000b68f: add byte ptr [rax - 0x18], dl; cmp al, byte ptr [rax]; add byte ptr [rax], al; pop rax; ret; 
0x000000000000b7bf: add byte ptr [rax - 0x18], dl; or al, byte ptr [rax + rax]; pop rax; ret; 
0x000000000000b9bf: add byte ptr [rax - 0x18], dl; push 0x41; add byte ptr [rax], al; pop rax; ret; 
0x000000000000b3ff: add byte ptr [rax - 0x18], dl; sbb ch, byte ptr [rax]; add byte ptr [rax], al; pop rax; ret; 
0x000000000000b77f: add byte ptr [rax - 0x18], dl; sub al, byte ptr [rdi]; add byte ptr [rax], al; pop rax; ret; 
0x000000000003dc23: add byte ptr [rax - 0x39], cl; ret; 
0x0000000000039632: add byte ptr [rax - 0x3f], cl; out 4, al; mov edx, 8; mov rdi, r14; lea rbx, [rip - 0x28206]; call rbx; 
0x000000000002033a: add byte ptr [rax - 0x3f], cl; out 4, al; mov edx, 8; mov rdi, r14; lea rbx, [rip - 0xef0e]; call rbx; 
0x00000000000116ef: add byte ptr [rax - 0x48], cl; jle 0x1169a; add eax, 0x420b247d; insd dword ptr [rdi], dx; ret; 
0x0000000000049f5e: add byte ptr [rax - 0x598147b8], dl; add eax, 0x420b247d; insd dword ptr [rdi], dx; ret; 
0x000000000001cfa5: add byte ptr [rax - 0x628ab406], al; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000002c742: add byte ptr [rax - 0x73], cl; adc eax, 0x2524a; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000025186: add byte ptr [rax - 0x73], cl; adc eax, 0x2c4be; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000001ed5f: add byte ptr [rax - 0x73], cl; adc eax, 0x326ed; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000001ea70: add byte ptr [rax - 0x73], cl; adc eax, 0x3299c; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x000000000002f396: add byte ptr [rax - 0x73], cl; adc eax, 0x35722; add rsp, 0x58; pop rbx; pop r14; ret; 
0x0000000000030c41: add byte ptr [rax - 0x73], cl; adc eax, 0x364cf; lea rax, [rip + 0x364d1]; pop rcx; ret; 
0x0000000000010c33: add byte ptr [rax - 0x73], cl; adc eax, 0x52df5; lea rax, [rip - 0x7752]; mov esi, 0x2b; call rax; 
0x00000000000106d6: add byte ptr [rax - 0x73], cl; adc eax, 0x5333a; lea rax, [rip - 0x71f5]; mov esi, 0x2b; call rax; 
0x0000000000010530: add byte ptr [rax - 0x73], cl; adc eax, 0x534c8; lea rax, [rip - 0x704f]; mov esi, 0x19; call rax; 
0x000000000000d970: add byte ptr [rax - 0x73], cl; adc eax, 0x55fb0; lea rax, [rip - 0x448f]; mov esi, 0x49; call rax; 
0x0000000000009b3e: add byte ptr [rax - 0x73], cl; adc eax, 0x59a9a; lea rax, [rip - 0x65d]; mov esi, 0x28; call rax; 
0x0000000000046ed1: add byte ptr [rax - 0x73], cl; adc eax, 0xdaeb; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000c5d0: add byte ptr [rax - 0x73], cl; add eax, 0x1dea8; lea rdi, [rsp + 0x208]; call rax; 
0x000000000000c2f0: add byte ptr [rax - 0x73], cl; add eax, 0x1df58; call rax; 
0x000000000000c1f7: add byte ptr [rax - 0x73], cl; add eax, 0x1e051; call rax; 
0x000000000000c830: add byte ptr [rax - 0x73], cl; add eax, 0x1e468; lea rdi, [rsp + 0x2b0]; call rax; 
0x000000000000c777: add byte ptr [rax - 0x73], cl; add eax, 0x1e521; lea rdi, [rsp + 0x280]; call rax; 
0x000000000000c723: add byte ptr [rax - 0x73], cl; add eax, 0x1e575; lea rdi, [rsp + 0x228]; call rax; 
0x000000000000c943: add byte ptr [rax - 0x73], cl; add eax, 0x21055; call rax; 
0x00000000000302e1: add byte ptr [rax - 0x73], cl; add eax, 0x2173b; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000002c6b8: add byte ptr [rax - 0x73], cl; add eax, 0x252bc; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x0000000000030c48: add byte ptr [rax - 0x73], cl; add eax, 0x364d1; pop rcx; ret; 
0x000000000000c791: add byte ptr [rax - 0x73], cl; add eax, 0x3cec7; lea rdi, [rsp + 0x2f0]; mov edx, 1; mov ecx, 0x4a; call rax; 
0x000000000000c685: add byte ptr [rax - 0x73], cl; add eax, 0x3cfd3; lea rdi, [rsp + 0x268]; mov edx, 1; mov ecx, 0x4a; call rax; 
0x000000000004c2ab: add byte ptr [rax - 0x73], cl; add eax, 0x8e71; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c24b: add byte ptr [rax - 0x73], cl; add eax, 0x8ed1; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c212: add byte ptr [rax - 0x73], cl; add eax, 0x8f0a; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c1d4: add byte ptr [rax - 0x73], cl; add eax, 0x8f48; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c193: add byte ptr [rax - 0x73], cl; add eax, 0x8f89; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; mov edx, r15d; jmp rcx; 
0x000000000004c13a: add byte ptr [rax - 0x73], cl; add eax, 0x8fe2; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c0fb: add byte ptr [rax - 0x73], cl; add eax, 0x9021; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x0000000000010c3a: add byte ptr [rax - 0x73], cl; add eax, 0xffff88ae; mov esi, 0x2b; call rax; 
0x00000000000106dd: add byte ptr [rax - 0x73], cl; add eax, 0xffff8e0b; mov esi, 0x2b; call rax; 
0x0000000000010537: add byte ptr [rax - 0x73], cl; add eax, 0xffff8fb1; mov esi, 0x19; call rax; 
0x00000000000103fb: add byte ptr [rax - 0x73], cl; add eax, 0xffff919d; mov esi, 0x100; call rax; 
0x00000000000103c1: add byte ptr [rax - 0x73], cl; add eax, 0xffff91d7; mov esi, 0x100; call rax; 
0x000000000000e345: add byte ptr [rax - 0x73], cl; add eax, 0xffffb253; call rax; 
0x000000000000e314: add byte ptr [rax - 0x73], cl; add eax, 0xffffb284; call rax; 
0x000000000000e19e: add byte ptr [rax - 0x73], cl; add eax, 0xffffb3fa; call rax; 
0x000000000000e16d: add byte ptr [rax - 0x73], cl; add eax, 0xffffb42b; call rax; 
0x000000000000d977: add byte ptr [rax - 0x73], cl; add eax, 0xffffbb71; mov esi, 0x49; call rax; 
0x000000000000cd77: add byte ptr [rax - 0x73], cl; add eax, 0xffffc6f1; call rax; 
0x000000000000d06c: add byte ptr [rax - 0x73], cl; add eax, 0xffffc79c; mov esi, 0x2b; lea rdx, [rsp + 0x20]; call rax; 
0x000000000000cfaf: add byte ptr [rax - 0x73], cl; add eax, 0xffffc859; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000000cf17: add byte ptr [rax - 0x73], cl; add eax, 0xffffc8f1; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000000ce97: add byte ptr [rax - 0x73], cl; add eax, 0xffffc971; lea rdx, [rsp + 0x37]; call rax; 
0x0000000000009b45: add byte ptr [rax - 0x73], cl; add eax, 0xfffff9a3; mov esi, 0x28; call rax; 
0x000000000001c2ed: add byte ptr [rax - 0x73], cl; add r9, qword ptr [r8 - 0x7d]; ret; 
0x000000000002bfe5: add byte ptr [rax - 0x73], cl; cmp eax, 0x2592f; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x00000000000243fd: add byte ptr [rax - 0x73], cl; cmp eax, 0x2d1ab; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000002974b: add byte ptr [rax - 0x73], cl; dec dword ptr [r8 - 0x7d]; ret; 
0x000000000001510d: add byte ptr [rax - 0x73], cl; je 0x15136; add al, 0xe8; add word ptr [rax], ax; pop rcx; ret; 
0x000000000002da6a: add byte ptr [rax - 0x73], cl; je 0x2da93; and byte ptr [rcx + rcx*4 - 9], cl; call rax; 
0x0000000000030a3b: add byte ptr [rax - 0x73], cl; je 0x30a64; and byte ptr [rax - 0x75], cl; sbb eax, 0x36170; mov edx, 0x90; call rbx; 
0x000000000004aada: add byte ptr [rax - 0x73], cl; je 0x4ab03; add al, 0xff; adc eax, 0x1c412; pop rcx; ret; 
0x000000000004ac0d: add byte ptr [rax - 0x73], cl; je 0x4ac36; add al, 0xff; adc eax, 0x1c2df; pop rcx; ret; 
0x000000000004ac3f: add byte ptr [rax - 0x73], cl; je 0x4ac68; add al, 0xff; adc eax, 0x1c2ad; pop rcx; ret; 
0x000000000004ac7c: add byte ptr [rax - 0x73], cl; je 0x4aca5; add al, 0xff; adc eax, 0x1c270; pop rcx; ret; 
0x000000000004acc0: add byte ptr [rax - 0x73], cl; je 0x4ace9; add al, 0xff; adc eax, 0x1c22c; pop rcx; ret; 
0x000000000000c237: add byte ptr [rax - 0x73], cl; jl 0xc260; push rax; lea rsi, [rsp + 0x60]; lea rdx, [rsp + 0x38]; call rax; 
0x000000000000c330: add byte ptr [rax - 0x73], cl; jl 0xc359; push rax; lea rsi, [rsp + 0x60]; lea rdx, [rsp + 0x38]; call rax; 
0x000000000000c8ec: add byte ptr [rax - 0x73], cl; jl 0xc915; sub bh, bh; adc eax, 0x5a0e8; add rsp, 0x1a8; ret; 
0x0000000000039f29: add byte ptr [rax - 0x73], cl; mov ah, 0x24; and byte ptr [rax + rax], al; add byte ptr [rax - 0x75], cl; and al, 8; call qword ptr [rax + 0x20]; 
0x0000000000039fd2: add byte ptr [rax - 0x73], cl; mov ah, 0x24; xor byte ptr [rcx], al; add byte ptr [rax], al; call qword ptr [rcx + 0x20]; 
0x000000000000c0b1: add byte ptr [rax - 0x73], cl; mov esp, 0x18824; add bh, bh; adc eax, 0x5a920; add rsp, 0x1b8; ret; 
0x000000000000c68c: add byte ptr [rax - 0x73], cl; mov esp, 0x26824; add byte ptr [rdx + 1], bh; mov ecx, 0x4a; call rax; 
0x000000000000c798: add byte ptr [rax - 0x73], cl; mov esp, 0x2f024; add byte ptr [rdx + 1], bh; mov ecx, 0x4a; call rax; 
0x000000000000c640: add byte ptr [rax - 0x73], cl; mov esp, 0x8824; add bh, bh; adc eax, 0x5a391; add rsp, 0x318; ret; 
0x000000000000c8a5: add byte ptr [rax - 0x73], cl; mov esp, 0xc824; add byte ptr [rdx + 7], bh; call 0xb180; lea rax, [rip + 0x210e1]; call rax; 
0x000000000002989a: add byte ptr [rax - 0x73], cl; mov esp, 0xe024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x15ff; 
0x0000000000043672: add byte ptr [rax - 0x73], cl; or eax, 0x10aa6; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002cced: add byte ptr [rax - 0x73], cl; or eax, 0x24ccf; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000277e8: add byte ptr [rax - 0x73], cl; or eax, 0x2a010; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002778c: add byte ptr [rax - 0x73], cl; or eax, 0x2a054; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002510c: add byte ptr [rax - 0x73], cl; or eax, 0x2c518; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000022610: add byte ptr [rax - 0x73], cl; or eax, 0x2eeb0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor ebx, ebx; jmp rax; 
0x000000000001d81b: add byte ptr [rax - 0x73], cl; or eax, 0x33ab9; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001c6f2: add byte ptr [rax - 0x73], cl; or eax, 0x348f6; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001c77c: add byte ptr [rax - 0x73], cl; or eax, 0x34a98; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001ac06: add byte ptr [rax - 0x73], cl; or eax, 0x3622a; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000d065: add byte ptr [rax - 0x73], cl; or eax, 0x5686b; lea rax, [rip - 0x3864]; mov esi, 0x2b; lea rdx, [rsp + 0x20]; call rax; 
0x000000000000cfa8: add byte ptr [rax - 0x73], cl; or eax, 0x56928; lea rax, [rip - 0x37a7]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000000cf10: add byte ptr [rax - 0x73], cl; or eax, 0x569c0; lea rax, [rip - 0x370f]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000004c0bd: add byte ptr [rax - 0x73], cl; or eax, 0x8fbf; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x000000000001ad89: add byte ptr [rax - 0x73], cl; pop rcx; add cl, byte ptr [rax - 0x7d]; ret 0x49fe; 
0x000000000001fdfe: add byte ptr [rax - 0x73], cl; push rsi; inc byte ptr [rbp + 0x31]; jmp qword ptr [rsi + 0x2e]; 
0x000000000000cf23: add byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call rax; 
0x000000000000d078: add byte ptr [rax - 0x73], cl; push rsp; and al, 0x20; call rax; 
0x000000000004a17f: add byte ptr [rax - 0x73], cl; push rsp; and al, 0x38; call qword ptr [rip + 0x1cd8d]; add rsp, 0x68; ret; 
0x0000000000042e2b: add byte ptr [rax - 0x73], cl; sbb eax, 0x1128d; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x0000000000038eba: add byte ptr [rax - 0x73], cl; sbb eax, 0xfffd856e; call rbx; 
0x000000000002c2e7: add byte ptr [rax - 0x73], cl; xor eax, 0x2565d; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x0000000000049fab: add byte ptr [rax - 0x73], cl; xor eax, 0xaff5; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000003db48: add byte ptr [rax - 0x75], cl; adc al, 0xca; ret; 
0x000000000000a991: add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x28; ret; 
0x0000000000010464: add byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000000a1de: add byte ptr [rax - 0x75], cl; add al, 0x24; pop rcx; ret; 
0x0000000000025758: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 1], ecx; ret; 
0x000000000000b24f: add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x18; ret; 
0x000000000000d5d4: add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x168; ret; 
0x000000000000a8c0: add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x40; ret; 
0x000000000000e440: add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x48; ret; 
0x000000000000a31e: add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x58; ret; 
0x000000000000a3f2: add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x68; ret; 
0x00000000000113ab: add byte ptr [rax - 0x75], cl; and al, 0x18; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x38; ret; 
0x000000000000a714: add byte ptr [rax - 0x75], cl; and al, 0x20; add rsp, 0xa8; ret; 
0x000000000000ecd0: add byte ptr [rax - 0x75], cl; and al, 0x20; mov rdx, qword ptr [rsp + 0x28]; add rsp, 0x98; ret; 
0x000000000000f777: add byte ptr [rax - 0x75], cl; and al, 0x28; add rsp, 0x68; ret; 
0x000000000001059e: add byte ptr [rax - 0x75], cl; and al, 0x28; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x68; ret; 
0x000000000000de4f: add byte ptr [rax - 0x75], cl; and al, 0x30; add rsp, 0x58; ret; 
0x000000000000e00d: add byte ptr [rax - 0x75], cl; and al, 0x70; add rsp, 0x108; ret; 
0x000000000000f49f: add byte ptr [rax - 0x75], cl; and al, 0x78; mov rdx, qword ptr [rsp + 0x80]; add rsp, 0xf8; ret; 
0x000000000000bdf5: add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x10; ret; 
0x0000000000010a33: add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x138; ret; 
0x000000000000afd0: add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x18; ret; 
0x000000000000f158: add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x58; ret; 
0x000000000000f358: add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x60; ret; 
0x000000000004a551: add byte ptr [rax - 0x75], cl; and al, 8; call qword ptr [rax + 0x18]; 
0x0000000000039f31: add byte ptr [rax - 0x75], cl; and al, 8; call qword ptr [rax + 0x20]; 
0x000000000001140d: add byte ptr [rax - 0x75], cl; and al, 8; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000facb: add byte ptr [rax - 0x75], cl; and al, 8; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x000000000000b9dd: add byte ptr [rax - 0x75], cl; cmp al, 0x24; add rdi, 4; call 0xb7a0; pop rax; ret; 
0x000000000000b37c: add byte ptr [rax - 0x75], cl; cmp al, 0x24; add rdi, 8; call 0xb9f0; pop rax; ret; 
0x000000000000c169: add byte ptr [rax - 0x75], cl; cmp al, 0x24; lea rax, [rip + 0x1eb2b]; call rax; 
0x000000000003b541: add byte ptr [rax - 0x75], cl; je 0x3b56a; or byte ptr [rax - 0x7b], cl; test byte ptr [rdi], 0x84; ret; 
0x000000000000c96f: add byte ptr [rax - 0x75], cl; je 0xc998; or byte ptr [rax - 0x73], cl; add eax, 0x20c14; lea rdi, [rsp + 0x90]; call rax; 
0x00000000000345a8: add byte ptr [rax - 0x75], cl; jge 0x345ad; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x000000000004a545: add byte ptr [rax - 0x75], cl; jl 0x4a56e; adc byte ptr [rax - 0x73], cl; xor eax, 0xa76e; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000000c474: add byte ptr [rax - 0x75], cl; jl 0xc49d; and byte ptr [rax - 0x73], cl; add eax, 0x1e81f; mov qword ptr [rsp + 0x70], rax; call rax; 
0x000000000000c4af: add byte ptr [rax - 0x75], cl; jl 0xc4d8; sub byte ptr [rax - 0x75], cl; and al, 0x70; call rax; 
0x000000000000c4e3: add byte ptr [rax - 0x75], cl; jl 0xc50c; xor byte ptr [rax - 0x75], cl; and al, 0x70; call rax; 
0x000000000000c517: add byte ptr [rax - 0x75], cl; jl 0xc540; cmp byte ptr [rax - 0x75], cl; and al, 0x70; call rax; 
0x000000000000c54b: add byte ptr [rax - 0x75], cl; jl 0xc574; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c57f: add byte ptr [rax - 0x75], cl; jl 0xc5a8; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000004ed5f: add byte ptr [rax - 0x75], cl; mov rax, qword ptr ds:[rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x6f4b]; mov edx, 5; jmp rax; 
0x000000000004efef: add byte ptr [rax - 0x75], cl; mov rax, qword ptr ds:[rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x711d]; mov edx, 0xb; jmp rax; 
0x0000000000049f6f: add byte ptr [rax - 0x75], cl; mov rax, qword ptr ds:[rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xb2d3]; mov edx, 0xe; jmp rax; 
0x000000000004bbbc: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x73], r9b; xor eax, 0x960a; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bba1: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x73], r9b; xor eax, 0x9775; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a9d6: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x73], r9b; xor eax, 0xa941; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a9a8: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x73], r9b; xor eax, 0xa963; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a65a: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x73], r9b; xor eax, 0xacac; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000004a624: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x73], r9b; xor eax, 0xace0; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a60f: add byte ptr [rax - 0x75], cl; or byte ptr [r9 + rcx*4 - 0xa], r9b; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000000fdca: add byte ptr [rax - 0x75], cl; push rsp; and al, 8; mov rax, qword ptr [rsp + 0x10]; add rsp, 0xb8; ret; 
0x000000000000ff7a: add byte ptr [rax - 0x75], cl; push rsp; and al, 8; mov rax, qword ptr [rsp + 0x10]; add rsp, 0xe8; ret; 
0x00000000000493de: add byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; jo 0x493fa; ret; 
0x0000000000019083: add byte ptr [rax - 0x77], cl; add ebx, dword ptr [rbx + 0x41]; pop rsi; pop r15; ret; 
0x000000000000d3c7: add byte ptr [rax - 0x77], cl; and al, 0x10; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000000d95a: add byte ptr [rax - 0x77], cl; and al, 0x20; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x28; ret; 
0x000000000004bc6e: add byte ptr [rax - 0x77], cl; and al, 0x38; call rax; 
0x000000000000c480: add byte ptr [rax - 0x77], cl; and al, 0x70; call rax; 
0x000000000003ce8a: add byte ptr [rax - 0x77], cl; and al, 8; lea rbx, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000000d216: add byte ptr [rax - 0x77], cl; and al, 8; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000030121: add byte ptr [rax - 0x77], cl; and al, 8; movaps xmm0, xmmword ptr [rsp + 0xb0]; movups xmmword ptr [rsp + 0x10], xmm0; mov qword ptr [rsp], rsi; call qword ptr [rax + 0x20]; 
0x000000000002f4cf: add byte ptr [rax - 0x77], cl; clc; lea rdx, [rip + 0x35606]; ret; 
0x000000000004ad1f: add byte ptr [rax - 0x77], cl; clc; lea rdx, [rip - 0x10aa]; ret; 
0x000000000000e8df: add byte ptr [rax - 0x77], cl; clc; mov qword ptr [rdi + 8], rsi; mov qword ptr [rdi + 0x10], rdx; mov qword ptr [rdi], 0; ret; 
0x000000000000e8ff: add byte ptr [rax - 0x77], cl; clc; mov qword ptr [rdi + 8], rsi; mov qword ptr [rdi + 0x10], rdx; mov qword ptr [rdi], 1; ret; 
0x000000000002b35f: add byte ptr [rax - 0x77], cl; fimul dword ptr [rax + 0x29]; ret 0x8b49; 
0x00000000000298a2: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x15ff; 
0x0000000000035628: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x1ce8; 
0x000000000003580a: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x3ae8; 
0x0000000000035706: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x3ee8; 
0x00000000000354f7: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x4de8; 
0x00000000000355db: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x69e8; 
0x00000000000357d1: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x73e8; 
0x00000000000356bc: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x88e8; 
0x00000000000354aa: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x9ae8; 
0x0000000000035798: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xace8; 
0x0000000000035591: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xb3e8; 
0x0000000000035672: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xd2e8; 
0x0000000000035544: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xe8; 
0x0000000000035753: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xf1e8; 
0x0000000000018fbe: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx - 1]; and eax, 0x4dab7; pop rbx; ret; 
0x0000000000018f68: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx - 1]; and eax, 0x4db0d; pop rbx; ret; 
0x0000000000018ef7: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx - 1]; and eax, 0x4db7e; pop rbx; ret; 
0x00000000000348a8: add byte ptr [rax - 0x77], cl; fisttp word ptr [rcx - 0x3b7cb708]; js 0x3490e; pop rbp; ret; 
0x000000000002f6a0: add byte ptr [rax - 0x77], cl; fmul dword ptr [rbp + rcx*4 + 0x73]; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000082fd: add byte ptr [rax - 0x77], cl; fmul dword ptr [rcx + rcx*4 - 0xe]; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000003d067: add byte ptr [rax - 0x77], cl; fmul dword ptr [rcx + rcx*4 - 0xe]; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000008d95: add byte ptr [rax - 0x77], cl; fucomip st(0); ret 0xffe2; 
0x000000000004e8a7: add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x17fe2]; add rsp, 0x88; ret; 
0x000000000004e6c7: add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x181c2]; add rsp, 0x88; ret; 
0x000000000004e627: add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x18262]; add rsp, 0x88; ret; 
0x000000000004e594: add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x182f5]; add rsp, 0x88; ret; 
0x000000000004e504: add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x18385]; add rsp, 0x88; ret; 
0x000000000004e472: add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x18417]; add rsp, 0x88; ret; 
0x000000000004e3e2: add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x184a7]; add rsp, 0x88; ret; 
0x000000000004e9a9: add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; xor ecx, ecx; call qword ptr [rip + 0x17ede]; add rsp, 0x28; ret; 
0x000000000004e8fb: add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; xor ecx, ecx; call qword ptr [rip + 0x17f8c]; add rsp, 0x88; ret; 
0x0000000000034d5c: add byte ptr [rax - 0x77], cl; jl 0x34d85; adc byte ptr [rax - 0x75], cl; mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000000c541: add byte ptr [rax - 0x77], cl; jl 0xc56a; call 0xcca0; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c575: add byte ptr [rax - 0x77], cl; jl 0xc59e; call 0xcca0; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x0000000000012c4f: add byte ptr [rax - 0x77], cl; jle 0x12c64; ret; 
0x000000000001fc40: add byte ptr [rax - 0x77], cl; mov esp, 0x16824; add byte ptr [rcx + rcx*4 - 0x33], cl; call rbx; 
0x0000000000038eb2: add byte ptr [rax - 0x77], cl; mov esp, 0x55024; add byte ptr [rax - 0x73], cl; sbb eax, 0xfffd856e; call rbx; 
0x000000000001120f: add byte ptr [rax - 0x77], cl; mov rax, rdi; ret; 
0x00000000000294e7: add byte ptr [rax - 0x77], cl; out 0xe8, eax; and byte ptr [rsi - 0x76b70002], 0xd8; add rsp, 0x1b0; pop rbx; ret; 
0x000000000002bac8: add byte ptr [rax - 0x77], cl; out dx, eax; call rbx; 
0x000000000004b118: add byte ptr [rax - 0x77], cl; out dx, eax; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x000000000004a4c4: add byte ptr [rax - 0x77], cl; ret 0x15ff; 
0x000000000004e805: add byte ptr [rax - 0x77], cl; ret 0x1f0f; 
0x0000000000036fdf: add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x0000000000031c7e: add byte ptr [rax - 0x77], cl; ret 0x3b66; 
0x000000000004e850: add byte ptr [rax - 0x77], cl; ret 0x6666; 
0x000000000003cda6: add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000028bc1: add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x000000000004e5da: add byte ptr [rax - 0x77], cl; ret 0x9066; 
0x000000000001f39e: add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000034fc0: add byte ptr [rax - 0x77], cl; ret 0xf48; 
0x00000000000165db: add byte ptr [rax - 0x77], cl; ret; 
0x0000000000041a91: add byte ptr [rax - 0x77], cl; retf 0x8948; sar edi, 0x15; ret 0x254; 
0x000000000003561d: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x1ce8; 
0x00000000000357ff: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x3ae8; 
0x00000000000356fb: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x3ee8; 
0x00000000000354ec: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x4de8; 
0x00000000000355d0: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x69e8; 
0x00000000000357c6: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x73e8; 
0x00000000000356b1: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x88e8; 
0x000000000003549f: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x9ae8; 
0x000000000003578d: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xace8; 
0x0000000000035586: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xb3e8; 
0x0000000000035667: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xd2e8; 
0x0000000000035539: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xe8; 
0x0000000000035748: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xf1e8; 
0x00000000000254a0: add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 - 0x7d], r9b; ret 0x4de0; 
0x0000000000030b4a: add byte ptr [rax - 0x77], cl; test dword ptr [rax - 0x77], 0x760ae8de; std; dec dword ptr [rax - 0x77]; ret; 
0x00000000000303a9: add byte ptr [rax - 0x77], cl; xor eax, 0x36d5f; ret; 
0x000000000001a446: add byte ptr [rax - 0x7af0b407], al; ret 1; 
0x000000000003d00f: add byte ptr [rax - 0x7b], cl; div byte ptr [rsi + rax - 1]; and eax, 0x29a65; ret; 
0x0000000000018fdf: add byte ptr [rax - 0x7b], cl; div byte ptr [rsi + rax - 1]; and eax, 0x4da95; ret; 
0x000000000003f57f: add byte ptr [rax - 0x7b], cl; idiv byte ptr [rax + 5]; add qword ptr [rdi + 0x18], rsi; ret; 
0x0000000000009a8a: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x00000000000330ce: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rsi*2 + 0x48], 0x89; ret; 
0x000000000002ad62: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + 0x10], 0x48; add esp, 0xb0; pop rbx; ret; 
0x0000000000009a49: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x000000000000700a: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x00000000000171aa: add byte ptr [rax - 0x7b], cl; sal byte ptr [rsi + rbp*2 + 0x48], 0x8d; dec qword ptr [rax - 0x77]; ret 0x8348; 
0x0000000000008690: add byte ptr [rax - 0x7b], cl; sar byte ptr [rsi - 0x5c], 0x5b; ret; 
0x000000000002814f: add byte ptr [rax - 0x7d], cl; in al, dx; sbb byte ptr [rbx + 0x3eee205], cl; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x18; ret; 
0x0000000000007e7f: add byte ptr [rax - 0x7d], cl; in al, dx; sub byte ptr [rbx + 0x5f22e05], cl; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x0000000000007e2f: add byte ptr [rax - 0x7d], cl; in al, dx; sub byte ptr [rbx + 0x5f27e05], cl; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x0000000000007ddf: add byte ptr [rax - 0x7d], cl; in al, dx; sub byte ptr [rbx + 0x5f28e05], cl; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x0000000000038572: add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000011647: add byte ptr [rax - 0x7d], cl; ret 0x75f8; 
0x00000000000080b1: add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000018711: add byte ptr [rax - 0x7d], cl; rol byte ptr [rsp + rcx*2], 0x39; ret 0xa575; 
0x00000000000115c7: add byte ptr [rax - 0x7d], cl; sar al, 0x75; ret 0x280f; 
0x0000000000017217: add byte ptr [rax - 0x7d], cl; sar al, 0x75; ret 0xc031; 
0x00000000000172a7: add byte ptr [rax - 0x7d], cl; sar eax, 0x75; ret 0xc749; 
0x0000000000037ddf: add byte ptr [rax - 0x7d], cl; sti; add dword ptr [rdi], ecx; xchg byte ptr [rax + rax - 0x76b70000], dl; ret; 
0x000000000004df2f: add byte ptr [rax - 0x7d], dl; jmp qword ptr [rax]; 
0x0000000000048d1f: add byte ptr [rax - 0x7f], cl; ret 0xa940; 
0x000000000001223b: add byte ptr [rax - 0x7f], cl; ret; 
0x0000000000016cf0: add byte ptr [rax - 1], cl; ret 0x3948; 
0x0000000000011576: add byte ptr [rax - 1], cl; ret; 
0x000000000000f49c: add byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; and al, 0x78; mov rdx, qword ptr [rsp + 0x80]; add rsp, 0xf8; ret; 
0x000000000003856f: add byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000003305b: add byte ptr [rax], 0; add byte ptr [rax], al; mov al, 1; ret; 
0x000000000004d7bb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rdx, rsi; mov rax, rdi; ret; 
0x000000000003039b: add byte ptr [rax], 0; add byte ptr [rax], al; movsxd rax, edi; mov qword ptr [rip + 0x36d5e], rax; mov qword ptr [rip + 0x36d5f], rsi; ret; 
0x0000000000009a53: add byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x000000000002e2b7: add byte ptr [rax], 0; add byte ptr [rbx + 0x41], bl; pop rsi; pop r15; ret; 
0x000000000003f6b0: add byte ptr [rax], al; adc dword ptr [rax], eax; add rsp, 0x98; pop rbx; pop r14; ret; 
0x0000000000041975: add byte ptr [rax], al; adc dword ptr [rax], eax; cmovae rax, rdx; shl rax, 0x20; or rax, rcx; ret; 
0x0000000000049fa8: add byte ptr [rax], al; adc dword ptr [rax], eax; lea rsi, [rip + 0xaff5]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000049fcf: add byte ptr [rax], al; adc dword ptr [rax], eax; ret; 
0x000000000000f6e5: add byte ptr [rax], al; add al, ch; ret; 
0x0000000000042952: add byte ptr [rax], al; add al, ch; sbb ax, word ptr [rax]; add byte ptr [rax + rax*8 - 0xb7eb8b], al; ret; 
0x0000000000015746: add byte ptr [rax], al; add al, ch; sbb edi, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000000bc0c: add byte ptr [rax], al; add al, ch; sub al, 1; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000000c76e: add byte ptr [rax], al; add al, ch; sub al, byte ptr [rip + 0xeb0000]; lea rax, [rip + 0x1e521]; lea rdi, [rsp + 0x280]; call rax; 
0x000000000004e8ad: add byte ptr [rax], al; add bh, bh; adc eax, 0x17fe2; add rsp, 0x88; ret; 
0x000000000004e6cd: add byte ptr [rax], al; add bh, bh; adc eax, 0x181c2; add rsp, 0x88; ret; 
0x000000000004e62d: add byte ptr [rax], al; add bh, bh; adc eax, 0x18262; add rsp, 0x88; ret; 
0x000000000004e59a: add byte ptr [rax], al; add bh, bh; adc eax, 0x182f5; add rsp, 0x88; ret; 
0x000000000004e50a: add byte ptr [rax], al; add bh, bh; adc eax, 0x18385; add rsp, 0x88; ret; 
0x000000000004e478: add byte ptr [rax], al; add bh, bh; adc eax, 0x18417; add rsp, 0x88; ret; 
0x000000000004e3e8: add byte ptr [rax], al; add bh, bh; adc eax, 0x184a7; add rsp, 0x88; ret; 
0x000000000000c646: add byte ptr [rax], al; add bh, bh; adc eax, 0x5a391; add rsp, 0x318; ret; 
0x00000000000491ae: add byte ptr [rax], al; add bh, bh; and eax, 0x1d8c9; ret; 
0x000000000004918e: add byte ptr [rax], al; add bh, bh; and eax, 0x1d8e9; ret; 
0x000000000003fbec: add byte ptr [rax], al; add bh, bh; and eax, 0x2735b; nop word ptr cs:[rax + rax]; nop; ret; 
0x000000000003d8f2: add byte ptr [rax], al; add bh, bh; and eax, 0x29185; ret; 
0x000000000003d8ba: add byte ptr [rax], al; add bh, bh; and eax, 0x291bd; ret; 
0x000000000003d889: add byte ptr [rax], al; add bh, bh; and eax, 0x291ee; ret; 
0x0000000000018f24: add byte ptr [rax], al; add bh, bh; and eax, 0x4db53; ret; 
0x00000000000137b2: add byte ptr [rax], al; add bh, bh; and eax, 0x532c5; ret; 
0x00000000000136f9: add byte ptr [rax], al; add bh, bh; and eax, 0x5337e; ret; 
0x0000000000013407: add byte ptr [rax], al; add bh, bh; and eax, 0x53670; ret; 
0x00000000000130b2: add byte ptr [rax], al; add bh, bh; and eax, 0x539c5; ret; 
0x0000000000012f49: add byte ptr [rax], al; add bh, bh; and eax, 0x53b2e; ret; 
0x0000000000012ea4: add byte ptr [rax], al; add bh, bh; and eax, 0x53bd3; ret; 
0x0000000000012dff: add byte ptr [rax], al; add bh, bh; and eax, 0x53c78; ret; 
0x00000000000127af: add byte ptr [rax], al; add bh, bh; and eax, 0x542c8; ret; 
0x0000000000012756: add byte ptr [rax], al; add bh, bh; and eax, 0x54321; ret; 
0x0000000000012712: add byte ptr [rax], al; add bh, bh; and eax, 0x54365; ret; 
0x00000000000126f6: add byte ptr [rax], al; add bh, bh; and eax, 0x54381; ret; 
0x000000000001250d: add byte ptr [rax], al; add bh, bh; and eax, 0x5456a; ret; 
0x0000000000011f99: add byte ptr [rax], al; add bh, bh; and eax, 0x54ade; ret; 
0x000000000000c3fc: add byte ptr [rax], al; add bl, al; lea rax, [rip - 0x2de7]; call rax; 
0x000000000000a1a9: add byte ptr [rax], al; add bl, ch; cmpsb byte ptr [rsi], byte ptr [rdi]; mov rax, qword ptr [rsp + 0x50]; add rsp, 0xe8; ret; 
0x000000000000e781: add byte ptr [rax], al; add bl, ch; xchg byte ptr [rax - 0x75], cl; and al, 0x48; add rsp, 0xd8; ret; 
0x000000000000be6c: add byte ptr [rax], al; add byte ptr [rax + 0x136ae850], dl; add byte ptr [rax], al; pop rcx; ret; 
0x000000000004a1ac: add byte ptr [rax], al; add byte ptr [rax + 0x18478b48], dl; ret; 
0x000000000004a1bc: add byte ptr [rax], al; add byte ptr [rax + 0x2047b60f], dl; ret; 
0x000000000004a7f7: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8b49; 
0x000000000002af3d: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000000b2dd: add byte ptr [rax], al; add byte ptr [rax + 0x48], dl; mov edi, dword ptr [rdi]; call 0xb320; pop rcx; ret; 
0x000000000004a49d: add byte ptr [rax], al; add byte ptr [rax + 0x740a163c], al; xor byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000000a82c: add byte ptr [rax], al; add byte ptr [rax + 0x8478b48], dl; ret; 
0x0000000000037516: add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; call 0x2c40a; jmp qword ptr [rsi + 0x66]; 
0x000000000002c73b: add byte ptr [rax], al; add byte ptr [rax + 6], bh; lea rdx, [rip + 0x2524a]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000000b68d: add byte ptr [rax], al; add byte ptr [rax - 0x18], dl; cmp al, byte ptr [rax]; add byte ptr [rax], al; pop rax; ret; 
0x000000000000b9bd: add byte ptr [rax], al; add byte ptr [rax - 0x18], dl; push 0x41; add byte ptr [rax], al; pop rax; ret; 
0x000000000000b3fd: add byte ptr [rax], al; add byte ptr [rax - 0x18], dl; sbb ch, byte ptr [rax]; add byte ptr [rax], al; pop rax; ret; 
0x000000000000b77d: add byte ptr [rax], al; add byte ptr [rax - 0x18], dl; sub al, byte ptr [rdi]; add byte ptr [rax], al; pop rax; ret; 
0x000000000003dc21: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x000000000002c740: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0x2524a; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000001ea6e: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0x3299c; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x00000000000302df: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x2173b; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000002c6b6: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x252bc; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x000000000004c2a9: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x8e71; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c249: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x8ed1; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c210: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x8f0a; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c1d2: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x8f48; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c138: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x8fe2; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c0f9: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x9021; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000002bfe3: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x2592f; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x00000000000243fb: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x2d1ab; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000002da68: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; je 0x2da93; and byte ptr [rcx + rcx*4 - 9], cl; call rax; 
0x000000000004c0bb: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; or eax, 0x8fbf; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x000000000000cf21: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call rax; 
0x000000000000d076: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; push rsp; and al, 0x20; call rax; 
0x000000000002c2e5: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0x2565d; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x0000000000010462: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000000a1dc: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add al, 0x24; pop rcx; ret; 
0x000000000000d5d2: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x168; ret; 
0x000000000000a8be: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x40; ret; 
0x000000000000e43e: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x48; ret; 
0x000000000000a31c: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x58; ret; 
0x000000000000a3f0: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x68; ret; 
0x00000000000113a9: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x18; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x38; ret; 
0x000000000000a712: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x20; add rsp, 0xa8; ret; 
0x000000000000ecce: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x20; mov rdx, qword ptr [rsp + 0x28]; add rsp, 0x98; ret; 
0x000000000000f775: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x28; add rsp, 0x68; ret; 
0x000000000001059c: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x28; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x68; ret; 
0x000000000000de4d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x30; add rsp, 0x58; ret; 
0x000000000000f49d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x78; mov rdx, qword ptr [rsp + 0x80]; add rsp, 0xf8; ret; 
0x000000000000bdf3: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x10; ret; 
0x0000000000010a31: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x138; ret; 
0x000000000000f156: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x58; ret; 
0x000000000000f356: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x60; ret; 
0x000000000001140b: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 8; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000fac9: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 8; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x000000000003b53f: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; je 0x3b56a; or byte ptr [rax - 0x7b], cl; test byte ptr [rdi], 0x84; ret; 
0x00000000000345a6: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; jge 0x345ad; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x00000000000493dc: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; jo 0x493fa; ret; 
0x0000000000019081: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add ebx, dword ptr [rbx + 0x41]; pop rsi; pop r15; ret; 
0x000000000004bc6c: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x38; call rax; 
0x000000000002f4cd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; lea rdx, [rip + 0x35606]; ret; 
0x000000000002b35d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul dword ptr [rax + 0x29]; ret 0x8b49; 
0x00000000000298a0: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x15ff; 
0x0000000000035626: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x1ce8; 
0x0000000000035808: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x3ae8; 
0x0000000000035704: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x3ee8; 
0x00000000000354f5: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x4de8; 
0x00000000000355d9: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x69e8; 
0x00000000000357cf: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x73e8; 
0x00000000000356ba: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x88e8; 
0x00000000000354a8: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x9ae8; 
0x0000000000035796: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xace8; 
0x000000000003558f: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xb3e8; 
0x0000000000035670: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xd2e8; 
0x0000000000035542: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xe8; 
0x0000000000035751: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xf1e8; 
0x0000000000018fbc: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx - 1]; and eax, 0x4dab7; pop rbx; ret; 
0x0000000000018f66: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx - 1]; and eax, 0x4db0d; pop rbx; ret; 
0x0000000000018ef5: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx - 1]; and eax, 0x4db7e; pop rbx; ret; 
0x000000000002f69e: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fmul dword ptr [rbp + rcx*4 + 0x73]; dec dword ptr [rax - 0x7d]; ret; 
0x000000000004e8a5: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x17fe2]; add rsp, 0x88; ret; 
0x000000000004e6c5: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x181c2]; add rsp, 0x88; ret; 
0x000000000004e625: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x18262]; add rsp, 0x88; ret; 
0x000000000004e592: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x182f5]; add rsp, 0x88; ret; 
0x000000000004e502: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x18385]; add rsp, 0x88; ret; 
0x000000000004e470: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x18417]; add rsp, 0x88; ret; 
0x000000000004e3e0: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x184a7]; add rsp, 0x88; ret; 
0x0000000000012c4d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; jle 0x12c64; ret; 
0x000000000001fc3e: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov esp, 0x16824; add byte ptr [rcx + rcx*4 - 0x33], cl; call rbx; 
0x0000000000038eb0: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov esp, 0x55024; add byte ptr [rax - 0x73], cl; sbb eax, 0xfffd856e; call rbx; 
0x000000000004d7bd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov rax, rdi; ret; 
0x000000000002bac6: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call rbx; 
0x000000000004a4c2: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x15ff; 
0x000000000004e803: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1f0f; 
0x0000000000036fdd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x000000000004e84e: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x6666; 
0x000000000004e5d8: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x9066; 
0x0000000000046e9d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000016ed5: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000030b48: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; test dword ptr [rax - 0x77], 0x760ae8de; std; dec dword ptr [rax - 0x77]; ret; 
0x000000000001a444: add byte ptr [rax], al; add byte ptr [rax - 0x7af0b407], al; ret 1; 
0x0000000000038570: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x00000000000080af: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000004df2d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], dl; jmp qword ptr [rax]; 
0x0000000000032625: add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret; 
0x000000000001cda7: add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x3948; 
0x0000000000030988: add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret; 
0x000000000004a1aa: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x18478b48], dl; ret; 
0x000000000004a1ba: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x2047b60f], dl; ret; 
0x000000000002af3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000004a49b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x740a163c], al; xor byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000000a82a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x8478b48], dl; ret; 
0x000000000000e43c: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x48; ret; 
0x000000000000a31a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x58; ret; 
0x000000000000a710: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x20; add rsp, 0xa8; ret; 
0x000000000002f4cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; lea rdx, [rip + 0x35606]; ret; 
0x000000000002b35b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul dword ptr [rax + 0x29]; ret 0x8b49; 
0x0000000000012c4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; jle 0x12c64; ret; 
0x0000000000036fdb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x0000000000046e9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000011edb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000004df2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], dl; jmp qword ptr [rax]; 
0x000000000004d977: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000049d3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; scasd eax, dword ptr [rdi]; ret; 
0x00000000000070eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x1459930], cl; jmp qword ptr [rsi - 0x2d]; 
0x000000000004eecb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000032997: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000001cdc3: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x30; ret; 
0x0000000000030f19: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000008349: add byte ptr [rax], al; add byte ptr [rax], al; cmp qword ptr [rax - 8], 0; sete al; pop rcx; ret; 
0x000000000003305c: add byte ptr [rax], al; add byte ptr [rax], al; mov al, 1; ret; 
0x00000000000435e7: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rbx + 8], 0; xor eax, eax; pop rbx; ret; 
0x000000000001d179: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x0000000000012c4c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rdi; ret; 
0x000000000004d7ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi + 0x18]; ret; 
0x000000000004a19c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x10]; ret; 
0x000000000000a58c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; ret; 
0x000000000000d5d1: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x168; ret; 
0x000000000000e43d: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x48; ret; 
0x000000000000a31b: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000000a711: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x20]; add rsp, 0xa8; ret; 
0x000000000000eccd: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x20]; mov rdx, qword ptr [rsp + 0x28]; add rsp, 0x98; ret; 
0x000000000000f774: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x68; ret; 
0x000000000001059b: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x68; ret; 
0x0000000000010a30: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x138; ret; 
0x000000000000f155: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x58; ret; 
0x000000000000f355: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x60; ret; 
0x000000000000fac8: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x000000000002f4cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; lea rdx, [rip + 0x35606]; ret; 
0x00000000000287e8: add byte ptr [rax], al; add byte ptr [rax], al; mov rbx, rax; dec qword ptr [rax - 8]; mov rdi, r14; call qword ptr [rbp]; 
0x000000000004d7bc: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, rsi; mov rax, rdi; ret; 
0x000000000003039c: add byte ptr [rax], al; add byte ptr [rax], al; movsxd rax, edi; mov qword ptr [rip + 0x36d5e], rax; mov qword ptr [rip + 0x36d5f], rsi; ret; 
0x000000000004b8dc: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdi + 0x30]; and al, 4; shr al, 2; ret; 
0x000000000002a117: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov al, 1; ret; 
0x0000000000011207: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rdx, rsi; mov rax, rdi; ret; 
0x0000000000049167: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; ret; 
0x0000000000045d58: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rdi + 0x20]; mov rdx, qword ptr [rdi + 0x28]; ret; 
0x000000000000a539: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rdi]; mov rdx, qword ptr [rdi + 8]; ret; 
0x000000000004ad18: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, rdi; lea rdx, [rip - 0x10aa]; ret; 
0x000000000000eb29: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x0000000000033069: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000004a1ab: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, qword ptr [rdi + 0x18]; ret; 
0x000000000000a82b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, qword ptr [rdi + 8]; ret; 
0x000000000004a1bb: add byte ptr [rax], al; add byte ptr [rax], al; nop; movzx eax, byte ptr [rdi + 0x20]; ret; 
0x000000000003fbfb: add byte ptr [rax], al; add byte ptr [rax], al; nop; ret; 
0x000000000004d978: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000004174c: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000000a78c: add byte ptr [rax], al; add byte ptr [rax], al; push rax; call 0xa590; pop rcx; ret; 
0x000000000000b6bc: add byte ptr [rax], al; add byte ptr [rax], al; push rax; call 0xb390; pop rax; ret; 
0x000000000000b90c: add byte ptr [rax], al; add byte ptr [rax], al; push rax; call 0xb400; pop rax; ret; 
0x000000000000b68c: add byte ptr [rax], al; add byte ptr [rax], al; push rax; call 0xb6d0; pop rax; ret; 
0x000000000000b2cc: add byte ptr [rax], al; add byte ptr [rax], al; push rax; call 0xb770; pop rax; ret; 
0x000000000000b79c: add byte ptr [rax], al; add byte ptr [rax], al; push rax; call 0xb780; pop rax; ret; 
0x000000000000b69c: add byte ptr [rax], al; add byte ptr [rax], al; push rax; call 0xb900; pop rax; ret; 
0x000000000000b6ac: add byte ptr [rax], al; add byte ptr [rax], al; push rax; call 0xba50; pop rax; ret; 
0x000000000000b77c: add byte ptr [rax], al; add byte ptr [rax], al; push rax; call 0xbeb0; pop rax; ret; 
0x000000000000b3fc: add byte ptr [rax], al; add byte ptr [rax], al; push rax; call 0xdc20; pop rax; ret; 
0x000000000000b40c: add byte ptr [rax], al; add byte ptr [rax], al; push rax; call 0xdce0; pop rax; ret; 
0x000000000000b9bc: add byte ptr [rax], al; add byte ptr [rax], al; push rax; call 0xfb30; pop rax; ret; 
0x0000000000009a54: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000004189c: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000000be7c: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000003f3bb: add byte ptr [rax], al; add byte ptr [rax], al; xorps xmm0, xmm0; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0xc], xmm0; ret; 
0x0000000000007849: add byte ptr [rax], al; add byte ptr [rbp + 0x39], cl; ret 0x830f; 
0x000000000004de32: add byte ptr [rax], al; add byte ptr [rbp + 0x39], cl; ret 0x870f; 
0x00000000000292ac: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x7b], cl; dec dword ptr [rax - 0x75]; jnp 0x292b6; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000464e8: add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ret; 
0x000000000002d494: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsi; pop r15; ret; 
0x000000000002811e: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x0000000000032907: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x00000000000415af: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; ret; 
0x000000000004c559: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000026d24: add byte ptr [rax], al; add byte ptr [rbx - 0xb7f83f], al; ret 0x8948; 
0x0000000000013194: add byte ptr [rax], al; add byte ptr [rbx - 1], bl; and eax, 0x538e2; pop rbx; ret; 
0x0000000000012b67: add byte ptr [rax], al; add byte ptr [rbx - 1], bl; and eax, 0x53f0f; pop rbx; ret; 
0x0000000000012a13: add byte ptr [rax], al; add byte ptr [rbx - 1], bl; and eax, 0x54063; pop rbx; ret; 
0x00000000000128a1: add byte ptr [rax], al; add byte ptr [rbx - 1], bl; and eax, 0x541d5; pop rbx; ret; 
0x000000000003d3bd: add byte ptr [rax], al; add byte ptr [rcx + 0x148d48c9], cl; add dword ptr [rax - 0x7d], ecx; ret 0xb820; 
0x000000000001d86c: add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret; 
0x000000000000c697: add byte ptr [rax], al; add byte ptr [rcx + 0x4a], bh; call rax; 
0x000000000001ab42: add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; add al, 0x89; add rax, r9; jmp rax; 
0x000000000002ca7a: add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; xor al, 0xb4; add rsi, r12; jmp rsi; 
0x000000000002804d: add byte ptr [rax], al; add byte ptr [rcx + 0x69], cl; ret; 
0x0000000000049d3d: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; scasd eax, dword ptr [rdi]; ret; 
0x0000000000021d5a: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; mov rsi, qword ptr [rsp + 0x1b8]; call rbx; 
0x000000000002b277: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x0000000000020352: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; mov rsi, qword ptr [rsp + 0x168]; call rbx; 
0x0000000000030a53: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; add rdi, 8; lea rsi, [rsp + 0xb0]; mov edx, 0xa8; call rbx; 
0x0000000000021d49: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; lea rbx, [rip - 0x10916]; call rbx; 
0x000000000003964a: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; mov rsi, qword ptr [rsp + 0x550]; call rbx; 
0x0000000000042113: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 6], al; lea rsi, [rip + 0x11f00]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x0000000000039639: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; lea rbx, [rip - 0x28206]; call rbx; 
0x0000000000020341: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; lea rbx, [rip - 0xef0e]; call rbx; 
0x00000000000070ed: add byte ptr [rax], al; add byte ptr [rcx - 0x1459930], cl; jmp qword ptr [rsi - 0x2d]; 
0x0000000000023e35: add byte ptr [rax], al; add byte ptr [rcx - 0x39], cl; ret; 
0x0000000000037de7: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000004681b: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x4902; 
0x000000000004cf88: add byte ptr [rax], al; add byte ptr [rcx - 1], cl; ret; 
0x00000000000306e3: add byte ptr [rax], al; add byte ptr [rcx], cl; ret 0x298b; 
0x0000000000026985: add byte ptr [rax], al; add byte ptr [rcx], cl; ret 0xc148; 
0x000000000001b461: add byte ptr [rax], al; add byte ptr [rcx], dh; fucomi st(1); ret 4; 
0x000000000004ed43: add byte ptr [rax], al; add byte ptr [rcx], dh; leave; call qword ptr [rip + 0x17b4a]; add rsp, 0x28; ret; 
0x000000000004ec13: add byte ptr [rax], al; add byte ptr [rcx], dh; leave; call qword ptr [rip + 0x17c7a]; add rsp, 0x28; ret; 
0x000000000004e9af: add byte ptr [rax], al; add byte ptr [rcx], dh; leave; call qword ptr [rip + 0x17ede]; add rsp, 0x28; ret; 
0x000000000004e901: add byte ptr [rax], al; add byte ptr [rcx], dh; leave; call qword ptr [rip + 0x17f8c]; add rsp, 0x88; ret; 
0x0000000000032a53: add byte ptr [rax], al; add byte ptr [rcx], dh; sar bh, 0x15; ret 0x33e; 
0x000000000004cf81: add byte ptr [rax], al; add byte ptr [rcx], dh; shr cl, 0xe8; add byte ptr [rax], al; add byte ptr [rcx - 1], cl; ret; 
0x00000000000493c0: add byte ptr [rax], al; add byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0x10; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x00000000000083d7: add byte ptr [rax], al; add byte ptr [rdi + 0x74c08503], al; ret; 
0x000000000003012c: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsp + 0x10], eax; mov qword ptr [rsp], rsi; call qword ptr [rax + 0x20]; 
0x000000000004b8dd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x47; xor byte ptr [rsp + rax], ah; shr al, 2; ret; 
0x0000000000046804: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xc; js 0xffffffff834c6f1c; ret 0x4c02; 
0x00000000000227c7: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, ebp; ret 0x8366; 
0x0000000000030a62: add byte ptr [rax], al; add byte ptr [rdx + 0xa8], bh; call rbx; 
0x00000000000493d7: add byte ptr [rax], al; add byte ptr [rdx + 6], bh; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000000c8ab: add byte ptr [rax], al; add byte ptr [rdx + 7], bh; call 0xb180; lea rax, [rip + 0x210e1]; call rax; 
0x000000000002b272: add byte ptr [rax], al; add byte ptr [rdx + 8], bh; mov rdi, r12; call rbx; 
0x000000000002bac1: add byte ptr [rax], al; add byte ptr [rdx + 8], bh; mov rdi, rbp; call rbx; 
0x000000000000e8cb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov al, 1; and al, 1; movzx eax, al; ret; 
0x000000000000b8fb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; push rax; call 0x9fb0; pop rax; ret; 
0x000000000000b5bb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; push rax; call 0xd5f0; pop rax; ret; 
0x000000000001ef4f: add byte ptr [rax], al; add cl, ch; ret 0xfffb; 
0x000000000003de00: add byte ptr [rax], al; add cl, ch; ret; 
0x0000000000020ddc: add byte ptr [rax], al; add cl, ch; test dword ptr [rax], 0x89480000; ret; 
0x00000000000435e8: add byte ptr [rax], al; add dh, al; or byte ptr [r8], al; xor eax, eax; pop rbx; ret; 
0x000000000001cc2b: add byte ptr [rax], al; add dword ptr [rax], eax; setb cl; and cl, al; movzx eax, cl; ret; 
0x000000000004ee66: add byte ptr [rax], al; add eax, 0x83127388; jmp qword ptr [rax]; 
0x000000000003321d: add byte ptr [rax], al; add rsp, 0x108; pop rbx; pop r14; ret; 
0x000000000000cb2c: add byte ptr [rax], al; add rsp, 0x128; ret; 
0x000000000003f4c2: add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop r14; ret; 
0x0000000000009fc9: add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000001aad1: add byte ptr [rax], al; add rsp, 0x28; pop rbx; pop r14; ret; 
0x0000000000032999: add byte ptr [rax], al; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000007e1c: add byte ptr [rax], al; add rsp, 0x28; ret; 
0x000000000003624b: add byte ptr [rax], al; add rsp, 0x30; pop rbx; pop r14; pop r15; ret; 
0x000000000001cd10: add byte ptr [rax], al; add rsp, 0x30; ret; 
0x000000000000b026: add byte ptr [rax], al; add rsp, 0x38; ret; 
0x0000000000030f1b: add byte ptr [rax], al; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000045dfb: add byte ptr [rax], al; add rsp, 0x68; pop rbx; pop r14; ret; 
0x000000000002e4ab: add byte ptr [rax], al; add rsp, 0xb0; pop rbx; pop r14; pop r15; ret; 
0x000000000000f4ab: add byte ptr [rax], al; add rsp, 0xf8; ret; 
0x0000000000012120: add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004df71: add byte ptr [rax], al; call 0x4de00; pop rcx; ret; 
0x000000000000b1fd: add byte ptr [rax], al; call 0x7078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x000000000000fc55: add byte ptr [rax], al; call 0x7078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x000000000000d03d: add byte ptr [rax], al; call 0x7078; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x00000000000106fa: add byte ptr [rax], al; call 0x7078; mov rax, qword ptr [rsp + 8]; add rsp, 0x58; ret; 
0x000000000000c8b1: add byte ptr [rax], al; call 0xb180; lea rax, [rip + 0x210e1]; call rax; 
0x000000000000bc0d: add byte ptr [rax], al; call 0xbd40; add rsp, 0x18; ret; 
0x000000000000d237: add byte ptr [rax], al; call 0xbe80; mov byte ptr [rsp + 7], al; movzx eax, byte ptr [rsp + 7]; pop rcx; ret; 
0x000000000000cd65: add byte ptr [rax], al; call 0xcca0; mov rdi, qword ptr [rsp + 8]; lea rsi, [rip + 0x56b28]; lea rax, [rip - 0x390f]; call rax; 
0x000000000000c163: add byte ptr [rax], al; call 0xcca0; mov rdi, qword ptr [rsp]; lea rax, [rip + 0x1eb2b]; call rax; 
0x000000000000f0e4: add byte ptr [rax], al; call 0xeb40; pop rcx; ret; 
0x000000000004a633: add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000004e0c8: add byte ptr [rax], al; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000004a783: add byte ptr [rax], al; call qword ptr [rax + 0x18]; mov byte ptr [rbx + 8], al; pop rbx; ret; 
0x00000000000285b7: add byte ptr [rax], al; call qword ptr [rax + 0x28]; 
0x000000000004b11f: add byte ptr [rax], al; call qword ptr [rbx + 0x20]; 
0x0000000000039fd9: add byte ptr [rax], al; call qword ptr [rcx + 0x20]; 
0x000000000004e8ae: add byte ptr [rax], al; call qword ptr [rip + 0x17fe2]; add rsp, 0x88; ret; 
0x000000000004e6ce: add byte ptr [rax], al; call qword ptr [rip + 0x181c2]; add rsp, 0x88; ret; 
0x000000000004e62e: add byte ptr [rax], al; call qword ptr [rip + 0x18262]; add rsp, 0x88; ret; 
0x000000000004e59b: add byte ptr [rax], al; call qword ptr [rip + 0x182f5]; add rsp, 0x88; ret; 
0x000000000004e50b: add byte ptr [rax], al; call qword ptr [rip + 0x18385]; add rsp, 0x88; ret; 
0x000000000004e479: add byte ptr [rax], al; call qword ptr [rip + 0x18417]; add rsp, 0x88; ret; 
0x000000000004e3e9: add byte ptr [rax], al; call qword ptr [rip + 0x184a7]; add rsp, 0x88; ret; 
0x000000000000c647: add byte ptr [rax], al; call qword ptr [rip + 0x5a391]; add rsp, 0x318; ret; 
0x000000000000c0b8: add byte ptr [rax], al; call qword ptr [rip + 0x5a920]; add rsp, 0x1b8; ret; 
0x0000000000009b50: add byte ptr [rax], al; call rax; 
0x000000000001fc59: add byte ptr [rax], al; call rbx; 
0x000000000000834b: add byte ptr [rax], al; cmp qword ptr [rax - 8], 0; sete al; pop rcx; ret; 
0x000000000003f5d4: add byte ptr [rax], al; cmp si, 2; sete al; ret; 
0x000000000004b18e: add byte ptr [rax], al; dec r14; je 0x4b1a3; mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000004e026: add byte ptr [rax], al; je 0x4e02e; xor eax, eax; pop rcx; ret; 
0x0000000000049f85: add byte ptr [rax], al; jmp rax; 
0x00000000000292ad: add byte ptr [rax], al; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002c1e3: add byte ptr [rax], al; lea r8, [rip + 0x25748]; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x000000000001ed38: add byte ptr [rax], al; lea r8, [rip + 0x32703]; movsxd rcx, dword ptr [r8 + rbp*4]; add rcx, r8; jmp rcx; 
0x000000000001cc63: add byte ptr [rax], al; lea r9, [rip + 0x34618]; movsxd rax, dword ptr [r9 + rax*4]; add rax, r9; jmp rax; 
0x000000000000c5cf: add byte ptr [rax], al; lea rax, [rip + 0x1dea8]; lea rdi, [rsp + 0x208]; call rax; 
0x000000000000c2ef: add byte ptr [rax], al; lea rax, [rip + 0x1df58]; call rax; 
0x000000000000c1f6: add byte ptr [rax], al; lea rax, [rip + 0x1e051]; call rax; 
0x00000000000302e0: add byte ptr [rax], al; lea rax, [rip + 0x2173b]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000002c6b7: add byte ptr [rax], al; lea rax, [rip + 0x252bc]; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x000000000004c2aa: add byte ptr [rax], al; lea rax, [rip + 0x8e71]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c24a: add byte ptr [rax], al; lea rax, [rip + 0x8ed1]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c211: add byte ptr [rax], al; lea rax, [rip + 0x8f0a]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c1d3: add byte ptr [rax], al; lea rax, [rip + 0x8f48]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c192: add byte ptr [rax], al; lea rax, [rip + 0x8f89]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; mov edx, r15d; jmp rcx; 
0x000000000004c139: add byte ptr [rax], al; lea rax, [rip + 0x8fe2]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c0fa: add byte ptr [rax], al; lea rax, [rip + 0x9021]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x0000000000042e2a: add byte ptr [rax], al; lea rbx, [rip + 0x1128d]; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x0000000000038eb9: add byte ptr [rax], al; lea rbx, [rip - 0x27a92]; call rbx; 
0x0000000000043671: add byte ptr [rax], al; lea rcx, [rip + 0x10aa6]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000277e7: add byte ptr [rax], al; lea rcx, [rip + 0x2a010]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002778b: add byte ptr [rax], al; lea rcx, [rip + 0x2a054]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002510b: add byte ptr [rax], al; lea rcx, [rip + 0x2c518]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002260f: add byte ptr [rax], al; lea rcx, [rip + 0x2eeb0]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor ebx, ebx; jmp rax; 
0x000000000001d81a: add byte ptr [rax], al; lea rcx, [rip + 0x33ab9]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001c6f1: add byte ptr [rax], al; lea rcx, [rip + 0x348f6]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001c77b: add byte ptr [rax], al; lea rcx, [rip + 0x34a98]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001ac05: add byte ptr [rax], al; lea rcx, [rip + 0x3622a]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004c0bc: add byte ptr [rax], al; lea rcx, [rip + 0x8fbf]; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x000000000002bfe4: add byte ptr [rax], al; lea rdi, [rip + 0x2592f]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x00000000000243fc: add byte ptr [rax], al; lea rdi, [rip + 0x2d1ab]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000000c0b0: add byte ptr [rax], al; lea rdi, [rsp + 0x188]; call qword ptr [rip + 0x5a920]; add rsp, 0x1b8; ret; 
0x000000000000c8eb: add byte ptr [rax], al; lea rdi, [rsp + 0x28]; call qword ptr [rip + 0x5a0e8]; add rsp, 0x1a8; ret; 
0x000000000000c63f: add byte ptr [rax], al; lea rdi, [rsp + 0x88]; call qword ptr [rip + 0x5a391]; add rsp, 0x318; ret; 
0x000000000002c741: add byte ptr [rax], al; lea rdx, [rip + 0x2524a]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000025185: add byte ptr [rax], al; lea rdx, [rip + 0x2c4be]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000001ed5e: add byte ptr [rax], al; lea rdx, [rip + 0x326ed]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000001ea6f: add byte ptr [rax], al; lea rdx, [rip + 0x3299c]; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x000000000000cf22: add byte ptr [rax], al; lea rdx, [rsp + 0x10]; call rax; 
0x000000000000d077: add byte ptr [rax], al; lea rdx, [rsp + 0x20]; call rax; 
0x000000000004a17e: add byte ptr [rax], al; lea rdx, [rsp + 0x38]; call qword ptr [rip + 0x1cd8d]; add rsp, 0x68; ret; 
0x000000000002c2e6: add byte ptr [rax], al; lea rsi, [rip + 0x2565d]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x0000000000039fd1: add byte ptr [rax], al; lea rsi, [rsp + 0x130]; call qword ptr [rcx + 0x20]; 
0x0000000000030a3a: add byte ptr [rax], al; lea rsi, [rsp + 0x20]; mov rbx, qword ptr [rip + 0x36170]; mov edx, 0x90; call rbx; 
0x000000000002da69: add byte ptr [rax], al; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x0000000000039f28: add byte ptr [rax], al; lea rsi, [rsp + 0x420]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x20]; 
0x0000000000011ba9: add byte ptr [rax], al; lea rsi, [rsp + 4]; call 0x2b6b0; pop rcx; ret; 
0x0000000000011a19: add byte ptr [rax], al; lea rsi, [rsp + 4]; call 0x2b760; pop rcx; ret; 
0x000000000004acbf: add byte ptr [rax], al; lea rsi, [rsp + 4]; call qword ptr [rip + 0x1c22c]; pop rcx; ret; 
0x000000000004ac7b: add byte ptr [rax], al; lea rsi, [rsp + 4]; call qword ptr [rip + 0x1c270]; pop rcx; ret; 
0x000000000004ac3e: add byte ptr [rax], al; lea rsi, [rsp + 4]; call qword ptr [rip + 0x1c2ad]; pop rcx; ret; 
0x000000000004ac0c: add byte ptr [rax], al; lea rsi, [rsp + 4]; call qword ptr [rip + 0x1c2df]; pop rcx; ret; 
0x000000000004aad9: add byte ptr [rax], al; lea rsi, [rsp + 4]; call qword ptr [rip + 0x1c412]; pop rcx; ret; 
0x000000000002a11e: add byte ptr [rax], al; mov al, 1; ret; 
0x00000000000435e9: add byte ptr [rax], al; mov byte ptr [rbx + 8], 0; xor eax, eax; pop rbx; ret; 
0x000000000001cf4f: add byte ptr [rax], al; mov byte ptr [rdi + 7], 0; mov word ptr [rdi + 5], 0; mov qword ptr [rdi + 8], rax; add rsp, 0x18; ret; 
0x000000000001cd05: add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x45; mov qword ptr [rdi], 1; add rsp, 0x30; ret; 
0x000000000001d035: add byte ptr [rax], al; mov byte ptr [rdi], 0x17; mov byte ptr [rdi + 1], dl; add rsp, 0x10; ret; 
0x000000000001d174: add byte ptr [rax], al; mov dword ptr [rdi + 2], 0; mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x000000000002c73c: add byte ptr [rax], al; mov eax, 6; lea rdx, [rip + 0x2524a]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000000871d: add byte ptr [rax], al; mov eax, eax; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000004bd5e: add byte ptr [rax], al; mov eax, edi; lea rdx, [rip + 0x9267]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000c698: add byte ptr [rax], al; mov ecx, 0x4a; call rax; 
0x0000000000008b8d: add byte ptr [rax], al; mov ecx, eax; movsxd rcx, dword ptr [r12 + rcx*4]; add rcx, r12; jmp rcx; 
0x000000000003d3be: add byte ptr [rax], al; mov ecx, ecx; lea rdx, [rcx + rax]; add rdx, 0x20; mov eax, 1; ret; 
0x000000000004e2db: add byte ptr [rax], al; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000004df66: add byte ptr [rax], al; mov edx, 0x28; mov r8d, 0x11f; call 0x4de00; pop rcx; ret; 
0x000000000004df9d: add byte ptr [rax], al; mov edx, 0x2c; mov r8d, 0xc4; call 0x4de00; pop rcx; ret; 
0x0000000000030a63: add byte ptr [rax], al; mov edx, 0xa8; call rbx; 
0x000000000004f000: add byte ptr [rax], al; mov edx, 0xb; jmp rax; 
0x000000000004e059: add byte ptr [rax], al; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x0000000000049f80: add byte ptr [rax], al; mov edx, 0xe; jmp rax; 
0x000000000004a77e: add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e0df: add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000004a77e: add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; mov byte ptr [rbx + 8], al; pop rbx; ret; 
0x000000000004aaac: add byte ptr [rax], al; mov edx, 1; jmp rax; 
0x000000000000c693: add byte ptr [rax], al; mov edx, 1; mov ecx, 0x4a; call rax; 
0x000000000004a62e: add byte ptr [rax], al; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004e0c3: add byte ptr [rax], al; mov edx, 2; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000004a664: add byte ptr [rax], al; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000004ed70: add byte ptr [rax], al; mov edx, 5; jmp rax; 
0x00000000000493d8: add byte ptr [rax], al; mov edx, 6; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000000c8ac: add byte ptr [rax], al; mov edx, 7; call 0xb180; lea rax, [rip + 0x210e1]; call rax; 
0x000000000002b273: add byte ptr [rax], al; mov edx, 8; mov rdi, r12; call rbx; 
0x000000000002bac2: add byte ptr [rax], al; mov edx, 8; mov rdi, rbp; call rbx; 
0x0000000000044ff7: add byte ptr [rax], al; mov edx, ebx; lea rsi, [rip + 0xf29e]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000000be5e: add byte ptr [rax], al; mov edx, esi; mov eax, edi; ret; 
0x0000000000042114: add byte ptr [rax], al; mov edx, r15d; lea rsi, [rip + 0x11f00]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000001fc54: add byte ptr [rax], al; mov esi, 8; call rbx; 
0x00000000000493dd: add byte ptr [rax], al; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x0000000000033433: add byte ptr [rax], al; mov qword ptr [rbx + 8], r14; add rsp, 0x108; pop rbx; pop r14; ret; 
0x0000000000032a9a: add byte ptr [rax], al; mov qword ptr [rbx], rax; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000032ff1: add byte ptr [rax], al; mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000019082: add byte ptr [rax], al; mov qword ptr [rbx], rax; pop rbx; pop r14; pop r15; ret; 
0x000000000003100b: add byte ptr [rax], al; mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000000dbcf: add byte ptr [rax], al; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x138; ret; 
0x000000000000dbc3: add byte ptr [rax], al; mov qword ptr [rcx + 8], rdx; mov rdx, qword ptr [rsp + 0xd0]; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x138; ret; 
0x000000000001d17b: add byte ptr [rax], al; mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x000000000001cf59: add byte ptr [rax], al; mov qword ptr [rdi + 8], rax; add rsp, 0x18; ret; 
0x000000000001d00b: add byte ptr [rax], al; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000001ce7b: add byte ptr [rax], al; mov qword ptr [rdi], rax; add rsp, 0x30; ret; 
0x000000000000a776: add byte ptr [rax], al; mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x28; ret; 
0x0000000000012c4e: add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rdi; ret; 
0x0000000000034d5b: add byte ptr [rax], al; mov qword ptr [rsp + 0x10], rdi; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000001fc3f: add byte ptr [rax], al; mov qword ptr [rsp + 0x168], rdi; mov rbp, r9; call rbx; 
0x000000000002556f: add byte ptr [rax], al; mov qword ptr [rsp + 0x1b0], rdi; call rbx; 
0x000000000000c4a4: add byte ptr [rax], al; mov qword ptr [rsp + 0x28], rdi; call 0xcca0; mov rdi, qword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000004bc6d: add byte ptr [rax], al; mov qword ptr [rsp + 0x38], rax; call rax; 
0x000000000000c540: add byte ptr [rax], al; mov qword ptr [rsp + 0x40], rdi; call 0xcca0; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c574: add byte ptr [rax], al; mov qword ptr [rsp + 0x48], rdi; call 0xcca0; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x0000000000038eb1: add byte ptr [rax], al; mov qword ptr [rsp + 0x550], rdi; lea rbx, [rip - 0x27a92]; call rbx; 
0x000000000000c5a8: add byte ptr [rax], al; mov qword ptr [rsp + 0x68], rdi; call 0xcca0; mov rdi, qword ptr [rsp + 0x68]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000003ce89: add byte ptr [rax], al; mov qword ptr [rsp + 8], rax; lea rbx, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x0000000000030120: add byte ptr [rax], al; mov qword ptr [rsp + 8], rcx; movaps xmm0, xmmword ptr [rsp + 0xb0]; movups xmmword ptr [rsp + 0x10], xmm0; mov qword ptr [rsp], rsi; call qword ptr [rax + 0x20]; 
0x000000000004c08f: add byte ptr [rax], al; mov r13, rax; call rax; 
0x000000000004df6b: add byte ptr [rax], al; mov r8d, 0x11f; call 0x4de00; pop rcx; ret; 
0x000000000004dfa2: add byte ptr [rax], al; mov r8d, 0xc4; call 0x4de00; pop rcx; ret; 
0x000000000002e63e: add byte ptr [rax], al; mov rax, qword ptr [rbx + r13 + 8]; test rax, rax; je 0x2e659; mov rdi, qword ptr [rbx + r13]; call rax; 
0x000000000004d7ae: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi + 0x18]; ret; 
0x000000000004a19e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x10]; ret; 
0x000000000000a58e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; ret; 
0x000000000004b88e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rdi, rax; jmp rcx; 
0x000000000001186e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x000000000004d79e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov rdx, qword ptr [rdi + 8]; ret; 
0x00000000000285af: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x000000000000d5d3: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x168; ret; 
0x000000000000a8bf: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x40; ret; 
0x000000000000e43f: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x48; ret; 
0x000000000000a31d: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000000a3f1: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x00000000000113aa: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x38; ret; 
0x000000000000a713: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x20]; add rsp, 0xa8; ret; 
0x000000000000eccf: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x20]; mov rdx, qword ptr [rsp + 0x28]; add rsp, 0x98; ret; 
0x000000000000f776: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x68; ret; 
0x000000000001059d: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x68; ret; 
0x000000000000de4e: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x30]; add rsp, 0x58; ret; 
0x000000000000e00c: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x70]; add rsp, 0x108; ret; 
0x000000000000f49e: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x78]; mov rdx, qword ptr [rsp + 0x80]; add rsp, 0xf8; ret; 
0x000000000000bdf4: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x0000000000010a32: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x138; ret; 
0x000000000000afcf: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000f157: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x58; ret; 
0x000000000000f357: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x60; ret; 
0x000000000004a550: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000039f30: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000001140c: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000faca: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x000000000000a990: add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000010463: add byte ptr [rax], al; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000000a1dd: add byte ptr [rax], al; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000045d47: add byte ptr [rax], al; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x000000000002f4ce: add byte ptr [rax], al; mov rax, rdi; lea rdx, [rip + 0x35606]; ret; 
0x000000000000e8de: add byte ptr [rax], al; mov rax, rdi; mov qword ptr [rdi + 8], rsi; mov qword ptr [rdi + 0x10], rdx; mov qword ptr [rdi], 0; ret; 
0x000000000001fc47: add byte ptr [rax], al; mov rbp, r9; call rbx; 
0x00000000000287ea: add byte ptr [rax], al; mov rbx, rax; dec qword ptr [rax - 8]; mov rdi, r14; call qword ptr [rbp]; 
0x00000000000345a7: add byte ptr [rax], al; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x000000000004a544: add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x10]; lea rsi, [rip + 0xa76e]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000000c473: add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x1e81f]; mov qword ptr [rsp + 0x70], rax; call rax; 
0x000000000000c4ae: add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c4e2: add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c516: add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c54a: add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c57e: add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c5b2: add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x68]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c168: add byte ptr [rax], al; mov rdi, qword ptr [rsp]; lea rax, [rip + 0x1eb2b]; call rax; 
0x000000000002b278: add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x0000000000020353: add byte ptr [rax], al; mov rdi, r12; mov rsi, qword ptr [rsp + 0x168]; call rbx; 
0x0000000000021d5b: add byte ptr [rax], al; mov rdi, r13; mov rsi, qword ptr [rsp + 0x1b8]; call rbx; 
0x000000000003963a: add byte ptr [rax], al; mov rdi, r14; lea rbx, [rip - 0x28206]; call rbx; 
0x0000000000020342: add byte ptr [rax], al; mov rdi, r14; lea rbx, [rip - 0xef0e]; call rbx; 
0x0000000000030a54: add byte ptr [rax], al; mov rdi, r15; add rdi, 8; lea rsi, [rsp + 0xb0]; mov edx, 0xa8; call rbx; 
0x0000000000021d4a: add byte ptr [rax], al; mov rdi, r15; lea rbx, [rip - 0x10916]; call rbx; 
0x000000000003964b: add byte ptr [rax], al; mov rdi, r15; mov rsi, qword ptr [rsp + 0x550]; call rbx; 
0x0000000000049c6b: add byte ptr [rax], al; mov rdi, rax; call qword ptr [rip + 0x1d22a]; add rsp, 0x18; ret; 
0x000000000003038c: add byte ptr [rax], al; mov rdi, rax; call qword ptr [rip + 0x36541]; pop rcx; ret; 
0x000000000001e347: add byte ptr [rax], al; mov rdi, rax; call qword ptr [rip + 0x48586]; pop rcx; ret; 
0x000000000001e322: add byte ptr [rax], al; mov rdi, rax; call qword ptr [rip + 0x485ab]; pop rcx; ret; 
0x000000000002bac7: add byte ptr [rax], al; mov rdi, rbp; call rbx; 
0x000000000004b117: add byte ptr [rax], al; mov rdi, rbp; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x000000000004e8a6: add byte ptr [rax], al; mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x17fe2]; add rsp, 0x88; ret; 
0x000000000004e6c6: add byte ptr [rax], al; mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x181c2]; add rsp, 0x88; ret; 
0x000000000004e626: add byte ptr [rax], al; mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x18262]; add rsp, 0x88; ret; 
0x000000000004e593: add byte ptr [rax], al; mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x182f5]; add rsp, 0x88; ret; 
0x000000000004e503: add byte ptr [rax], al; mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x18385]; add rsp, 0x88; ret; 
0x000000000004e471: add byte ptr [rax], al; mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x18417]; add rsp, 0x88; ret; 
0x000000000004e3e1: add byte ptr [rax], al; mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x184a7]; add rsp, 0x88; ret; 
0x000000000004c670: add byte ptr [rax], al; mov rdx, rcx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001120e: add byte ptr [rax], al; mov rdx, rsi; mov rax, rdi; ret; 
0x00000000000116ee: add byte ptr [rax], al; movabs rax, 0x6d420b247d05a67e; ret; 
0x00000000000116de: add byte ptr [rax], al; movabs rax, 0x89a76c34a9f81ac8; ret; 
0x000000000001ab43: add byte ptr [rax], al; movsxd rax, dword ptr [r9 + rcx*4]; add rax, r9; jmp rax; 
0x000000000001c25e: add byte ptr [rax], al; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x0000000000046b56: add byte ptr [rax], al; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004c338: add byte ptr [rax], al; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor r12d, r12d; mov ebp, edx; jmp rax; 
0x000000000004bebe: add byte ptr [rax], al; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor r12d, r12d; mov r13d, r14d; jmp rax; 
0x0000000000046ed7: add byte ptr [rax], al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000003039e: add byte ptr [rax], al; movsxd rax, edi; mov qword ptr [rip + 0x36d5e], rax; mov qword ptr [rip + 0x36d5f], rsi; ret; 
0x00000000000465b7: add byte ptr [rax], al; movsxd rbx, dword ptr [rax + r8*4]; add rbx, rax; jmp rbx; 
0x000000000004c101: add byte ptr [rax], al; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c2ec: add byte ptr [rax], al; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; mov edx, ebp; mov ebp, 0x110001; jmp rcx; 
0x000000000004c199: add byte ptr [rax], al; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; mov edx, r15d; jmp rcx; 
0x0000000000049fb1: add byte ptr [rax], al; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000045000: add byte ptr [rax], al; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000002ca7b: add byte ptr [rax], al; movsxd rsi, dword ptr [r12 + rsi*4]; add rsi, r12; jmp rsi; 
0x000000000004c0c3: add byte ptr [rax], al; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x000000000001cdb5: add byte ptr [rax], al; movups xmm0, xmmword ptr [r8 + 8]; movups xmmword ptr [rdi + 8], xmm0; mov qword ptr [rdi], 0; add rsp, 0x30; ret; 
0x000000000003012d: add byte ptr [rax], al; movups xmmword ptr [rsp + 0x10], xmm0; mov qword ptr [rsp], rsi; call qword ptr [rax + 0x20]; 
0x000000000004b8ee: add byte ptr [rax], al; movzx eax, byte ptr [rdi + 0x30]; and al, 0x10; shr al, 4; ret; 
0x000000000004b8fe: add byte ptr [rax], al; movzx eax, byte ptr [rdi + 0x30]; and al, 0x20; shr al, 5; ret; 
0x000000000004b8de: add byte ptr [rax], al; movzx eax, byte ptr [rdi + 0x30]; and al, 4; shr al, 2; ret; 
0x0000000000046829: add byte ptr [rax], al; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + r10], al; pop rax; ret; 
0x0000000000046690: add byte ptr [rax], al; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + rcx], al; pop rbx; ret; 
0x0000000000046b4b: add byte ptr [rax], al; movzx eax, r10b; lea rcx, [rip + 0xde08]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000028337: add byte ptr [rax], al; movzx eax, r14b; lea rcx, [rip + 0x294d4]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002c548: add byte ptr [rax], al; movzx ecx, byte ptr [r10]; movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x000000000002a119: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov al, 1; ret; 
0x0000000000011209: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rdx, rsi; mov rax, rdi; ret; 
0x000000000000b7b9: add byte ptr [rax], al; nop dword ptr [rax + rax]; push rax; call 0xfbd0; pop rax; ret; 
0x0000000000049169: add byte ptr [rax], al; nop dword ptr [rax + rax]; ret; 
0x000000000003f579: add byte ptr [rax], al; nop dword ptr [rax + rax]; test rsi, rsi; js 0x3f58a; add qword ptr [rdi + 0x18], rsi; ret; 
0x0000000000045d5a: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rdi + 0x20]; mov rdx, qword ptr [rdi + 0x28]; ret; 
0x000000000000a53b: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rdi]; mov rdx, qword ptr [rdi + 8]; ret; 
0x000000000004ad1a: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, rdi; lea rdx, [rip - 0x10aa]; ret; 
0x0000000000013dbb: add byte ptr [rax], al; nop dword ptr [rax]; movzx edi, al; call rbx; 
0x000000000000eb2b: add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x000000000003306b: add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000000e8cc: add byte ptr [rax], al; nop; mov al, 1; and al, 1; movzx eax, al; ret; 
0x000000000004a1ad: add byte ptr [rax], al; nop; mov rax, qword ptr [rdi + 0x18]; ret; 
0x000000000000a82d: add byte ptr [rax], al; nop; mov rax, qword ptr [rdi + 8]; ret; 
0x0000000000049f5d: add byte ptr [rax], al; nop; movabs rax, 0x6d420b247d05a67e; ret; 
0x000000000004a1bd: add byte ptr [rax], al; nop; movzx eax, byte ptr [rdi + 0x20]; ret; 
0x000000000000b8fc: add byte ptr [rax], al; nop; push rax; call 0x9fb0; pop rax; ret; 
0x000000000000be6d: add byte ptr [rax], al; nop; push rax; call 0xd1e0; pop rcx; ret; 
0x000000000000b5bc: add byte ptr [rax], al; nop; push rax; call 0xd5f0; pop rax; ret; 
0x000000000003fbfd: add byte ptr [rax], al; nop; ret; 
0x000000000004e1e2: add byte ptr [rax], al; or rax, r8; or rax, rdx; pop rbx; ret; 
0x000000000000b2c4: add byte ptr [rax], al; pop rax; ret; 
0x0000000000008109: add byte ptr [rax], al; pop rbx; pop r12; pop r14; pop r15; ret; 
0x0000000000029b7d: add byte ptr [rax], al; pop rbx; pop r14; pop r15; jmp rcx; 
0x0000000000029970: add byte ptr [rax], al; pop rbx; pop r14; pop r15; ret; 
0x000000000002811f: add byte ptr [rax], al; pop rbx; pop r14; pop rbp; ret; 
0x0000000000032908: add byte ptr [rax], al; pop rbx; pop r14; ret; 
0x000000000004c55a: add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000000294cc: add byte ptr [rax], al; pop rbx; ret; 
0x000000000000a5ab: add byte ptr [rax], al; pop rcx; ret; 
0x0000000000011e4e: add byte ptr [rax], al; push rax; call 0x288b0; ud2; nop dword ptr [rax + rax]; ret; 
0x000000000000a78e: add byte ptr [rax], al; push rax; call 0xa590; pop rcx; ret; 
0x000000000000b6be: add byte ptr [rax], al; push rax; call 0xb390; pop rax; ret; 
0x000000000000b90e: add byte ptr [rax], al; push rax; call 0xb400; pop rax; ret; 
0x000000000000b68e: add byte ptr [rax], al; push rax; call 0xb6d0; pop rax; ret; 
0x000000000000b2ce: add byte ptr [rax], al; push rax; call 0xb770; pop rax; ret; 
0x000000000000b79e: add byte ptr [rax], al; push rax; call 0xb780; pop rax; ret; 
0x000000000000b69e: add byte ptr [rax], al; push rax; call 0xb900; pop rax; ret; 
0x000000000000b6ae: add byte ptr [rax], al; push rax; call 0xba50; pop rax; ret; 
0x000000000000b77e: add byte ptr [rax], al; push rax; call 0xbeb0; pop rax; ret; 
0x000000000000b3fe: add byte ptr [rax], al; push rax; call 0xdc20; pop rax; ret; 
0x000000000000b40e: add byte ptr [rax], al; push rax; call 0xdce0; pop rax; ret; 
0x000000000000bcee: add byte ptr [rax], al; push rax; call 0xfae0; pop rax; ret; 
0x000000000000b9be: add byte ptr [rax], al; push rax; call 0xfb30; pop rax; ret; 
0x000000000000b7be: add byte ptr [rax], al; push rax; call 0xfbd0; pop rax; ret; 
0x000000000000b2de: add byte ptr [rax], al; push rax; mov rdi, qword ptr [rdi]; call 0xb320; pop rcx; ret; 
0x0000000000009a56: add byte ptr [rax], al; ret; 
0x000000000001cbaa: add byte ptr [rax], al; setb al; and al, cl; ret; 
0x0000000000039631: add byte ptr [rax], al; shl rsi, 4; mov edx, 8; mov rdi, r14; lea rbx, [rip - 0x28206]; call rbx; 
0x0000000000020339: add byte ptr [rax], al; shl rsi, 4; mov edx, 8; mov rdi, r14; lea rbx, [rip - 0xef0e]; call rbx; 
0x000000000004a7f8: add byte ptr [rax], al; sub rdx, rax; mov rdi, qword ptr [r12]; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x000000000000fc1e: add byte ptr [rax], al; sub rsp, 0x18; call 0xb360; add rsp, 0x18; ret; 
0x000000000003459e: add byte ptr [rax], al; test r12, r12; je 0x34652; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x0000000000028b44: add byte ptr [rax], al; test rax, rax; je 0x28b4d; pop rcx; ret; 
0x000000000003f57e: add byte ptr [rax], al; test rsi, rsi; js 0x3f58a; add qword ptr [rdi + 0x18], rsi; ret; 
0x0000000000011541: add byte ptr [rax], al; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x000000000004189e: add byte ptr [rax], al; xor eax, eax; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000004e13c: add byte ptr [rax], al; xor eax, eax; or rax, r8; or rax, rdx; pop rbx; ret; 
0x0000000000014f47: add byte ptr [rax], al; xor eax, eax; pop rcx; ret; 
0x000000000000be7e: add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000004195d: add byte ptr [rax], al; xor eax, eax; shl rax, 0x20; or rax, rcx; ret; 
0x000000000002bc94: add byte ptr [rax], al; xor ebx, ebx; lea rcx, [rip + 0x25c6d]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004ed44: add byte ptr [rax], al; xor ecx, ecx; call qword ptr [rip + 0x17b4a]; add rsp, 0x28; ret; 
0x000000000004ec14: add byte ptr [rax], al; xor ecx, ecx; call qword ptr [rip + 0x17c7a]; add rsp, 0x28; ret; 
0x000000000004e9b0: add byte ptr [rax], al; xor ecx, ecx; call qword ptr [rip + 0x17ede]; add rsp, 0x28; ret; 
0x000000000004e902: add byte ptr [rax], al; xor ecx, ecx; call qword ptr [rip + 0x17f8c]; add rsp, 0x88; ret; 
0x000000000004938c: add byte ptr [rax], al; xor ecx, ecx; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x0000000000034cbf: add byte ptr [rax], al; xor edx, edx; call rbx; 
0x00000000000493c1: add byte ptr [rax], al; xor esi, esi; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000003f3bd: add byte ptr [rax], al; xorps xmm0, xmm0; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0xc], xmm0; ret; 
0x000000000002a11d: add byte ptr [rax], r8b; mov al, 1; ret; 
0x000000000000be5d: add byte ptr [rax], r8b; mov edx, esi; mov eax, edi; ret; 
0x000000000004d79d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi]; mov rdx, qword ptr [rdi + 8]; ret; 
0x000000000001120d: add byte ptr [rax], r8b; mov rdx, rsi; mov rax, rdi; ret; 
0x00000000000116ed: add byte ptr [rax], r8b; movabs rax, 0x6d420b247d05a67e; ret; 
0x00000000000116dd: add byte ptr [rax], r8b; movabs rax, 0x89a76c34a9f81ac8; ret; 
0x000000000004b8ed: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi + 0x30]; and al, 0x10; shr al, 4; ret; 
0x000000000004b8fd: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi + 0x30]; and al, 0x20; shr al, 5; ret; 
0x000000000000b7c3: add byte ptr [rax], r8b; pop rax; ret; 
0x000000000000bced: add byte ptr [rax], r8b; push rax; call 0xfae0; pop rax; ret; 
0x000000000000b7bd: add byte ptr [rax], r8b; push rax; call 0xfbd0; pop rax; ret; 
0x0000000000009a95: add byte ptr [rax], r8b; ret; 
0x000000000000fc1d: add byte ptr [rax], r8b; sub rsp, 0x18; call 0xb360; add rsp, 0x18; ret; 
0x000000000003f57d: add byte ptr [rax], r8b; test rsi, rsi; js 0x3f58a; add qword ptr [rdi + 0x18], rsi; ret; 
0x000000000002d99d: add byte ptr [rax], r8b; xor eax, eax; ret; 
0x0000000000030c38: add byte ptr [rbp + 0x17], dh; movzx eax, byte ptr [rip + 0x364de]; lea rdx, [rip + 0x364cf]; lea rax, [rip + 0x364d1]; pop rcx; ret; 
0x0000000000010c2a: add byte ptr [rbp + 0x1e], dh; lea rdi, [rip + 0x3fdb5]; lea rdx, [rip + 0x52df5]; lea rax, [rip - 0x7752]; mov esi, 0x2b; call rax; 
0x00000000000106cd: add byte ptr [rbp + 0x1e], dh; lea rdi, [rip + 0x40312]; lea rdx, [rip + 0x5333a]; lea rax, [rip - 0x71f5]; mov esi, 0x2b; call rax; 
0x000000000000784b: add byte ptr [rbp + 0x39], cl; ret 0x830f; 
0x000000000004de34: add byte ptr [rbp + 0x39], cl; ret 0x870f; 
0x000000000002e859: add byte ptr [rbp + 0x480675c0], al; mov eax, dword ptr [rsp]; pop rcx; ret; 
0x000000000000cf80: add byte ptr [rbp + 0xd], dh; mov rax, qword ptr [rsp]; mov rax, qword ptr [rax + 8]; add rsp, 0x28; ret; 
0x000000000000bcaa: add byte ptr [rbp + 2], dh; pop rax; ret; 
0x000000000000cef4: add byte ptr [rbp + 5], dh; add rsp, 0x28; ret; 
0x000000000000c1ab: add byte ptr [rbp + 5], dh; add rsp, 0x78; ret; 
0x000000000000ce6e: add byte ptr [rbp + 9], dh; mov eax, dword ptr [rsp + 0x24]; add rsp, 0x48; ret; 
0x000000000003f534: add byte ptr [rbp + rcx + 0x48], dh; mov edx, dword ptr [rdi + 0x18]; mov rdi, qword ptr [rdi + 0x10]; mov rax, rdi; pop rcx; ret; 
0x000000000000f573: add byte ptr [rbp + rcx - 0x15], dh; sub ecx, dword ptr [rax - 0x73]; add eax, 0x39d91; call rax; 
0x000000000001c47d: add byte ptr [rbp + rcx*4 + 0x79], cl; add cl, byte ptr [rcx - 0x7d]; ret 0x4cfe; 
0x00000000000292ae: add byte ptr [rbp + rcx*4 + 0x7b], cl; dec dword ptr [rax - 0x75]; jnp 0x292b6; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000001cc64: add byte ptr [rbp + rcx*4 + 0xd], cl; sbb byte ptr [rsi + 3], al; add byte ptr [rcx + 0x63], cl; add al, 0x81; add rax, r9; jmp rax; 
0x000000000001ed39: add byte ptr [rbp + rcx*4 + 5], cl; add esp, dword ptr [rdi]; add eax, dword ptr [rax]; movsxd rcx, dword ptr [r8 + rbp*4]; add rcx, r8; jmp rcx; 
0x000000000002c1e4: add byte ptr [rbp + rcx*4 + 5], cl; push rdi; add al, byte ptr [rax]; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x000000000000710b: add byte ptr [rbp - 0x1e], dh; test dx, dx; setne al; pop rbx; ret; 
0x0000000000023f3f: add byte ptr [rbp - 0x77], cl; ret 0x8b48; 
0x00000000000464ea: add byte ptr [rbp - 0x77], cl; ret; 
0x000000000003a1ef: add byte ptr [rbp - 0x7b], cl; fisttp dword ptr [rdi]; test eax, esp; ret 0xffff; 
0x000000000003459f: add byte ptr [rbp - 0x7b], cl; in al, 0xf; test byte ptr [rcx + 0x48000000], ch; mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x0000000000029b7e: add byte ptr [rbx + 0x41], bl; pop rsi; pop r15; jmp rcx; 
0x00000000000121b5: add byte ptr [rbx + 0x41], bl; pop rsi; pop r15; ret; 
0x0000000000028120: add byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x0000000000032909: add byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x00000000000122a7: add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; pop r15; ret; 
0x000000000002dce0: add byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; pop rbp; ret; 
0x000000000000810a: add byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; ret; 
0x00000000000339e5: add byte ptr [rbx + 0x41df8918], cl; call rdi; 
0x000000000002ae45: add byte ptr [rbx + 0x41df8918], cl; call rsi; 
0x000000000002d795: add byte ptr [rbx + 0x41ef8928], cl; call rsi; 
0x00000000000333d9: add byte ptr [rbx + 0x48682444], cl; mov dword ptr [rbx + 0x90], eax; add rsp, 0x108; pop rbx; pop r14; ret; 
0x000000000004aa7f: add byte ptr [rbx + 0x48], dl; mov ebx, edi; call 0x4a960; mov rax, rbx; pop rbx; ret; 
0x0000000000031297: add byte ptr [rbx + 0x527501f8], al; lea rbx, [r15 - 1]; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x0000000000028159: add byte ptr [rbx + 0x57504f8], al; add rsp, 0x18; ret; 
0x0000000000007de9: add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x000000000004c55b: add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000002a456: add byte ptr [rbx + 0x97504f8], al; lea rax, [rip + 0x3cc1d]; pop rcx; ret; 
0x000000000002a256: add byte ptr [rbx + 0x97504f8], al; lea rax, [rip + 0x3cde5]; pop rcx; ret; 
0x000000000001d3e7: add byte ptr [rbx + rcx*2], bh; jne 0x1d38c; mov qword ptr [rdi + 8], rdx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x00000000000310b6: add byte ptr [rbx + rcx*4 + 0x2d], cl; ret 0x357; 
0x0000000000025374: add byte ptr [rbx + rcx*4 + 0x65], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000253bb: add byte ptr [rbx + rcx*4 + 0x65], cl; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000271c2: add byte ptr [rbx - 0x7af0d108], al; mov esp, 0x41000007; call rdx; 
0x0000000000026d26: add byte ptr [rbx - 0xb7f83f], al; ret 0x8948; 
0x0000000000013196: add byte ptr [rbx - 1], bl; and eax, 0x538e2; pop rbx; ret; 
0x0000000000012b69: add byte ptr [rbx - 1], bl; and eax, 0x53f0f; pop rbx; ret; 
0x0000000000012a15: add byte ptr [rbx - 1], bl; and eax, 0x54063; pop rbx; ret; 
0x00000000000128a3: add byte ptr [rbx - 1], bl; and eax, 0x541d5; pop rbx; ret; 
0x000000000003d3bf: add byte ptr [rcx + 0x148d48c9], cl; add dword ptr [rax - 0x7d], ecx; ret 0xb820; 
0x000000000004bd5f: add byte ptr [rcx + 0x158d48f8], cl; xchg eax, edx; add byte ptr [rax], al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000044ff8: add byte ptr [rcx + 0x358d48da], cl; sahf; add byte ptr [rax], al; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x0000000000041230: add byte ptr [rcx + 0x39], cl; int 0x77; sub cl, byte ptr [rax - 0x77]; ret; 
0x000000000001d86e: add byte ptr [rcx + 0x39], cl; ret; 
0x000000000002944e: add byte ptr [rcx + 0x3e083f8], cl; lea rcx, [rip + 0x283cd]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000871e: add byte ptr [rcx + 0x46349c0], cl; test byte ptr [rcx + rax - 0x20], cl; jmp rax; 
0x000000000000c699: add byte ptr [rcx + 0x4a], bh; call rax; 
0x0000000000033102: add byte ptr [rcx + 0x5515ffc7], cl; cmp eax, dword ptr [rbx]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002c1eb: add byte ptr [rcx + 0x63], cl; adc al, 0x90; add rdx, r8; jmp rdx; 
0x000000000001cc6b: add byte ptr [rcx + 0x63], cl; add al, 0x81; add rax, r9; jmp rax; 
0x000000000004bea1: add byte ptr [rcx + 0x63], cl; add al, 0x87; add rax, r15; mov esi, 0x5c; jmp rax; 
0x000000000001ab44: add byte ptr [rcx + 0x63], cl; add al, 0x89; add rax, r9; jmp rax; 
0x000000000001d98d: add byte ptr [rcx + 0x63], cl; cmp al, 0x98; add rdi, r8; jmp rdi; 
0x000000000001ed40: add byte ptr [rcx + 0x63], cl; or al, 0xa8; add rcx, r8; jmp rcx; 
0x000000000002ca7c: add byte ptr [rcx + 0x63], cl; xor al, 0xb4; add rsi, r12; jmp rsi; 
0x000000000002804f: add byte ptr [rcx + 0x69], cl; ret; 
0x00000000000272a8: add byte ptr [rcx + 0x6b], cl; sal dword ptr [rax + 0x48], 0xc7; ret; 
0x0000000000008b8e: add byte ptr [rcx + 0xc6349c1], cl; mov word ptr [rcx + rax - 0x1f], cs; jmp rcx; 
0x000000000001cdb6: add byte ptr [rcx + 0xf], al; adc byte ptr [rax + 8], al; movups xmmword ptr [rdi + 8], xmm0; mov qword ptr [rdi], 0; add rsp, 0x30; ret; 
0x0000000000048723: add byte ptr [rcx + 0xf], al; mov dh, 0x73; add dword ptr [rcx - 0x7d], ecx; ret; 
0x000000000002c549: add byte ptr [rcx + 0xf], al; mov dh, 0xa; movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x0000000000046b4c: add byte ptr [rcx + 0xf], al; mov dh, 0xc2; lea rcx, [rip + 0xde08]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000028338: add byte ptr [rcx + 0xf], al; mov dh, 0xc6; lea rcx, [rip + 0x294d4]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000049d3f: add byte ptr [rcx + 0xf], al; scasd eax, dword ptr [rdi]; ret; 
0x000000000001a88e: add byte ptr [rcx + 1], cl; ret; 
0x000000000002c552: add byte ptr [rcx + rax - 0x18], cl; jmp rax; 
0x000000000000d460: add byte ptr [rcx + rax], ah; movzx eax, al; add rsp, 0x18; ret; 
0x000000000004e1e3: add byte ptr [rcx + rcx - 0x40], cl; or rax, rdx; pop rbx; ret; 
0x000000000000cd2d: add byte ptr [rcx + rcx*4 + 1], cl; mov qword ptr [rcx + 8], rdi; mov qword ptr [rcx + 0x20], rsi; mov qword ptr [rcx + 0x28], rdx; add rsp, 0x88; ret; 
0x000000000002a545: add byte ptr [rcx + rcx*4 - 0x10], cl; add rsp, 0x10; pop rbx; pop r14; pop r15; ret; 
0x000000000002e989: add byte ptr [rcx + rcx*4 - 0x10], cl; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000021d5c: add byte ptr [rcx + rcx*4 - 0x11], cl; mov rsi, qword ptr [rsp + 0x1b8]; call rbx; 
0x000000000002f116: add byte ptr [rcx + rcx*4 - 0x18], cl; lea r14, [r13 - 1]; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000002b279: add byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x0000000000020354: add byte ptr [rcx + rcx*4 - 0x19], cl; mov rsi, qword ptr [rsp + 0x168]; call rbx; 
0x000000000004ed3d: add byte ptr [rcx + rcx*4 - 0x29], cl; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x17b4a]; add rsp, 0x28; ret; 
0x000000000004ec0d: add byte ptr [rcx + rcx*4 - 0x29], cl; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x17c7a]; add rsp, 0x28; ret; 
0x000000000004eae4: add byte ptr [rcx + rcx*4 - 0x29], cl; xor ecx, ecx; call qword ptr [rip + 0x17da8]; add rsp, 0x30; pop rbx; ret; 
0x000000000001fc48: add byte ptr [rcx + rcx*4 - 0x33], cl; call rbx; 
0x000000000004e2a3: add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x000000000002ba2c: add byte ptr [rcx + rcx*4 - 0xb], al; and ebp, 3; lea rcx, [rip + 0x25ec2]; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x0000000000030a55: add byte ptr [rcx + rcx*4 - 1], cl; add rdi, 8; lea rsi, [rsp + 0xb0]; mov edx, 0xa8; call rbx; 
0x0000000000021d4b: add byte ptr [rcx + rcx*4 - 1], cl; lea rbx, [rip - 0x10916]; call rbx; 
0x000000000003964c: add byte ptr [rcx + rcx*4 - 1], cl; mov rsi, qword ptr [rsp + 0x550]; call rbx; 
0x00000000000281e4: add byte ptr [rcx + rcx*4 - 1], cl; xor edx, edx; call rbp; cmp eax, -1; jne 0x282b8; call rbx; 
0x0000000000042115: add byte ptr [rcx + rcx*4 - 6], al; lea rsi, [rip + 0x11f00]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000003963b: add byte ptr [rcx + rcx*4 - 9], cl; lea rbx, [rip - 0x28206]; call rbx; 
0x0000000000020343: add byte ptr [rcx + rcx*4 - 9], cl; lea rbx, [rip - 0xef0e]; call rbx; 
0x00000000000070ef: add byte ptr [rcx - 0x1459930], cl; jmp qword ptr [rsi - 0x2d]; 
0x000000000002e673: add byte ptr [rcx - 0x1bea0039], cl; test dword ptr [rbx], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000023e37: add byte ptr [rcx - 0x39], cl; ret; 
0x0000000000011e27: add byte ptr [rcx - 0x3b7cb718], cl; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000001ef4b: add byte ptr [rcx - 0x44], al; add byte ptr ss:[rax], al; add cl, ch; ret 0xfffb; 
0x0000000000015bcc: add byte ptr [rcx - 0x4c], al; add ebx, ebp; cmp cl, byte ptr [rcx - 0x7d]; sal al, 0x84; ror byte ptr [rdi], 0x95; ret; 
0x000000000002f7e8: add byte ptr [rcx - 0x75], cl; and byte ptr [rbp + 0x1c], r14b; mov rdi, r15; call rax; 
0x000000000004adc9: add byte ptr [rcx - 0x75], cl; pop rdi; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000048072: add byte ptr [rcx - 0x77], al; ret 0xc5e9; 
0x000000000003ddf6: add byte ptr [rcx - 0x77], cl; or byte ptr [r9 - 0x39], r9b; adc byte ptr [r9], r8b; add byte ptr [rax], al; add cl, ch; ret; 
0x0000000000037de9: add byte ptr [rcx - 0x77], cl; ret; 
0x000000000004210a: add byte ptr [rcx - 0x7d], al; jmp qword ptr [rdi]; 
0x000000000004681d: add byte ptr [rcx - 0x7d], cl; ret 0x4902; 
0x00000000000100e8: add byte ptr [rcx - 0x9f3dbbc], cl; and al, 0x17; add dword ptr [rbp + 9], esi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x0000000000019fca: add byte ptr [rcx - 1], cl; ret 0x394c; 
0x000000000004cf8a: add byte ptr [rcx - 1], cl; ret; 
0x000000000003a1ec: add byte ptr [rcx], 0; add byte ptr [rbp - 0x7b], cl; fisttp dword ptr [rdi]; test eax, esp; ret 0xffff; 
0x000000000000a8bc: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x40; ret; 
0x000000000000a3ee: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x68; ret; 
0x00000000000103ca: add byte ptr [rcx], al; add byte ptr [rax], al; call rax; 
0x000000000001fc52: add byte ptr [rcx], al; add byte ptr [rax], al; mov esi, 8; call rbx; 
0x000000000004e1e0: add byte ptr [rcx], al; add byte ptr [rax], al; or rax, r8; or rax, rdx; pop rbx; ret; 
0x0000000000029b7b: add byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; pop r14; pop r15; jmp rcx; 
0x0000000000029e95: add byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; pop r14; pop r15; ret; 
0x000000000001cba8: add byte ptr [rcx], al; add byte ptr [rax], al; setb al; and al, cl; ret; 
0x000000000001cc2c: add byte ptr [rcx], al; add byte ptr [rdi], cl; xchg eax, edx; shl dword ptr [rax], 0xc1; movzx eax, cl; ret; 
0x0000000000009acd: add byte ptr [rcx], al; pop rbp; ret; 
0x0000000000048f57: add byte ptr [rcx], ch; ret 0x148d; 
0x00000000000306e5: add byte ptr [rcx], cl; ret 0x298b; 
0x0000000000026987: add byte ptr [rcx], cl; ret 0xc148; 
0x000000000002bc95: add byte ptr [rcx], dh; fisttp dword ptr [rax - 0x73]; or eax, 0x25c6d; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a20d: add byte ptr [rcx], dh; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x41]; pop rsi; pop r15; ret; 
0x000000000001b463: add byte ptr [rcx], dh; fucomi st(1); ret 4; 
0x000000000001ae7e: add byte ptr [rcx], dh; jmp qword ptr [rsi + 0x66]; 
0x000000000004ed45: add byte ptr [rcx], dh; leave; call qword ptr [rip + 0x17b4a]; add rsp, 0x28; ret; 
0x000000000004ec15: add byte ptr [rcx], dh; leave; call qword ptr [rip + 0x17c7a]; add rsp, 0x28; ret; 
0x000000000004e9b1: add byte ptr [rcx], dh; leave; call qword ptr [rip + 0x17ede]; add rsp, 0x28; ret; 
0x000000000004e903: add byte ptr [rcx], dh; leave; call qword ptr [rip + 0x17f8c]; add rsp, 0x88; ret; 
0x000000000004938d: add byte ptr [rcx], dh; leave; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x0000000000037254: add byte ptr [rcx], dh; rol byte ptr [rax + 0xf084979], cl; xchg eax, esp; ret 0x8b48; 
0x000000000002b558: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; pop rbx; pop r14; pop r15; ret; 
0x000000000004e13d: add byte ptr [rcx], dh; ror byte ptr [rcx + rcx - 0x40], 0x48; or eax, edx; pop rbx; ret; 
0x0000000000032a55: add byte ptr [rcx], dh; sar bh, 0x15; ret 0x33e; 
0x000000000004cf83: add byte ptr [rcx], dh; shr cl, 0xe8; add byte ptr [rax], al; add byte ptr [rcx - 1], cl; ret; 
0x00000000000493c2: add byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0x10; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000004c0b6: add byte ptr [rcx], dl; add byte ptr [rax + 0x30], bh; lea rcx, [rip + 0x8fbf]; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x0000000000049fc1: add byte ptr [rcx], dl; add byte ptr [rax + 0x5c], bh; ret; 
0x000000000000c1a1: add byte ptr [rcx], dl; add byte ptr [rax + 0xf], cl; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 5], dh; add rsp, 0x78; ret; 
0x0000000000049fa9: add byte ptr [rcx], dl; add byte ptr [rax - 0x73], cl; xor eax, 0xaff5; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000004be9f: add byte ptr [rcx], dl; add byte ptr [rcx + 0x63], cl; add al, 0x87; add rax, r15; mov esi, 0x5c; jmp rax; 
0x0000000000042108: add byte ptr [rcx], dl; add byte ptr [rcx - 0x7d], al; jmp qword ptr [rdi]; 
0x0000000000045549: add byte ptr [rcx], dl; add byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], ch; dec dword ptr [rax - 0x7d]; ret 0x8d04; 
0x00000000000083d9: add byte ptr [rdi + 0x74c08503], al; ret; 
0x000000000000c17d: add byte ptr [rdi + 1], bh; call rax; 
0x0000000000025328: add byte ptr [rdi + rcx - 0x49], al; add byte ptr gs:[rax - 0x7d], cl; ret; 
0x000000000004f1ca: add byte ptr [rdi - 0x1c], dh; sub rsp, r11; test qword ptr [rsp + 8], rsp; add rsp, rax; leave; ret; 
0x000000000004211c: add byte ptr [rdi], bl; add dword ptr [rax], eax; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000003012e: add byte ptr [rdi], cl; adc dword ptr [rsp + 0x10], eax; mov qword ptr [rsp], rsi; call qword ptr [rax + 0x20]; 
0x000000000004b8ef: add byte ptr [rdi], cl; mov dh, 0x47; xor byte ptr [rax + rdx], ah; shr al, 4; ret; 
0x000000000004b8ff: add byte ptr [rdi], cl; mov dh, 0x47; xor byte ptr [rax], ah; shr al, 5; ret; 
0x000000000004b8df: add byte ptr [rdi], cl; mov dh, 0x47; xor byte ptr [rsp + rax], ah; shr al, 2; ret; 
0x0000000000046806: add byte ptr [rdi], cl; mov dh, 0xc; js 0xffffffff834c6f1c; ret 0x4c02; 
0x0000000000047d63: add byte ptr [rdi], cl; mov dh, 0xc; or byte ptr [rbp - 0x6bf0be37], al; ret 0x4c89; 
0x0000000000013dbf: add byte ptr [rdi], cl; mov dh, 0xf8; call rbx; 
0x0000000000028e03: add byte ptr [rdi], cl; or ebp, ebx; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000324a1: add byte ptr [rdi], cl; or ebp, ecx; wait; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000008ac5: add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000003fc54: add byte ptr [rdi], cl; or esi, dword ptr [rbp - 0x12]; mov rax, rsi; mov rdx, rcx; pop rcx; ret; 
0x000000000001cda3: add byte ptr [rdi], cl; test bl, bl; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000001cca3: add byte ptr [rdi], cl; test bl, bl; add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret 0x3948; 
0x0000000000023f39: add byte ptr [rdi], cl; test bl, cl; add al, byte ptr [rax]; add byte ptr [rbp - 0x77], cl; ret 0x8b48; 
0x0000000000019fc4: add byte ptr [rdi], cl; test byte ptr [rcx], dh; or dword ptr [rax], eax; add byte ptr [rcx - 1], cl; ret 0x394c; 
0x000000000004554b: add byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], ch; dec dword ptr [rax - 0x7d]; ret 0x8d04; 
0x00000000000227c9: add byte ptr [rdi], cl; xchg eax, ebp; ret 0x8366; 
0x000000000003dc3e: add byte ptr [rdi], cl; xchg eax, ebp; ret 0xf41; 
0x00000000000247f6: add byte ptr [rdi], cl; xchg eax, ebp; ret 0xffbb; 
0x000000000001cbab: add byte ptr [rdi], cl; xchg eax, edx; shl byte ptr [rax], 0xc8; ret; 
0x000000000001cc2e: add byte ptr [rdi], cl; xchg eax, edx; shl dword ptr [rax], 0xc1; movzx eax, cl; ret; 
0x000000000004e2dc: add byte ptr [rdx + 0x11], bh; call qword ptr [rax + 0x18]; 
0x000000000000bdb6: add byte ptr [rdx + 0x24072444], cl; add dword ptr [rdi], ecx; mov dh, 0xc0; pop rcx; ret; 
0x000000000000fe82: add byte ptr [rdx + 0x241f2444], cl; add dword ptr [rdi], ecx; mov dh, 0xc0; add rsp, 0x48; ret; 
0x000000000004df67: add byte ptr [rdx + 0x28], bh; mov r8d, 0x11f; call 0x4de00; pop rcx; ret; 
0x000000000004df9e: add byte ptr [rdx + 0x2c], bh; mov r8d, 0xc4; call 0x4de00; pop rcx; ret; 
0x0000000000009ce6: add byte ptr [rdx + 0x59072444], cl; ret; 
0x00000000000465b8: add byte ptr [rdx + 0x63], cl; sbb al, 0x80; add rbx, rax; jmp rbx; 
0x000000000004c0c4: add byte ptr [rdx + 0x63], cl; xor al, 0xb9; add rsi, rcx; jmp rsi; 
0x0000000000030a47: add byte ptr [rdx + 0x90], bh; call rbx; 
0x0000000000030a64: add byte ptr [rdx + 0xa8], bh; call rbx; 
0x000000000004f001: add byte ptr [rdx + 0xb], bh; jmp rax; 
0x000000000004e05a: add byte ptr [rdx + 0xd], bh; call qword ptr [rax + 0x18]; 
0x0000000000049f81: add byte ptr [rdx + 0xe], bh; jmp rax; 
0x000000000004a77f: add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; 
0x000000000004e0e0: add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000004a77f: add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; mov byte ptr [rbx + 8], al; pop rbx; ret; 
0x000000000004aaad: add byte ptr [rdx + 1], bh; jmp rax; 
0x000000000000c694: add byte ptr [rdx + 1], bh; mov ecx, 0x4a; call rax; 
0x000000000004a62f: add byte ptr [rdx + 2], bh; call qword ptr [rax + 0x18]; 
0x000000000004e0c4: add byte ptr [rdx + 2], bh; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000004a665: add byte ptr [rdx + 3], bh; call qword ptr [rax + 0x18]; 
0x000000000004ed71: add byte ptr [rdx + 5], bh; jmp rax; 
0x00000000000493bd: add byte ptr [rdx + 5], bh; xor esi, esi; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x00000000000493d9: add byte ptr [rdx + 6], bh; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000000c8ad: add byte ptr [rdx + 7], bh; call 0xb180; lea rax, [rip + 0x210e1]; call rax; 
0x000000000002b274: add byte ptr [rdx + 8], bh; mov rdi, r12; call rbx; 
0x000000000002bac3: add byte ptr [rdx + 8], bh; mov rdi, rbp; call rbx; 
0x000000000002e63f: add byte ptr [rdx - 0x75], cl; sub r9d, dword ptr [rax]; test rax, rax; je 0x2e659; mov rdi, qword ptr [rbx + r13]; call rax; 
0x000000000003bad5: add byte ptr [rdx], 0; add al, ch; ret 0xfd6e; 
0x000000000000de4b: add byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x30; add rsp, 0x58; ret; 
0x000000000004ee67: add byte ptr [rip - 0x7ced8c78], al; jmp qword ptr [rax]; 
0x000000000002b26f: add byte ptr [rsi + 0x18], bh; mov edx, 8; mov rdi, r12; call rbx; 
0x0000000000012c45: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov qword ptr [rsi + 0x10], rdi; ret; 
0x000000000003d832: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; nop dword ptr [rax]; ret; 
0x000000000003fbf4: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; nop; ret; 
0x000000000001fc55: add byte ptr [rsi + 8], bh; call rbx; 
0x000000000001eb3d: add byte ptr [rsi + rdx*2 + 0x49], dh; lea eax, [rsp - 0x2e]; lea rcx, [rip + 0x32928]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000e8cd: add byte ptr [rsi - 0x70], ah; mov al, 1; and al, 1; movzx eax, al; ret; 
0x000000000001207d: add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rdi + 0x10]; mov qword ptr [rsi + 0x10], rax; movups xmm0, xmmword ptr [rdi]; movups xmmword ptr [rsi], xmm0; ret; 
0x000000000001e35d: add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rsi]; lea rcx, [rip + 0x32ff2]; movsxd rdx, dword ptr [rcx + rax*4]; add rdx, rcx; jmp rdx; 
0x000000000000b8fd: add byte ptr [rsi - 0x70], ah; push rax; call 0x9fb0; pop rax; ret; 
0x000000000000b5bd: add byte ptr [rsi - 0x70], ah; push rax; call 0xd5f0; pop rax; ret; 
0x000000000003f5d5: add byte ptr [rsi - 0x7d], ah; inc byte ptr [rdx]; sete al; ret; 
0x0000000000046ecc: add byte ptr [rsi], al; mov ecx, 0x8d480001; adc eax, 0xdaeb; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000002532c: add byte ptr gs:[rax - 0x7d], cl; ret; 
0x000000000001ef4e: add byte ptr ss:[rax], al; add cl, ch; ret 0xfffb; 
0x0000000000016f2a: add ch, bl; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000472f4: add cl, al; clc; or dword ptr [rcx], edi; ret 0x830f; 
0x000000000004a5fc: add cl, byte ptr [rax - 0x75]; jge 0x4a601; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000032fe9: add cl, byte ptr [rax - 0x77]; or byte ptr [r8 + 1], dil; mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000031003: add cl, byte ptr [rax - 0x77]; or byte ptr [r8 + 1], dil; mov qword ptr [rbx], rax; pop rbx; ret; 
0x0000000000031c72: add cl, byte ptr [rax - 0x7b]; sal byte ptr [rsp + rcx*2 + 0xf], 0xb7; mov bl, byte ptr [rax]; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x3b66; 
0x00000000000217e7: add cl, byte ptr [rax - 0x7d]; ret 0x4920; 
0x000000000001ad8d: add cl, byte ptr [rax - 0x7d]; ret 0x49fe; 
0x000000000004656f: add cl, byte ptr [rax - 1]; ret 0x8948; 
0x0000000000041701: add cl, byte ptr [rax - 1]; ret; 
0x0000000000046821: add cl, byte ptr [rcx + 0x39]; jae 0x46915; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + r10], al; pop rax; ret; 
0x000000000001c481: add cl, byte ptr [rcx - 0x7d]; ret 0x4cfe; 
0x0000000000047ba7: add cl, byte ptr [rcx - 0x7d]; ret; 
0x00000000000462af: add cl, byte ptr [rcx]; ret; 
0x000000000000bef8: add cl, byte ptr [rdx + 0x59072444]; ret; 
0x000000000001ef51: add cl, ch; ret 0xfffb; 
0x000000000003de02: add cl, ch; ret; 
0x0000000000020dde: add cl, ch; test dword ptr [rax], 0x89480000; ret; 
0x000000000001cd06: add dh, al; or byte ptr [r13 + 0x48], r8b; mov dword ptr [rdi], 1; add rsp, 0x30; ret; 
0x00000000000435ea: add dh, al; or byte ptr [r8], al; xor eax, eax; pop rbx; ret; 
0x00000000000291f3: add dh, al; sbb al, 0x20; add byte ptr [rax - 1], cl; ret; 
0x000000000004ded6: add dh, byte ptr [rax + 0x5b012401]; pop r14; pop r15; ret; 
0x000000000004e2ac: add dh, byte ptr [rax + 0x884101]; mov rax, r8; ret; 
0x0000000000033215: add dh, byte ptr [rbp + 0x12]; mov qword ptr [rbx], 3; add rsp, 0x108; pop rbx; pop r14; ret; 
0x00000000000071b8: add dh, byte ptr [rbp - 0x4b]; cmp r11, 3; jne 0x7170; pop rbx; ret; 
0x00000000000135bc: add dh, byte ptr [rbx + 0x17]; cmp dword ptr [rbx + 0x10], 2; jae 0x135e5; pop rbx; ret; 
0x00000000000135c2: add dh, byte ptr [rbx + 0x20]; pop rbx; ret; 
0x00000000000135f2: add dh, byte ptr [rbx + 1]; ret; 
0x000000000003782d: add dh, dh; ret; 
0x0000000000014f75: add dword ptr [eax], eax; pop rcx; ret; 
0x000000000001cf1b: add dword ptr [r11 + 0x4c8b2404], r9d; and al, 3; mov dword ptr [rdi + 9], eax; mov dword ptr [rdi + 0xc], ecx; add rsp, 0x18; ret; 
0x0000000000041842: add dword ptr [r8], r8d; mov al, 1; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000001d16d: add dword ptr [r8], r8d; mov word ptr [rdi + 6], 0; mov dword ptr [rdi + 2], 0; mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x00000000000475d6: add dword ptr [r9 - 0x7d], ecx; ret; 
0x0000000000013db5: add dword ptr [rax + rdi - 0x17], esi; xor al, 1; add byte ptr [rax], al; nop dword ptr [rax]; movzx edi, al; call rbx; 
0x000000000000fe7c: add dword ptr [rax - 0x14e0dbbc], ecx; add byte ptr [rdx + 0x241f2444], cl; add dword ptr [rdi], ecx; mov dh, 0xc0; add rsp, 0x48; ret; 
0x000000000000bdb0: add dword ptr [rax - 0x14f8dbbc], ecx; add byte ptr [rdx + 0x24072444], cl; add dword ptr [rdi], ecx; mov dh, 0xc0; pop rcx; ret; 
0x000000000003bad0: add dword ptr [rax - 0x73], ecx; mov esp, 0x28024; add al, ch; ret 0xfd6e; 
0x000000000004a42e: add dword ptr [rax - 0x75], ecx; jl 0x4a457; adc byte ptr [rax - 0x75], cl; and al, 8; call qword ptr [rax + 0x18]; 
0x0000000000010385: add dword ptr [rax - 0x75d8dbbc], ecx; and al, 0x27; and al, 1; movzx eax, al; add rsp, 0x28; ret; 
0x000000000000cd30: add dword ptr [rax - 0x77], ecx; jns 0xcd3d; mov qword ptr [rcx + 0x20], rsi; mov qword ptr [rcx + 0x28], rdx; add rsp, 0x88; ret; 
0x000000000001eadb: add dword ptr [rax - 0x7c], eax; dec dword ptr [rdi]; mov eax, esi; add dword ptr [rax], eax; add byte ptr [rcx + 0x39], cl; ret; 
0x000000000004832b: add dword ptr [rax - 0x7d], ecx; ret 0x4802; 
0x0000000000047803: add dword ptr [rax - 0x7d], ecx; ret 0x4c02; 
0x000000000003d3a3: add dword ptr [rax - 0x7d], ecx; ret 0xb810; 
0x000000000003d3c5: add dword ptr [rax - 0x7d], ecx; ret 0xb820; 
0x000000000003d35e: add dword ptr [rax - 0x7d], ecx; ret 0xb8f0; 
0x00000000000252cf: add dword ptr [rax - 1], ecx; ret 0x8548; 
0x0000000000046548: add dword ptr [rax - 1], ecx; ret 0x8948; 
0x000000000002575b: add dword ptr [rax - 1], ecx; ret; 
0x0000000000020e56: add dword ptr [rax], 0x89480000; ret; 
0x000000000003f5f8: add dword ptr [rax], eax; adc dword ptr [rax], eax; add rsp, 0x98; pop rbx; pop r14; ret; 
0x000000000004c2f8: add dword ptr [rax], eax; adc dword ptr [rax], eax; jmp rcx; 
0x0000000000049fc0: add dword ptr [rax], eax; adc dword ptr [rax], eax; mov eax, 0x5c; ret; 
0x000000000004be9e: add dword ptr [rax], eax; adc dword ptr [rax], eax; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; mov esi, 0x5c; jmp rax; 
0x0000000000038adb: add dword ptr [rax], eax; add al, ch; in eax, dx; cmp edi, esi; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000156bf: add dword ptr [rax], eax; add al, ch; leave; sbb edi, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000000c0b7: add dword ptr [rax], eax; add bh, bh; adc eax, 0x5a920; add rsp, 0x1b8; ret; 
0x000000000000ba8c: add dword ptr [rax], eax; add bl, ch; sub cl, byte ptr [rax - 0x73]; add eax, 0xffffdb88; call rax; 
0x00000000000304a0: add dword ptr [rax], eax; add byte ptr [rax + 0x29], cl; ret; 
0x000000000001c25d: add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; test dword ptr [rax], r8d; add rax, rbp; jmp rax; 
0x0000000000039fd0: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; mov ah, 0x24; xor byte ptr [rcx], al; add byte ptr [rax], al; call qword ptr [rcx + 0x20]; 
0x00000000000277e6: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; or eax, 0x2a010; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002778a: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; or eax, 0x2a054; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001ad87: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; pop rcx; add cl, byte ptr [rax - 0x7d]; ret 0x49fe; 
0x000000000001fdfc: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rsi; inc byte ptr [rbp + 0x31]; jmp qword ptr [rsi + 0x2e]; 
0x0000000000037d76: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; add dword ptr [rax - 1], ecx; ret; 
0x000000000003cda4: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000001f39c: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000028484: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000171a8: add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; sal byte ptr [rsi + rbp*2 + 0x48], 0x8d; dec qword ptr [rax - 0x77]; ret 0x8348; 
0x000000000001cca7: add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret 0x3948; 
0x00000000000399d8: add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret; 
0x000000000003f4c0: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop r14; ret; 
0x0000000000032abc: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000001cd0e: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x30; ret; 
0x0000000000030f3a: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000000f0e2: add dword ptr [rax], eax; add byte ptr [rax], al; call 0xeb40; pop rcx; ret; 
0x000000000004a781: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000004e0e2: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000004a781: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; mov byte ptr [rbx + 8], al; pop rbx; ret; 
0x000000000004e8ac: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rip + 0x17fe2]; add rsp, 0x88; ret; 
0x000000000004e6cc: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rip + 0x181c2]; add rsp, 0x88; ret; 
0x000000000004e62c: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rip + 0x18262]; add rsp, 0x88; ret; 
0x000000000004e599: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rip + 0x182f5]; add rsp, 0x88; ret; 
0x000000000004e509: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rip + 0x18385]; add rsp, 0x88; ret; 
0x000000000004e477: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rip + 0x18417]; add rsp, 0x88; ret; 
0x000000000004e3e7: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rip + 0x184a7]; add rsp, 0x88; ret; 
0x000000000000c17f: add dword ptr [rax], eax; add byte ptr [rax], al; call rax; 
0x000000000004aaaf: add dword ptr [rax], eax; add byte ptr [rax], al; jmp rax; 
0x000000000002da67: add dword ptr [rax], eax; add byte ptr [rax], al; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x0000000000014f6a: add dword ptr [rax], eax; add byte ptr [rax], al; lea rsi, [rsp + 4]; call 0x2b6b0; pop rcx; ret; 
0x0000000000011a17: add dword ptr [rax], eax; add byte ptr [rax], al; lea rsi, [rsp + 4]; call 0x2b760; pop rcx; ret; 
0x000000000000c696: add dword ptr [rax], eax; add byte ptr [rax], al; mov ecx, 0x4a; call rax; 
0x0000000000032fef: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000031009: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000001ce79: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi], rax; add rsp, 0x30; ret; 
0x000000000000a8bd: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x40; ret; 
0x000000000000a3ef: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x00000000000113a8: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x38; ret; 
0x000000000000bdf2: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000001140a: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000002811d: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop r14; pop rbp; ret; 
0x000000000000e90e: add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000004195b: add dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; shl rax, 0x20; or rax, rcx; ret; 
0x000000000004ed42: add dword ptr [rax], eax; add byte ptr [rax], al; xor ecx, ecx; call qword ptr [rip + 0x17b4a]; add rsp, 0x28; ret; 
0x000000000004ec12: add dword ptr [rax], eax; add byte ptr [rax], al; xor ecx, ecx; call qword ptr [rip + 0x17c7a]; add rsp, 0x28; ret; 
0x000000000004e9ae: add dword ptr [rax], eax; add byte ptr [rax], al; xor ecx, ecx; call qword ptr [rip + 0x17ede]; add rsp, 0x28; ret; 
0x000000000004e900: add dword ptr [rax], eax; add byte ptr [rax], al; xor ecx, ecx; call qword ptr [rip + 0x17f8c]; add rsp, 0x88; ret; 
0x0000000000034cbd: add dword ptr [rax], eax; add byte ptr [rax], al; xor edx, edx; call rbx; 
0x000000000001c47b: add dword ptr [rax], eax; add byte ptr [rbp + rcx*4 + 0x79], cl; add cl, byte ptr [rcx - 0x7d]; ret 0x4cfe; 
0x000000000003a1ed: add dword ptr [rax], eax; add byte ptr [rbp - 0x7b], cl; fisttp dword ptr [rdi]; test eax, esp; ret 0xffff; 
0x0000000000029b7c: add dword ptr [rax], eax; add byte ptr [rbx + 0x41], bl; pop rsi; pop r15; jmp rcx; 
0x000000000002996f: add dword ptr [rax], eax; add byte ptr [rbx + 0x41], bl; pop rsi; pop r15; ret; 
0x0000000000033223: add dword ptr [rax], eax; add byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x0000000000008108: add dword ptr [rax], eax; add byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; ret; 
0x000000000004122e: add dword ptr [rax], eax; add byte ptr [rcx + 0x39], cl; int 0x77; sub cl, byte ptr [rax - 0x77]; ret; 
0x000000000001eae2: add dword ptr [rax], eax; add byte ptr [rcx + 0x39], cl; ret; 
0x0000000000008b8c: add dword ptr [rax], eax; add byte ptr [rcx + 0xc6349c1], cl; mov word ptr [rcx + rax - 0x1f], cs; jmp rcx; 
0x000000000002c547: add dword ptr [rax], eax; add byte ptr [rcx + 0xf], al; mov dh, 0xa; movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x000000000004e1e1: add dword ptr [rax], eax; add byte ptr [rcx + rcx - 0x40], cl; or rax, rdx; pop rbx; ret; 
0x000000000001fc46: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x33], cl; call rbx; 
0x000000000004adc7: add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; pop rdi; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000004e13b: add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rcx + rcx - 0x40], 0x48; or eax, edx; pop rbx; ret; 
0x000000000002884a: add dword ptr [rax], eax; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x0000000000023f37: add dword ptr [rax], eax; add byte ptr [rdi], cl; test bl, cl; add al, byte ptr [rax]; add byte ptr [rbp - 0x77], cl; ret 0x8b48; 
0x000000000001cba9: add dword ptr [rax], eax; add byte ptr [rdi], cl; xchg eax, edx; shl byte ptr [rax], 0xc8; ret; 
0x000000000001fc53: add dword ptr [rax], eax; add byte ptr [rsi + 8], bh; call rbx; 
0x000000000001cd04: add dword ptr [rax], eax; add dh, al; or byte ptr [r13 + 0x48], r8b; mov dword ptr [rdi], 1; add rsp, 0x30; ret; 
0x0000000000049c74: add dword ptr [rax], eax; add rsp, 0x18; ret; 
0x000000000004e9b8: add dword ptr [rax], eax; add rsp, 0x28; ret; 
0x000000000004eaee: add dword ptr [rax], eax; add rsp, 0x30; pop rbx; ret; 
0x000000000004ad5e: add dword ptr [rax], eax; add rsp, 0x38; ret; 
0x000000000004abd8: add dword ptr [rax], eax; add rsp, 0x48; ret; 
0x000000000004a189: add dword ptr [rax], eax; add rsp, 0x68; ret; 
0x000000000004e3ef: add dword ptr [rax], eax; add rsp, 0x88; ret; 
0x000000000000c173: add dword ptr [rax], eax; call rax; 
0x000000000000c5d6: add dword ptr [rax], eax; lea rdi, [rsp + 0x208]; call rax; 
0x000000000000c729: add dword ptr [rax], eax; lea rdi, [rsp + 0x228]; call rax; 
0x000000000000c77d: add dword ptr [rax], eax; lea rdi, [rsp + 0x280]; call rax; 
0x000000000000c836: add dword ptr [rax], eax; lea rdi, [rsp + 0x2b0]; call rax; 
0x000000000000c236: add dword ptr [rax], eax; lea rdi, [rsp + 0x50]; lea rsi, [rsp + 0x60]; lea rdx, [rsp + 0x38]; call rax; 
0x0000000000046ed0: add dword ptr [rax], eax; lea rdx, [rip + 0xdaeb]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000041843: add dword ptr [rax], eax; mov al, 1; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000000c47f: add dword ptr [rax], eax; mov qword ptr [rsp + 0x70], rax; call rax; 
0x000000000004a0fb: add dword ptr [rax], eax; mov rax, rbx; pop rbx; ret; 
0x000000000003db47: add dword ptr [rax], eax; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x000000000001d16e: add dword ptr [rax], eax; mov word ptr [rdi + 6], 0; mov dword ptr [rdi + 2], 0; mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x0000000000032982: add dword ptr [rax], eax; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003db39: add dword ptr [rax], eax; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; lea rdx, [rip + 0x16427]; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x000000000003f5c2: add dword ptr [rax], eax; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000042e31: add dword ptr [rax], eax; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x000000000003316e: add dword ptr [rax], eax; movsxd rdx, dword ptr [rcx + rdi*4]; add rdx, rcx; jmp rdx; 
0x000000000004211e: add dword ptr [rax], eax; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x0000000000011a23: add dword ptr [rax], eax; pop rcx; ret; 
0x0000000000049195: add dword ptr [rax], eax; ret; 
0x000000000001cc2d: add dword ptr [rax], eax; setb cl; and cl, al; movzx eax, cl; ret; 
0x000000000004d797: add dword ptr [rax], eax; ud2; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; mov rdx, qword ptr [rdi + 8]; ret; 
0x0000000000011e54: add dword ptr [rax], eax; ud2; nop dword ptr [rax + rax]; ret; 
0x000000000002b823: add dword ptr [rbp + 0x3b], esi; lea r14, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000002a1d0: add dword ptr [rbp + 0x3b], esi; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b6dd: add dword ptr [rbp + 0x3b], esi; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000035f43: add dword ptr [rbp + 0x3c], esi; lea rbp, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b51b: add dword ptr [rbp + 0x3d], esi; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000013c49: add dword ptr [rbp + 0x3d], esi; mov r14, r15; dec r14; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000002e73f: add dword ptr [rbp + 0x3d], esi; mov r14, rbx; dec r14; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002a6ac: add dword ptr [rbp + 0x3e], esi; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002db68: add dword ptr [rbp + 0x3f], esi; lea r15, [r12 - 1]; mov rdi, qword ptr [r12 - 1]; mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x0000000000012173: add dword ptr [rbp + 0x40], esi; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000012d5f: add dword ptr [rbp + 0x40], esi; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002ab5e: add dword ptr [rbp + 0x45], esi; mov r12, rbp; dec r12; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000003129a: add dword ptr [rbp + 0x52], esi; lea rbx, [r15 - 1]; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x0000000000010196: add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x0000000000010217: add dword ptr [rbp + 0xe], esi; mov rax, qword ptr [rsp + 0x20]; mov edx, dword ptr [rsp + 0x28]; add rsp, 0x38; ret; 
0x0000000000014ef3: add dword ptr [rbp + 7], esi; shr rdi, 8; mov eax, edi; ret; 
0x00000000000100f1: add dword ptr [rbp + 9], esi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x0000000000009cdd: add dword ptr [rbp + rdx - 0x15], esi; or eax, esi; and al, 7; add byte ptr [rdx + 0x59072444], cl; ret; 
0x000000000004df3b: add dword ptr [rbx + 0x2737fff], eax; pop rcx; ret; 
0x000000000004deda: add dword ptr [rbx + 0x41], ebx; pop rsi; pop r15; ret; 
0x000000000001cf1c: add dword ptr [rbx + 0x4c8b2404], ecx; and al, 3; mov dword ptr [rdi + 9], eax; mov dword ptr [rdi + 0xc], ecx; add rsp, 0x18; ret; 
0x000000000002e77c: add dword ptr [rbx], 0; add rsp, 0x50; pop rbx; pop r14; pop r15; ret; 
0x000000000002e987: add dword ptr [rbx], 0xf0894c00; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000000e8d1: add dword ptr [rcx + rax], esp; movzx eax, al; ret; 
0x000000000004ded8: add dword ptr [rcx + rax], esp; pop rbx; pop r14; pop r15; ret; 
0x0000000000045df4: add dword ptr [rcx + rcx*8 + 0xa9840f], eax; add byte ptr [rax], al; add rsp, 0x68; pop rbx; pop r14; ret; 
0x000000000004e2ae: add dword ptr [rcx - 0x78], eax; add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x000000000001ea84: add dword ptr [rcx - 0x7d], ecx; ret 0x4902; 
0x00000000000475d7: add dword ptr [rcx - 0x7d], ecx; ret; 
0x00000000000148df: add dword ptr [rcx - 1], ecx; ret; 
0x000000000004e510: add dword ptr [rcx], 0; add rsp, 0x88; ret; 
0x000000000004e6d3: add dword ptr [rcx], 0xc4814800; mov byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000003f586: add dword ptr [rdi + 0x18], esi; ret; 
0x000000000000d462: add dword ptr [rdi], ecx; mov dh, 0xc0; add rsp, 0x18; ret; 
0x000000000001038f: add dword ptr [rdi], ecx; mov dh, 0xc0; add rsp, 0x28; ret; 
0x000000000000fe88: add dword ptr [rdi], ecx; mov dh, 0xc0; add rsp, 0x48; ret; 
0x0000000000034d72: add dword ptr [rdi], ecx; mov dh, 0xc0; lea eax, [rax + rax*8]; add rsp, 0x28; ret; 
0x000000000000bdbc: add dword ptr [rdi], ecx; mov dh, 0xc0; pop rcx; ret; 
0x000000000000e8d3: add dword ptr [rdi], ecx; mov dh, 0xc0; ret; 
0x000000000004cc08: add dword ptr [rdi], ecx; popfq; ret 0x148; 
0x000000000003a21c: add dword ptr [rdi], ecx; test dword ptr [rbx + 0x48ffffc8], esi; lea ebx, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x0000000000037de3: add dword ptr [rdi], ecx; xchg byte ptr [rax + rax - 0x76b70000], dl; ret; 
0x000000000004878d: add dword ptr [rdi], ecx; xchg eax, esp; ret 0x8040; 
0x0000000000028a45: add dword ptr [rdx + rbp + 0x31], esi; rcr byte ptr [rbx + 0x41], 0x5e; pop r15; ret; 
0x0000000000029458: add dword ptr [rdx], 0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004e2ab: add dword ptr [rdx], eax; mov al, 1; mov byte ptr [r8], al; mov rax, r8; ret; 
0x000000000004e0a3: add dword ptr [rsi + rax + 0x48], esi; add esp, 0x20; pop rbx; ret; 
0x0000000000008dfb: add dword ptr cs:[rax], eax; add byte ptr [rcx + 0xc6349c1], cl; mov word ptr [rcx + rax - 0x1f], cs; jmp rcx; 
0x000000000003db46: add dword ptr fs:[rax], eax; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x000000000003f584: add eax, 0x18770148; ret; 
0x000000000002815e: add eax, 0x18c48348; ret; 
0x000000000000c5c2: add eax, 0x1de89; call rax; 
0x000000000000c5d3: add eax, 0x1dea8; lea rdi, [rsp + 0x208]; call rax; 
0x000000000000c2f3: add eax, 0x1df58; call rax; 
0x000000000000c233: add eax, 0x1e048; lea rdi, [rsp + 0x50]; lea rsi, [rsp + 0x60]; lea rdx, [rsp + 0x38]; call rax; 
0x000000000000c1fa: add eax, 0x1e051; call rax; 
0x000000000000c833: add eax, 0x1e468; lea rdi, [rsp + 0x2b0]; call rax; 
0x000000000000c77a: add eax, 0x1e521; lea rdi, [rsp + 0x280]; call rax; 
0x000000000000c726: add eax, 0x1e575; lea rdi, [rsp + 0x228]; call rax; 
0x000000000000c47c: add eax, 0x1e81f; mov qword ptr [rsp + 0x70], rax; call rax; 
0x000000000000c170: add eax, 0x1eb2b; call rax; 
0x000000000003d3ba: add eax, 0x20b9; add byte ptr [rcx + 0x148d48c9], cl; add dword ptr [rax - 0x7d], ecx; ret 0xb820; 
0x000000000000c977: add eax, 0x20c14; lea rdi, [rsp + 0x90]; call rax; 
0x000000000000c946: add eax, 0x21055; call rax; 
0x000000000000c8ba: add eax, 0x210e1; call rax; 
0x00000000000302e4: add eax, 0x2173b; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000000c179: add eax, 0x21832; mov edi, 1; call rax; 
0x000000000002c6bb: add eax, 0x252bc; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x000000000002c1e7: add eax, 0x25748; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x000000000000b1e2: add eax, 0x26149; lea rdi, [rsp + 0x38]; call rax; 
0x0000000000029b8c: add eax, 0x27cc7; movsxd rcx, dword ptr [rax + rdi*4]; add rcx, rax; jmp rcx; 
0x0000000000007dee: add eax, 0x28c48348; ret; 
0x00000000000493bf: add eax, 0x31000000; test byte ptr [rax - 0x77], 0x10; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000001ed3c: add eax, 0x32703; movsxd rcx, dword ptr [r8 + rbp*4]; add rcx, r8; jmp rcx; 
0x0000000000034983: add eax, 0x32748; test rax, rax; lea rcx, [rip - 0x62d2]; cmovne rcx, rax; call rcx; 
0x000000000001d989: add eax, 0x339ae; movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x0000000000030c4b: add eax, 0x364d1; pop rcx; ret; 
0x0000000000030c3d: add eax, 0x364de; lea rdx, [rip + 0x364cf]; lea rax, [rip + 0x364d1]; pop rcx; ret; 
0x00000000000303a5: add eax, 0x36d5e; mov qword ptr [rip + 0x36d5f], rsi; ret; 
0x0000000000019e67: add eax, 0x36e84; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000000f57a: add eax, 0x39d91; call rax; 
0x000000000000f55c: add eax, 0x39daf; call rax; 
0x000000000000cb27: add eax, 0x3a2e800; add byte ptr [rax], al; add rsp, 0x128; ret; 
0x000000000002bd37: add eax, 0x3b384; mov eax, ebx; add rsp, 0x20; pop rbx; ret; 
0x000000000002a46c: add eax, 0x3cc0f; pop rcx; ret; 
0x000000000002a45e: add eax, 0x3cc1d; pop rcx; ret; 
0x000000000002a452: add eax, 0x3cc61; cmp eax, 4; jne 0x2a465; lea rax, [rip + 0x3cc1d]; pop rcx; ret; 
0x000000000002a26c: add eax, 0x3cdd7; pop rcx; ret; 
0x000000000002a25e: add eax, 0x3cde5; pop rcx; ret; 
0x000000000000c794: add eax, 0x3cec7; lea rdi, [rsp + 0x2f0]; mov edx, 1; mov ecx, 0x4a; call rax; 
0x000000000000c688: add eax, 0x3cfd3; lea rdi, [rsp + 0x268]; mov edx, 1; mov ecx, 0x4a; call rax; 
0x0000000000028155: add eax, 0x3eee2; cmp eax, 4; jne 0x28164; add rsp, 0x18; ret; 
0x00000000000135ed: add eax, 0x3f839000; add dh, byte ptr [rbx + 1]; ret; 
0x00000000000116f4: add eax, 0x420b247d; insd dword ptr [rdi], dx; ret; 
0x000000000000d3c6: add eax, 0x44894800; and al, 0x10; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000000d215: add eax, 0x44894800; and al, 8; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000b24e: add eax, 0x448b4800; and al, 0x10; add rsp, 0x18; ret; 
0x0000000000011e26: add eax, 0x48e88900; add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000007de8: add eax, 0x4f88300; jne 0x7df4; add rsp, 0x28; ret; 
0x0000000000007e38: add eax, 0x4f88300; jne 0x7e44; add rsp, 0x28; ret; 
0x0000000000007e88: add eax, 0x4f88300; jne 0x7e94; add rsp, 0x28; ret; 
0x0000000000009b44: add eax, 0x58d4800; movabs dword ptr [0x28befffff9], eax; call rax; 
0x0000000000011f46: add eax, 0x5c415b00; pop r13; pop r14; pop r15; ret; 
0x0000000000009a45: add eax, 0x5ce56; test rax, rax; je 0x9a58; jmp rax; 
0x0000000000009a86: add eax, 0x5d485; test rax, rax; je 0x9a98; jmp rax; 
0x00000000000121b4: add eax, 0x5e415b00; pop r15; ret; 
0x0000000000007e85: add eax, 0x5f22e; cmp eax, 4; jne 0x7e94; add rsp, 0x28; ret; 
0x0000000000007e35: add eax, 0x5f27e; cmp eax, 4; jne 0x7e44; add rsp, 0x28; ret; 
0x0000000000007de5: add eax, 0x5f28e; cmp eax, 4; jne 0x7df4; add rsp, 0x28; ret; 
0x0000000000007006: add eax, 0x5fb95; test rax, rax; je 0x7012; call rax; 
0x00000000000272a6: add eax, 0x6b490000; sal dword ptr [rax + 0x48], 0xc7; ret; 
0x000000000000bef3: add eax, 0x72444c6; add cl, byte ptr [rdx + 0x59072444]; ret; 
0x000000000000c1ad: add eax, 0x78c48348; ret; 
0x000000000004ee68: add eax, 0x83127388; jmp qword ptr [rax]; 
0x0000000000017155: add eax, 0x83480000; sar al, 0x75; ret 0x280f; 
0x0000000000017215: add eax, 0x83480000; sar al, 0x75; ret 0xc031; 
0x00000000000172a5: add eax, 0x83480000; sar eax, 0x75; ret 0xc749; 
0x0000000000029188: add eax, 0x894800eb; ret; 
0x00000000000389d4: add eax, 0x894c17eb; ret 0x8349; 
0x000000000000deba: add eax, 0x8b480000; add al, 0x24; pop rcx; ret; 
0x0000000000025756: add eax, 0x8b480000; add dword ptr [rax - 1], ecx; ret; 
0x00000000000130af: add eax, 0x8ba; add bh, bh; and eax, 0x539c5; ret; 
0x0000000000012a10: add eax, 0x8ba; add byte ptr [rbx - 1], bl; and eax, 0x54063; pop rbx; ret; 
0x0000000000038ead: add eax, 0x8be; add byte ptr [rax - 0x77], cl; mov esp, 0x55024; add byte ptr [rax - 0x73], cl; sbb eax, 0xfffd856e; call rbx; 
0x0000000000042e29: add eax, 0x8d480000; sbb eax, 0x1128d; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x0000000000038eb8: add eax, 0x8d480000; sbb eax, 0xfffd856e; call rbx; 
0x000000000001cbfa: add eax, 0x8d481677; or eax, 0x34668; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cb8a: add eax, 0x8d481677; or eax, 0x346c0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cb2a: add eax, 0x8d481a77; or eax, 0x34708; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000024415: add eax, 0x8d488277; adc eax, 0x2d1d5; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000004c2ae: add eax, 0x8e71; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c24e: add eax, 0x8ed1; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c215: add eax, 0x8f0a; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c1d7: add eax, 0x8f48; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c196: add eax, 0x8f89; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; mov edx, r15d; jmp rcx; 
0x000000000004c13d: add eax, 0x8fe2; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c0fe: add eax, 0x9021; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x0000000000007009: add eax, 0xc0854800; je 0x7012; call rax; 
0x0000000000007009: add eax, 0xc0854800; je 0x7012; call rax; add rsp, 8; ret; 
0x0000000000009a48: add eax, 0xc0854800; je 0x9a58; jmp rax; 
0x0000000000009a89: add eax, 0xc0854800; je 0x9a98; jmp rax; 
0x000000000000868f: add eax, 0xc0854800; jle 0x863a; pop rbx; ret; 
0x000000000000c64d: add eax, 0xc4814800; sbb byte ptr [rbx], al; add byte ptr [rax], al; ret; 
0x000000000000c8f6: add eax, 0xc4814800; test al, 1; add byte ptr [rax], al; ret; 
0x0000000000007f69: add eax, 0xc4834800; cmp byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; ret; 
0x00000000000127ec: add eax, 0xc4834800; or byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x0000000000012066: add eax, 0xc4834800; or byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; ret; 
0x000000000000cb1d: add eax, 0xc7894800; lea rsi, [rip + 0x56d27]; call 0xced0; add rsp, 0x128; ret; 
0x00000000000082fc: add eax, 0xd8894800; mov rdx, r14; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000465b4: add eax, 0xe397; movsxd rbx, dword ptr [rax + r8*4]; add rbx, rax; jmp rbx; 
0x000000000000c773: add eax, 0xeb0000; lea rax, [rip + 0x1e521]; lea rdi, [rsp + 0x280]; call rax; 
0x000000000000c71f: add eax, 0xeb0000; lea rax, [rip + 0x1e575]; lea rdi, [rsp + 0x228]; call rax; 
0x000000000003d3b5: add eax, 0xebc9bc0f; add eax, 0x20b9; add byte ptr [rcx + 0x148d48c9], cl; add dword ptr [rax - 0x7d], ecx; ret 0xb820; 
0x000000000000d45f: add eax, 0xf012400; mov dh, 0xc0; add rsp, 0x18; ret; 
0x000000000002abf9: add eax, 0xfee2c1e8; dec dword ptr [rax - 0x7b]; fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x000000000003f088: add eax, 0xff480000; ret 0x3948; 
0x00000000000111e7: add eax, 0xffff8804; xor edx, edx; call rax; 
0x0000000000010c3d: add eax, 0xffff88ae; mov esi, 0x2b; call rax; 
0x00000000000106e0: add eax, 0xffff8e0b; mov esi, 0x2b; call rax; 
0x000000000001053a: add eax, 0xffff8fb1; mov esi, 0x19; call rax; 
0x00000000000102c1: add eax, 0xffff919a; call rax; 
0x00000000000102c1: add eax, 0xffff919a; call rax; ud2; mov al, byte ptr [rsp + 0x27]; add rsp, 0x28; ret; 
0x00000000000103fe: add eax, 0xffff919d; mov esi, 0x100; call rax; 
0x00000000000103c4: add eax, 0xffff91d7; mov esi, 0x100; call rax; 
0x000000000000f673: add eax, 0xffff9dd8; call rax; 
0x000000000000e348: add eax, 0xffffb253; call rax; 
0x000000000000e317: add eax, 0xffffb284; call rax; 
0x000000000000e1a1: add eax, 0xffffb3fa; call rax; 
0x000000000000e170: add eax, 0xffffb42b; call rax; 
0x000000000000dd89: add eax, 0xffffb892; call rax; 
0x000000000000dbf7: add eax, 0xffffba24; call rax; 
0x000000000000d97a: add eax, 0xffffbb71; mov esi, 0x49; call rax; 
0x000000000000d0a2: add eax, 0xffffc579; call rax; 
0x000000000000cfe5: add eax, 0xffffc636; call rax; 
0x000000000000cf4d: add eax, 0xffffc6ce; call rax; 
0x000000000000cd7a: add eax, 0xffffc6f1; call rax; 
0x000000000000d06f: add eax, 0xffffc79c; mov esi, 0x2b; lea rdx, [rsp + 0x20]; call rax; 
0x000000000000cfb2: add eax, 0xffffc859; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000000cf1a: add eax, 0xffffc8f1; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000000ce9a: add eax, 0xffffc971; lea rdx, [rsp + 0x37]; call rax; 
0x000000000000c9c3: add eax, 0xffffcc58; call rax; 
0x000000000000c748: add eax, 0xffffced3; call rax; 
0x000000000000c402: add eax, 0xffffd219; call rax; 
0x000000000000c2c5: add eax, 0xffffd356; call rax; 
0x000000000000bc6a: add eax, 0xffffd9b1; call rax; 
0x000000000000ba93: add eax, 0xffffdb88; call rax; 
0x000000000000ba33: add eax, 0xffffdbe8; call rax; 
0x000000000000b99a: add eax, 0xffffdc81; call rax; 
0x000000000000b87b: add eax, 0xffffdda0; call rax; 
0x000000000000b75a: add eax, 0xffffdec1; call rax; 
0x000000000000b70a: add eax, 0xffffdf11; call rax; 
0x000000000000b672: add eax, 0xffffdfa9; call rax; 
0x000000000000b60a: add eax, 0xffffe011; call rax; 
0x000000000000b53b: add eax, 0xffffe0e0; call rax; 
0x000000000000b472: add eax, 0xffffe1a9; call rax; 
0x000000000000b3e2: add eax, 0xffffe239; call rax; 
0x0000000000009b48: add eax, 0xfffff9a3; mov esi, 0x28; call rax; 
0x000000000001081f: add eax, 8; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x78; ret; 
0x000000000001d1a2: add eax, dword ptr [r8]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000106d4: add eax, dword ptr [rax + rax]; lea rdx, [rip + 0x5333a]; lea rax, [rip - 0x71f5]; mov esi, 0x2b; call rax; 
0x000000000001c2eb: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add r9, qword ptr [r8 - 0x7d]; ret; 
0x000000000001c77a: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; or eax, 0x34a98; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000359a2: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002549e: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 - 0x7d], r9b; ret 0x4de0; 
0x0000000000015536: add eax, dword ptr [rax]; add byte ptr [rax - 1], cl; ret; 
0x00000000000080ad: add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000003321b: add eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x108; pop rbx; pop r14; ret; 
0x000000000004a667: add eax, dword ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x0000000000011a84: add eax, dword ptr [rax]; add byte ptr [rax], al; lea rsi, [rsp + 4]; call 0x2b760; pop rcx; ret; 
0x000000000001e320: add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, rax; call qword ptr [rip + 0x485ab]; pop rcx; ret; 
0x000000000001ae7c: add eax, dword ptr [rax]; add byte ptr [rcx], dh; jmp qword ptr [rsi + 0x66]; 
0x0000000000028a14: add eax, dword ptr [rax]; add rsp, 0x10; pop rbx; ret; 
0x000000000002e77d: add eax, dword ptr [rax]; add rsp, 0x50; pop rbx; pop r14; pop r15; ret; 
0x000000000002f39c: add eax, dword ptr [rax]; add rsp, 0x58; pop rbx; pop r14; ret; 
0x000000000002e2b2: add eax, dword ptr [rax]; add rsp, 0x80; pop rbx; pop r14; pop r15; ret; 
0x000000000002f4ac: add eax, dword ptr [rax]; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000000f55f: add eax, dword ptr [rax]; call rax; 
0x0000000000028158: add eax, dword ptr [rax]; cmp eax, 4; jne 0x28164; add rsp, 0x18; ret; 
0x000000000002a255: add eax, dword ptr [rax]; cmp eax, 4; jne 0x2a265; lea rax, [rip + 0x3cde5]; pop rcx; ret; 
0x000000000002a455: add eax, dword ptr [rax]; cmp eax, 4; jne 0x2a465; lea rax, [rip + 0x3cc1d]; pop rcx; ret; 
0x0000000000030c47: add eax, dword ptr [rax]; lea rax, [rip + 0x364d1]; pop rcx; ret; 
0x000000000000c68b: add eax, dword ptr [rax]; lea rdi, [rsp + 0x268]; mov edx, 1; mov ecx, 0x4a; call rax; 
0x000000000000c797: add eax, dword ptr [rax]; lea rdi, [rsp + 0x2f0]; mov edx, 1; mov ecx, 0x4a; call rax; 
0x0000000000030c40: add eax, dword ptr [rax]; lea rdx, [rip + 0x364cf]; lea rax, [rip + 0x364d1]; pop rcx; ret; 
0x0000000000010c32: add eax, dword ptr [rax]; lea rdx, [rip + 0x52df5]; lea rax, [rip - 0x7752]; mov esi, 0x2b; call rax; 
0x000000000002bd3a: add eax, dword ptr [rax]; mov eax, ebx; add rsp, 0x20; pop rbx; ret; 
0x0000000000030a46: add eax, dword ptr [rax]; mov edx, 0x90; call rbx; 
0x00000000000303a8: add eax, dword ptr [rax]; mov qword ptr [rip + 0x36d5f], rsi; ret; 
0x000000000002ec64: add eax, dword ptr [rax]; mov r15, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000002e988: add eax, dword ptr [rax]; mov rax, r14; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002f45b: add eax, dword ptr [rax]; mov rax, rbx; add rsp, 0x50; pop rbx; ret; 
0x000000000002ec35: add eax, dword ptr [rax]; mov rbx, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x00000000000285a7: add eax, dword ptr [rax]; mov rdi, qword ptr [rsp + 0x110]; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x0000000000028a0b: add eax, dword ptr [rax]; mov rdi, rbx; call qword ptr [rip + 0x3e582]; add rsp, 0x10; pop rbx; ret; 
0x000000000001cc6a: add eax, dword ptr [rax]; movsxd rax, dword ptr [r9 + rax*4]; add rax, r9; jmp rax; 
0x000000000001ac0c: add eax, dword ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001c200: add eax, dword ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000001ea76: add eax, dword ptr [rax]; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x000000000001ed3f: add eax, dword ptr [rax]; movsxd rcx, dword ptr [r8 + rbp*4]; add rcx, r8; jmp rcx; 
0x0000000000019e6a: add eax, dword ptr [rax]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000001ed65: add eax, dword ptr [rax]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000001d98c: add eax, dword ptr [rax]; movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x000000000001e368: add eax, dword ptr [rax]; movsxd rdx, dword ptr [rcx + rax*4]; add rdx, rcx; jmp rdx; 
0x000000000001dfba: add eax, dword ptr [rax]; movsxd rsi, dword ptr [rbp + rsi*4]; add rsi, rbp; jmp rsi; 
0x000000000002a261: add eax, dword ptr [rax]; pop rcx; ret; 
0x000000000002f4d8: add eax, dword ptr [rax]; ret; 
0x000000000002e858: add eax, dword ptr [rax]; test eax, eax; jne 0x2e864; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000002ad61: add eax, dword ptr [rax]; test rax, rax; jne 0x2ad78; add rsp, 0xb0; pop rbx; ret; 
0x0000000000034986: add eax, dword ptr [rax]; test rax, rax; lea rcx, [rip - 0x62d2]; cmovne rcx, rax; call rcx; 
0x000000000002f4c4: add eax, dword ptr [rax]; ud2; nop dword ptr [rax + rax]; mov rax, rdi; lea rdx, [rip + 0x35606]; ret; 
0x000000000002d997: add eax, dword ptr [rax]; ud2; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000012679: add eax, dword ptr [rbp + rax]; ret; 
0x000000000002b820: add eax, dword ptr [rbx + 0x3b7501f8]; lea r14, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000002a1cd: add eax, dword ptr [rbx + 0x3b7501f8]; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b6da: add eax, dword ptr [rbx + 0x3b7501f8]; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000035f40: add eax, dword ptr [rbx + 0x3c7501f8]; lea rbp, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b518: add eax, dword ptr [rbx + 0x3d7501f9]; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002a6a9: add eax, dword ptr [rbx + 0x3e7501f8]; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002db65: add eax, dword ptr [rbx + 0x3f7501fa]; lea r15, [r12 - 1]; mov rdi, qword ptr [r12 - 1]; mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x0000000000012170: add eax, dword ptr [rbx + 0x407501f8]; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000012d5c: add eax, dword ptr [rbx + 0x407501f8]; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000312ed: add eax, dword ptr [rcx]; add rsp, 0x10; pop rbx; pop r14; pop r15; ret; 
0x000000000002342f: add eax, dword ptr [rdi + 0x60]; lea rdi, [rip + 0x2e1d3]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000001ed64: add eax, dword ptr es:[rax]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000030c46: add eax, dword ptr fs:[rax]; lea rax, [rip + 0x364d1]; pop rcx; ret; 
0x0000000000030c3f: add eax, dword ptr fs:[rax]; lea rdx, [rip + 0x364cf]; lea rax, [rip + 0x364d1]; pop rcx; ret; 
0x0000000000030c4d: add eax, dword ptr fs:[rax]; pop rcx; ret; 
0x0000000000030394: add eax, dword ptr gs:[rax]; pop rcx; ret; 
0x000000000001d982: add eax, eax; add rcx, rbp; lea r8, [rip + 0x339ae]; movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x000000000000a209: add eax, ebp; and dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000001c266: add eax, ebp; jmp rax; 
0x000000000000a1d9: add eax, ebp; jno 0xa1dd; add byte ptr [rax], al; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000009b34: add eax, ecx; jmp rax; 
0x000000000000a449: add eax, ecx; mov qword ptr [rsp + 0x20], rax; mov rdi, qword ptr [rsp + 0x20]; call 0xb2c0; add rsp, 0x28; ret; 
0x000000000002261d: add eax, ecx; xor ebx, ebx; jmp rax; 
0x000000000004c33f: add eax, ecx; xor r12d, r12d; mov ebp, edx; jmp rax; 
0x000000000004bec5: add eax, ecx; xor r12d, r12d; mov r13d, r14d; jmp rax; 
0x000000000001c207: add eax, edi; jmp rax; 
0x000000000001dfb3: add eax, edi; lea rbp, [rip + 0x33340]; movsxd rsi, dword ptr [rbp + rsi*4]; add rsi, rbp; jmp rsi; 
0x000000000004bea7: add eax, edi; mov esi, 0x5c; jmp rax; 
0x000000000001ea7d: add eax, edx; jmp rax; 
0x000000000003db40: add eax, edx; lea rdx, [rip + 0x16427]; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x000000000004d23d: add eax, edx; mov rcx, rsi; cmp rsi, rdi; jne 0x4d230; ret; 
0x000000000003f5a3: add eax, esi; mov qword ptr [rdi + 0x18], rax; ret; 
0x0000000000008726: add eax, esp; jmp rax; 
0x000000000002f096: add ebp, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000004be3f: add ebp, dword ptr [rsp]; mov rdi, rbx; mov rsi, rbp; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x000000000002f6a9: add ebx, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x0000000000019086: add ebx, dword ptr [rbx + 0x41]; pop rsi; pop r15; ret; 
0x00000000000465be: add ebx, eax; jmp rbx; 
0x000000000000bef1: add ebx, ebp; add eax, 0x72444c6; add cl, byte ptr [rdx + 0x59072444]; ret; 
0x0000000000015bcf: add ebx, ebp; cmp cl, byte ptr [rcx - 0x7d]; sal al, 0x84; ror byte ptr [rdi], 0x95; ret; 
0x000000000000a207: add ecx, 1; call 0xa230; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000a1d7: add ecx, 1; call 0xa250; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000002f455: add ecx, dword ptr [rax - 0x73]; adc eax, 0x35663; mov rax, rbx; add rsp, 0x50; pop rbx; ret; 
0x00000000000465b1: add ecx, dword ptr [rax - 0x73]; add eax, 0xe397; movsxd rbx, dword ptr [rax + r8*4]; add rbx, rax; jmp rbx; 
0x000000000002ba32: add ecx, dword ptr [rax - 0x73]; or eax, 0x25ec2; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x00000000000299f6: add ecx, dword ptr [rax - 0x73]; or eax, 0x27e4a; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000296d3: add ecx, dword ptr [rax - 0x73]; or eax, 0x2815d; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029481: add ecx, dword ptr [rax - 0x73]; or eax, 0x2839f; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029453: add ecx, dword ptr [rax - 0x73]; or eax, 0x283cd; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000020e7a: add ecx, dword ptr [rax - 0x77]; ret; 
0x000000000004d63a: add ecx, dword ptr [rax - 0x7d]; ret 0x4804; 
0x000000000001c2f1: add ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000046596: add ecx, dword ptr [rax - 0x7d]; rol dword ptr [rax + rcx*2], 0xff; ret 0xff49; 
0x0000000000034aa5: add ecx, dword ptr [rax - 1]; ret; 
0x000000000001cf23: add ecx, dword ptr [rcx + 0x4f890947]; or al, 0x48; add esp, 0x18; ret; 
0x0000000000046d87: add ecx, dword ptr [rcx - 1]; ret; 
0x0000000000019e71: add ecx, eax; jmp rcx; 
0x000000000004c2f3: add ecx, eax; mov edx, ebp; mov ebp, 0x110001; jmp rcx; 
0x000000000004c1a0: add ecx, eax; mov edx, r15d; jmp rcx; 
0x000000000001d985: add ecx, ebp; lea r8, [rip + 0x339ae]; movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x000000000001ed6c: add ecx, edx; jmp rcx; 
0x000000000004178a: add ecx, edx; neg r8; mov qword ptr [rdi], r9; mov qword ptr [rdi + 8], r8; pop rbx; ret; 
0x0000000000027514: add ecx, esi; jmp rcx; 
0x0000000000008b96: add ecx, esp; jmp rcx; 
0x000000000004ee72: add edi, -0x7f; cmp edi, 0x21; setb al; or al, cl; ret; 
0x000000000003f54f: add edi, 0x10; mov rax, rdi; pop rcx; ret; 
0x000000000000b663: add edi, 0x18; call 0xb6d0; add rsp, 0x18; ret; 
0x000000000000bc09: add edi, 0xa8; call 0xbd40; add rsp, 0x18; ret; 
0x000000000004e02e: add edi, 0xffef0000; cmp edi, 0xfffd01f0; setb al; pop rcx; ret; 
0x000000000000b9e3: add edi, 4; call 0xb7a0; pop rax; ret; 
0x000000000000b382: add edi, 8; call 0xb9f0; pop rax; ret; 
0x0000000000030a5a: add edi, 8; lea rsi, [rsp + 0xb0]; mov edx, 0xa8; call rbx; 
0x000000000004a028: add edi, dword ptr [rax + 0x75]; ret; 
0x000000000001d993: add edi, eax; jmp rdi; 
0x0000000000042e38: add edi, ebx; jmp rdi; 
0x000000000002fb28: add edi, ecx; jmp rdi; 
0x000000000000b2a2: add edi, esi; mov qword ptr [rsp], rdi; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x00000000000477e0: add edi, esi; ret; 
0x000000000003d360: add edx, -0x10; mov eax, 1; ret; 
0x000000000003d3a5: add edx, 0x10; mov eax, 1; ret; 
0x000000000003d3c7: add edx, 0x20; mov eax, 1; ret; 
0x000000000003c6d6: add edx, dword ptr [rdi + 0x10]; jae 0x3c6df; xor eax, eax; pop rbx; ret; 
0x000000000002c1f1: add edx, eax; jmp rdx; 
0x000000000003d389: add edx, eax; mov eax, 1; ret; 
0x000000000001e36f: add edx, ecx; jmp rdx; 
0x000000000003d371: add edx, ecx; mov eax, 1; ret; 
0x000000000002c2f4: add edx, esi; jmp rdx; 
0x00000000000071be: add esi, dword ptr [rbp - 0x51]; pop rbx; ret; 
0x0000000000009b20: add esi, dword ptr [rdi + 0x15]; mov rax, qword ptr [rsp + 0x20]; lea rcx, [rip + 0x464d1]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001dfc2: add esi, ebp; jmp rsi; 
0x000000000004bff4: add esi, ebp; sub r13, rbp; mov rdi, rbx; mov rdx, r13; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x000000000004c0ca: add esi, ecx; jmp rsi; 
0x000000000002343e: add esi, edi; jmp rsi; 
0x000000000003fc9b: add esi, edx; sub rcx, rdx; mov rax, rsi; mov rdx, rcx; pop rcx; ret; 
0x000000000002ca82: add esi, esp; jmp rsi; 
0x0000000000029b79: add esp, 0x100; pop rbx; pop r14; pop r15; jmp rcx; 
0x0000000000029e93: add esp, 0x100; pop rbx; pop r14; pop r15; ret; 
0x0000000000033220: add esp, 0x108; pop rbx; pop r14; ret; 
0x000000000000e014: add esp, 0x108; ret; 
0x0000000000011cae: add esp, 0x10; pop rbx; pop r14; pop r15; ret; 
0x0000000000015e07: add esp, 0x10; pop rbx; pop r14; pop rbp; ret; 
0x0000000000011546: add esp, 0x10; pop rbx; ret; 
0x000000000000a7b7: add esp, 0x10; ret; 
0x000000000002996c: add esp, 0x110; pop rbx; pop r14; pop r15; ret; 
0x000000000000b20a: add esp, 0x118; ret; 
0x000000000000cb2f: add esp, 0x128; ret; 
0x000000000000dbd6: add esp, 0x138; ret; 
0x000000000000d5db: add esp, 0x168; ret; 
0x0000000000034f12: add esp, 0x18; pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000003f415: add esp, 0x18; pop rbx; pop r14; ret; 
0x0000000000011e2b: add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000078be: add esp, 0x18; ret; 
0x000000000000c8f9: add esp, 0x1a8; ret; 
0x00000000000294c8: add esp, 0x1b0; pop rbx; ret; 
0x000000000000c0c1: add esp, 0x1b8; ret; 
0x000000000000cc2d: add esp, 0x1f8; ret; 
0x0000000000042093: add esp, 0x20; pop rbx; pop r14; pop rbp; ret; 
0x00000000000073ab: add esp, 0x20; pop rbx; ret; 
0x000000000000b17b: add esp, 0x20; ret; 
0x000000000000aea8: add esp, 0x238; ret; 
0x00000000000081eb: add esp, 0x28; pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000001a86b: add esp, 0x28; pop rbx; pop r14; ret; 
0x000000000003299c: add esp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000007df0: add esp, 0x28; ret; 
0x0000000000030aaa: add esp, 0x2e0; pop rbx; pop r14; pop r15; ret; 
0x000000000003624e: add esp, 0x30; pop rbx; pop r14; pop r15; ret; 
0x000000000004eaf1: add esp, 0x30; pop rbx; ret; 
0x000000000000b068: add esp, 0x30; ret; 
0x000000000000c650: add esp, 0x318; ret; 
0x0000000000007f6c: add esp, 0x38; pop rbx; pop r12; pop r14; pop r15; ret; 
0x0000000000007a90: add esp, 0x38; pop rbx; pop r14; ret; 
0x000000000000b029: add esp, 0x38; ret; 
0x000000000002b55c: add esp, 0x40; pop rbx; pop r14; pop r15; ret; 
0x0000000000045d3d: add esp, 0x40; pop rbx; ret; 
0x000000000000a8c7: add esp, 0x40; ret; 
0x0000000000049e6d: add esp, 0x48; pop rbx; pop r14; pop r15; pop rbp; ret; 
0x0000000000030f1e: add esp, 0x48; pop rbx; pop rbp; ret; 
0x000000000000ce76: add esp, 0x48; ret; 
0x000000000002e780: add esp, 0x50; pop rbx; pop r14; pop r15; ret; 
0x000000000002f461: add esp, 0x50; pop rbx; ret; 
0x000000000002a727: add esp, 0x58; pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000002f39f: add esp, 0x58; pop rbx; pop r14; ret; 
0x000000000000a325: add esp, 0x58; ret; 
0x000000000000f35f: add esp, 0x60; ret; 
0x0000000000045dfe: add esp, 0x68; pop rbx; pop r14; ret; 
0x000000000000a3f9: add esp, 0x68; ret; 
0x0000000000032e80: add esp, 0x70; pop rbx; ret; 
0x000000000002fc41: add esp, 0x78; pop rbx; pop r12; pop r14; pop r15; ret; 
0x0000000000030db0: add esp, 0x78; pop rbx; pop r14; pop r15; pop rbp; ret; 
0x00000000000348af: add esp, 0x78; pop rbx; pop rbp; ret; 
0x000000000000c1af: add esp, 0x78; ret; 
0x000000000002e2b5: add esp, 0x80; pop rbx; pop r14; pop r15; ret; 
0x0000000000010676: add esp, 0x80; ret; 
0x0000000000032904: add esp, 0x88; pop rbx; pop r14; ret; 
0x000000000000c3f9: add esp, 0x88; ret; 
0x000000000003f5fd: add esp, 0x98; pop rbx; pop r14; ret; 
0x000000000004c556: add esp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000009cac: add esp, 0x98; ret; 
0x000000000000a71b: add esp, 0xa8; ret; 
0x000000000002d491: add esp, 0xb0; pop rbx; pop r14; pop r15; ret; 
0x000000000002ad69: add esp, 0xb0; pop rbx; ret; 
0x000000000000d862: add esp, 0xb0; ret; 
0x000000000000fdd6: add esp, 0xb8; ret; 
0x000000000000aae5: add esp, 0xd8; ret; 
0x000000000000a1b4: add esp, 0xe8; ret; 
0x000000000000f4ae: add esp, 0xf8; ret; 
0x000000000001124b: add esp, 4; ret; 
0x000000000004b442: add esp, 8; pop rbx; pop r12; pop r14; pop r15; jmp rax; 
0x0000000000012069: add esp, 8; pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000002fb65: add esp, 8; pop rbx; pop r14; pop r15; pop rbp; ret; 
0x0000000000012123: add esp, 8; pop rbx; pop r14; ret; 
0x0000000000007013: add esp, 8; ret; 
0x000000000001ed3d: add esp, dword ptr [rdi]; add eax, dword ptr [rax]; movsxd rcx, dword ptr [r8 + rbp*4]; add rcx, r8; jmp rcx; 
0x000000000004f1d6: add esp, eax; leave; ret; 
0x000000000002da66: add qword ptr [rax], rax; add byte ptr [rax], al; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x000000000003f585: add qword ptr [rdi + 0x18], rsi; ret; 
0x000000000002f095: add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000001c1ff: add r8, qword ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000002ccf2: add r8b, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cb31: add r8d, dword ptr [r8]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cc69: add r8d, dword ptr [rax]; movsxd rax, dword ptr [r9 + rax*4]; add rax, r9; jmp rax; 
0x000000000001cb91: add r8d, dword ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001c2f0: add r9, qword ptr [r8 - 0x7d]; ret; 
0x0000000000041789: add r9, rdx; neg r8; mov qword ptr [rdi], r9; mov qword ptr [rdi + 8], r8; pop rbx; ret; 
0x0000000000012065: add rax, -0x3b7cb800; or byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; ret; 
0x0000000000011e25: add rax, 0x48e88900; add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000011f45: add rax, 0x5c415b00; pop r13; pop r14; pop r15; ret; 
0x00000000000121b3: add rax, 0x5e415b00; pop r15; ret; 
0x000000000001081e: add rax, 8; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x78; ret; 
0x000000000001c6f7: add rax, qword ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002342e: add rax, qword ptr [rdi + 0x60]; lea rdi, [rip + 0x2e1d3]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x0000000000008725: add rax, r12; jmp rax; 
0x000000000002c553: add rax, r13; jmp rax; 
0x000000000004bea6: add rax, r15; mov esi, 0x5c; jmp rax; 
0x000000000001d981: add rax, r8; add rcx, rbp; lea r8, [rip + 0x339ae]; movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x000000000001ab49: add rax, r9; jmp rax; 
0x000000000001c265: add rax, rbp; jmp rax; 
0x0000000000009b33: add rax, rcx; jmp rax; 
0x000000000000a448: add rax, rcx; mov qword ptr [rsp + 0x20], rax; mov rdi, qword ptr [rsp + 0x20]; call 0xb2c0; add rsp, 0x28; ret; 
0x000000000002261c: add rax, rcx; xor ebx, ebx; jmp rax; 
0x000000000004c33e: add rax, rcx; xor r12d, r12d; mov ebp, edx; jmp rax; 
0x000000000004bec4: add rax, rcx; xor r12d, r12d; mov r13d, r14d; jmp rax; 
0x000000000001c206: add rax, rdi; jmp rax; 
0x000000000001dfb2: add rax, rdi; lea rbp, [rip + 0x33340]; movsxd rsi, dword ptr [rbp + rsi*4]; add rsi, rbp; jmp rsi; 
0x000000000001ea7c: add rax, rdx; jmp rax; 
0x000000000003db3f: add rax, rdx; lea rdx, [rip + 0x16427]; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x000000000004d23c: add rax, rdx; mov rcx, rsi; cmp rsi, rdi; jne 0x4d230; ret; 
0x000000000003f5a2: add rax, rsi; mov qword ptr [rdi + 0x18], rax; ret; 
0x000000000004be3e: add rbp, qword ptr [rsp]; mov rdi, rbx; mov rsi, rbp; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x000000000002f6a8: add rbx, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x00000000000465bd: add rbx, rax; jmp rbx; 
0x000000000000a206: add rcx, 1; call 0xa230; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000a1d6: add rcx, 1; call 0xa250; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000008b95: add rcx, r12; jmp rcx; 
0x0000000000027513: add rcx, r14; jmp rcx; 
0x000000000001ed45: add rcx, r8; jmp rcx; 
0x0000000000019e70: add rcx, rax; jmp rcx; 
0x000000000004c2f2: add rcx, rax; mov edx, ebp; mov ebp, 0x110001; jmp rcx; 
0x000000000004c19f: add rcx, rax; mov edx, r15d; jmp rcx; 
0x000000000001d984: add rcx, rbp; lea r8, [rip + 0x339ae]; movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x000000000001ed6b: add rcx, rdx; jmp rcx; 
0x0000000000049fb7: add rcx, rsi; jmp rcx; 
0x000000000003f54e: add rdi, 0x10; mov rax, rdi; pop rcx; ret; 
0x000000000000b662: add rdi, 0x18; call 0xb6d0; add rsp, 0x18; ret; 
0x000000000000bc08: add rdi, 0xa8; call 0xbd40; add rsp, 0x18; ret; 
0x000000000000b9e2: add rdi, 4; call 0xb7a0; pop rax; ret; 
0x000000000000b381: add rdi, 8; call 0xb9f0; pop rax; ret; 
0x0000000000030a59: add rdi, 8; lea rsi, [rsp + 0xb0]; mov edx, 0xa8; call rbx; 
0x000000000001d992: add rdi, r8; jmp rdi; 
0x0000000000042e37: add rdi, rbx; jmp rdi; 
0x000000000002fb27: add rdi, rcx; jmp rdi; 
0x000000000000b2a1: add rdi, rsi; mov qword ptr [rsp], rdi; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000003d35f: add rdx, -0x10; mov eax, 1; ret; 
0x000000000003d3a4: add rdx, 0x10; mov eax, 1; ret; 
0x000000000003d3c6: add rdx, 0x20; mov eax, 1; ret; 
0x000000000003c6d5: add rdx, qword ptr [rdi + 0x10]; jae 0x3c6df; xor eax, eax; pop rbx; ret; 
0x000000000002c1f0: add rdx, r8; jmp rdx; 
0x000000000002c6c4: add rdx, rax; jmp rdx; 
0x000000000003d388: add rdx, rax; mov eax, 1; ret; 
0x000000000001e36e: add rdx, rcx; jmp rdx; 
0x000000000003d370: add rdx, rcx; mov eax, 1; ret; 
0x000000000002c2f3: add rdx, rsi; jmp rdx; 
0x000000000002ca81: add rsi, r12; jmp rsi; 
0x000000000001dfc1: add rsi, rbp; jmp rsi; 
0x000000000004bff3: add rsi, rbp; sub r13, rbp; mov rdi, rbx; mov rdx, r13; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x000000000004c0c9: add rsi, rcx; jmp rsi; 
0x000000000002343d: add rsi, rdi; jmp rsi; 
0x000000000003fc9a: add rsi, rdx; sub rcx, rdx; mov rax, rsi; mov rdx, rcx; pop rcx; ret; 
0x0000000000029b78: add rsp, 0x100; pop rbx; pop r14; pop r15; jmp rcx; 
0x0000000000029e92: add rsp, 0x100; pop rbx; pop r14; pop r15; ret; 
0x000000000003321f: add rsp, 0x108; pop rbx; pop r14; ret; 
0x000000000000e013: add rsp, 0x108; ret; 
0x0000000000011cad: add rsp, 0x10; pop rbx; pop r14; pop r15; ret; 
0x0000000000015e06: add rsp, 0x10; pop rbx; pop r14; pop rbp; ret; 
0x0000000000011545: add rsp, 0x10; pop rbx; ret; 
0x000000000000a7b6: add rsp, 0x10; ret; 
0x000000000002996b: add rsp, 0x110; pop rbx; pop r14; pop r15; ret; 
0x000000000000b209: add rsp, 0x118; ret; 
0x000000000000cb2e: add rsp, 0x128; ret; 
0x000000000000dbd5: add rsp, 0x138; ret; 
0x000000000000d5da: add rsp, 0x168; ret; 
0x0000000000028c11: add rsp, 0x18; pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000003f414: add rsp, 0x18; pop rbx; pop r14; ret; 
0x0000000000011e2a: add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000078bd: add rsp, 0x18; ret; 
0x000000000000c8f8: add rsp, 0x1a8; ret; 
0x00000000000294c7: add rsp, 0x1b0; pop rbx; ret; 
0x000000000000c0c0: add rsp, 0x1b8; ret; 
0x000000000000cc2c: add rsp, 0x1f8; ret; 
0x0000000000042092: add rsp, 0x20; pop rbx; pop r14; pop rbp; ret; 
0x00000000000073aa: add rsp, 0x20; pop rbx; ret; 
0x000000000000b17a: add rsp, 0x20; ret; 
0x000000000000aea7: add rsp, 0x238; ret; 
0x00000000000081ea: add rsp, 0x28; pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000001a86a: add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000003299b: add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000007def: add rsp, 0x28; ret; 
0x0000000000030aa9: add rsp, 0x2e0; pop rbx; pop r14; pop r15; ret; 
0x000000000003624d: add rsp, 0x30; pop rbx; pop r14; pop r15; ret; 
0x000000000004eaf0: add rsp, 0x30; pop rbx; ret; 
0x000000000000b067: add rsp, 0x30; ret; 
0x000000000000c64f: add rsp, 0x318; ret; 
0x0000000000007f6b: add rsp, 0x38; pop rbx; pop r12; pop r14; pop r15; ret; 
0x0000000000007a8f: add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000000b028: add rsp, 0x38; ret; 
0x000000000002b55b: add rsp, 0x40; pop rbx; pop r14; pop r15; ret; 
0x0000000000045d3c: add rsp, 0x40; pop rbx; ret; 
0x000000000000a8c6: add rsp, 0x40; ret; 
0x0000000000049e6c: add rsp, 0x48; pop rbx; pop r14; pop r15; pop rbp; ret; 
0x0000000000030f1d: add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000000ce75: add rsp, 0x48; ret; 
0x000000000002e77f: add rsp, 0x50; pop rbx; pop r14; pop r15; ret; 
0x000000000002f460: add rsp, 0x50; pop rbx; ret; 
0x000000000002a726: add rsp, 0x58; pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000002f39e: add rsp, 0x58; pop rbx; pop r14; ret; 
0x000000000000a324: add rsp, 0x58; ret; 
0x000000000000f35e: add rsp, 0x60; ret; 
0x0000000000045dfd: add rsp, 0x68; pop rbx; pop r14; ret; 
0x000000000000a3f8: add rsp, 0x68; ret; 
0x0000000000032e7f: add rsp, 0x70; pop rbx; ret; 
0x000000000002fc40: add rsp, 0x78; pop rbx; pop r12; pop r14; pop r15; ret; 
0x0000000000030daf: add rsp, 0x78; pop rbx; pop r14; pop r15; pop rbp; ret; 
0x00000000000348ae: add rsp, 0x78; pop rbx; pop rbp; ret; 
0x000000000000c1ae: add rsp, 0x78; ret; 
0x000000000002e2b4: add rsp, 0x80; pop rbx; pop r14; pop r15; ret; 
0x0000000000010675: add rsp, 0x80; ret; 
0x0000000000032903: add rsp, 0x88; pop rbx; pop r14; ret; 
0x000000000000c3f8: add rsp, 0x88; ret; 
0x000000000003f5fc: add rsp, 0x98; pop rbx; pop r14; ret; 
0x000000000004c555: add rsp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000009cab: add rsp, 0x98; ret; 
0x000000000000a71a: add rsp, 0xa8; ret; 
0x000000000002d490: add rsp, 0xb0; pop rbx; pop r14; pop r15; ret; 
0x000000000002ad68: add rsp, 0xb0; pop rbx; ret; 
0x000000000000d861: add rsp, 0xb0; ret; 
0x000000000000fdd5: add rsp, 0xb8; ret; 
0x000000000000aae4: add rsp, 0xd8; ret; 
0x000000000000a1b3: add rsp, 0xe8; ret; 
0x000000000000f4ad: add rsp, 0xf8; ret; 
0x000000000001124a: add rsp, 4; ret; 
0x000000000004b441: add rsp, 8; pop rbx; pop r12; pop r14; pop r15; jmp rax; 
0x0000000000012068: add rsp, 8; pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000002fb64: add rsp, 8; pop rbx; pop r14; pop r15; pop rbp; ret; 
0x0000000000012122: add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000007012: add rsp, 8; ret; 
0x000000000004f1d5: add rsp, rax; leave; ret; 
0x000000000004adc6: add word ptr [rax], ax; add byte ptr [rcx - 0x75], cl; pop rdi; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000014fe2: add word ptr [rax], ax; pop rcx; ret; 
0x000000000001c892: and al, 0; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x00000000000156bd: and al, 0; add dword ptr [rax], eax; add al, ch; leave; sbb edi, edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000116d8: and al, 0; ret; 
0x000000000000b207: and al, 0x10; add rsp, 0x118; ret; 
0x000000000000a496: and al, 0x10; add rsp, 0x18; ret; 
0x0000000000010cdb: and al, 0x10; add rsp, 0x20; ret; 
0x000000000000a52c: and al, 0x10; add rsp, 0x28; ret; 
0x000000000000b065: and al, 0x10; add rsp, 0x30; ret; 
0x000000000000d3d0: and al, 0x10; add rsp, 0x38; ret; 
0x000000000000fad4: and al, 0x10; add rsp, 0x40; ret; 
0x000000000000fc5f: and al, 0x10; add rsp, 0x48; ret; 
0x000000000000a91b: and al, 0x10; add rsp, 0x58; ret; 
0x000000000000fdd3: and al, 0x10; add rsp, 0xb8; ret; 
0x000000000000ff83: and al, 0x10; add rsp, 0xe8; ret; 
0x0000000000011045: and al, 0x10; call 0x101b0; add rsp, 0x18; ret; 
0x000000000000a98b: and al, 0x10; call 0x105b0; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000028176: and al, 0x10; call 0x86c0; add rsp, 0x18; ret; 
0x0000000000007e67: and al, 0x10; call 0x8b30; add rsp, 0x28; ret; 
0x0000000000007e17: and al, 0x10; call 0x8ff0; add rsp, 0x28; ret; 
0x000000000000b306: and al, 0x10; call 0xfc70; add rsp, 0x18; ret; 
0x000000000004ad05: and al, 0x10; call qword ptr [rip + 0x1c20b]; add rsp, 0x48; ret; 
0x000000000003fe45: and al, 0x10; call qword ptr [rip + 0x270cb]; add rsp, 0x48; ret; 
0x0000000000015245: and al, 0x10; call qword ptr [rip + 0x51ccb]; add rsp, 0x48; ret; 
0x00000000000151f5: and al, 0x10; call qword ptr [rip + 0x51d1b]; add rsp, 0x48; ret; 
0x00000000000151a5: and al, 0x10; call qword ptr [rip + 0x51d6b]; add rsp, 0x48; ret; 
0x0000000000015155: and al, 0x10; call qword ptr [rip + 0x51dbb]; add rsp, 0x48; ret; 
0x0000000000011d82: and al, 0x10; call qword ptr [rip + 0x5518e]; add rsp, 0x48; ret; 
0x0000000000011d42: and al, 0x10; call qword ptr [rip + 0x551ce]; add rsp, 0x48; ret; 
0x0000000000011d02: and al, 0x10; call qword ptr [rip + 0x5520e]; add rsp, 0x48; ret; 
0x000000000000e592: and al, 0x10; call qword ptr [rip + 0x586fe]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000d459: and al, 0x10; call qword ptr [rip + 0x59467]; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000cf27: and al, 0x10; call rax; 
0x00000000000111e3: and al, 0x10; lea rax, [rip - 0x77fc]; xor edx, edx; call rax; 
0x000000000002ba91: and al, 0x10; lea rbp, [r14 - 1]; mov rdi, qword ptr [r14 - 1]; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x0000000000028171: and al, 0x10; lea rdi, [rsp + 0x10]; call 0x86c0; add rsp, 0x18; ret; 
0x0000000000007e62: and al, 0x10; lea rdi, [rsp + 0x10]; call 0x8b30; add rsp, 0x28; ret; 
0x00000000000103f3: and al, 0x10; lea rdx, [rip + 0x535ec]; lea rax, [rip - 0x6e63]; mov esi, 0x100; call rax; 
0x000000000000e30c: and al, 0x10; lea rdx, [rip + 0x5565b]; lea rax, [rip - 0x4d7c]; call rax; 
0x000000000004a549: and al, 0x10; lea rsi, [rip + 0xa76e]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x00000000000106f5: and al, 0x10; mov edx, 0x30; call 0x7078; mov rax, qword ptr [rsp + 8]; add rsp, 0x58; ret; 
0x000000000000d038: and al, 0x10; mov edx, 0x38; call 0x7078; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x0000000000049c66: and al, 0x10; mov edx, 8; mov rdi, rax; call qword ptr [rip + 0x1d22a]; add rsp, 0x18; ret; 
0x000000000000b246: and al, 0x10; mov esi, eax; call qword ptr [rip + 0x5b5a0]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000b286: and al, 0x10; mov esi, eax; call qword ptr [rip + 0x5b8a0]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000d5cb: and al, 0x10; mov qword ptr [rax + 0x40], 0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x168; ret; 
0x000000000000d41a: and al, 0x10; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000000b169: and al, 0x10; mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x000000000002da5b: and al, 0x10; mov qword ptr [rsp + 0x40], rcx; mov qword ptr [rsp + 0x48], 1; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x0000000000010012: and al, 0x10; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000d30d: and al, 0x10; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000a810: and al, 0x10; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000030132: and al, 0x10; mov qword ptr [rsp], rsi; call qword ptr [rax + 0x20]; 
0x0000000000010cd6: and al, 0x10; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x20; ret; 
0x000000000000d3cb: and al, 0x10; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000001000d: and al, 0x10; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000d308: and al, 0x10; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000f24f: and al, 0x10; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000004aa5b: and al, 0x10; mov rax, qword ptr [rsp + 0x18]; lea rsi, [rip + 0xa8ac]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a8c0: and al, 0x10; mov rax, qword ptr [rsp + 0x18]; lea rsi, [rip + 0xaa47]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000000ce2f: and al, 0x10; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x000000000004a432: and al, 0x10; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000000d481: and al, 0x10; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000a522: and al, 0x10; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000000b135: and al, 0x10; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x30; ret; 
0x0000000000032e7a: and al, 0x10; mov rax, rbx; add rsp, 0x70; pop rbx; ret; 
0x0000000000034d60: and al, 0x10; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x00000000000102b8: and al, 0x10; mov rdi, qword ptr [rsp + 0x18]; lea rax, [rip - 0x6e66]; call rax; 
0x000000000000b2fc: and al, 0x10; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [rsp + 0x10]; call 0xfc70; add rsp, 0x18; ret; 
0x000000000000b173: and al, 0x10; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x000000000000f254: and al, 0x10; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000004b3b2: and al, 0x10; mov rdx, qword ptr [rsp + 0x20]; call qword ptr [rbp + 0x18]; 
0x000000000004b38a: and al, 0x10; mov rdx, r15; call qword ptr [rbx + 0x18]; 
0x000000000004af54: and al, 0x10; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000004af02: and al, 0x10; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000004adf0: and al, 0x10; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000000b01c: and al, 0x10; mov rsi, qword ptr [rsp + 0x18]; call 0xb490; add rsp, 0x38; ret; 
0x000000000004ee01: and al, 0x10; movaps xmmword ptr [rsp], xmm0; mov rdx, rsp; call qword ptr [rip + 0x18108]; add rsp, 0x38; ret; 
0x000000000004b8f4: and al, 0x10; shr al, 4; ret; 
0x00000000000100ef: and al, 0x17; add dword ptr [rbp + 9], esi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x000000000000fc9f: and al, 0x17; add rsp, 0x18; ret; 
0x000000000000fc9a: and al, 0x17; dec dword ptr [rdx + 0x48172444]; add esp, 0x18; ret; 
0x000000000000d5d8: and al, 0x18; add rsp, 0x168; ret; 
0x000000000000b178: and al, 0x18; add rsp, 0x20; ret; 
0x000000000000d047: and al, 0x18; add rsp, 0x38; ret; 
0x000000000000a8c4: and al, 0x18; add rsp, 0x40; ret; 
0x000000000000e444: and al, 0x18; add rsp, 0x48; ret; 
0x000000000000a322: and al, 0x18; add rsp, 0x58; ret; 
0x000000000000a3f6: and al, 0x18; add rsp, 0x68; ret; 
0x000000000000b021: and al, 0x18; call 0xb490; add rsp, 0x38; ret; 
0x000000000000b0b1: and al, 0x18; call 0xb7d0; add rsp, 0x38; ret; 
0x00000000000102bd: and al, 0x18; lea rax, [rip - 0x6e66]; call rax; 
0x000000000004aa60: and al, 0x18; lea rsi, [rip + 0xa8ac]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a8c5: and al, 0x18; lea rsi, [rip + 0xaa47]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a42b: and al, 0x18; mov byte ptr [rcx], al; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000002557e: and al, 0x18; mov edi, 0x100; mov esi, 8; call rbx; 
0x000000000000fc50: and al, 0x18; mov edx, 0x28; call 0x7078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x0000000000010dca: and al, 0x18; mov edx, dword ptr [rsp + 0x1c]; add rsp, 0x38; ret; 
0x000000000000d915: and al, 0x18; mov qword ptr [rcx], rdx; add rsp, 0x38; ret; 
0x0000000000007e5d: and al, 0x18; mov qword ptr [rsp + 0x10], rax; lea rdi, [rsp + 0x10]; call 0x8b30; add rsp, 0x28; ret; 
0x0000000000010cd1: and al, 0x18; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x20; ret; 
0x000000000000f24a: and al, 0x18; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000000b16e: and al, 0x18; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x0000000000010ccc: and al, 0x18; mov rax, qword ptr [rsp + 0x18]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x20; ret; 
0x000000000000b056: and al, 0x18; mov rax, qword ptr [rsp + 0x20]; mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; add rsp, 0x30; ret; 
0x000000000000fb1a: and al, 0x18; mov rcx, qword ptr [rsp + 0x20]; call 0xf080; add rsp, 0x28; ret; 
0x000000000004e04b: and al, 0x18; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x7c22]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x00000000000111de: and al, 0x18; mov rdi, qword ptr [rsp + 0x10]; lea rax, [rip - 0x77fc]; xor edx, edx; call rax; 
0x000000000000d910: and al, 0x18; mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rcx], rdx; add rsp, 0x38; ret; 
0x00000000000113af: and al, 0x18; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x38; ret; 
0x000000000000b1d9: and al, 0x18; mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x26149]; lea rdi, [rsp + 0x38]; call rax; 
0x0000000000010dce: and al, 0x1c; add rsp, 0x38; ret; 
0x000000000000fe85: and al, 0x1f; and al, 1; movzx eax, al; add rsp, 0x48; ret; 
0x0000000000039f2d: and al, 0x20; add al, 0; add byte ptr [rax - 0x75], cl; and al, 8; call qword ptr [rax + 0x20]; 
0x000000000002549c: and al, 0x20; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 - 0x7d], r9b; ret 0x4de0; 
0x000000000000d963: and al, 0x20; add rsp, 0x28; ret; 
0x00000000000113b4: and al, 0x20; add rsp, 0x38; ret; 
0x000000000000d737: and al, 0x20; add rsp, 0x58; ret; 
0x000000000000a718: and al, 0x20; add rsp, 0xa8; ret; 
0x000000000000a453: and al, 0x20; call 0xb2c0; add rsp, 0x28; ret; 
0x000000000001127a: and al, 0x20; call 0xd370; add rsp, 0x28; ret; 
0x000000000000fb1f: and al, 0x20; call 0xf080; add rsp, 0x28; ret; 
0x000000000004b3b7: and al, 0x20; call qword ptr [rbp + 0x18]; 
0x000000000000d07c: and al, 0x20; call rax; 
0x000000000000c478: and al, 0x20; lea rax, [rip + 0x1e81f]; mov qword ptr [rsp + 0x70], rax; call rax; 
0x000000000000b1de: and al, 0x20; lea rax, [rip + 0x26149]; lea rdi, [rsp + 0x38]; call rax; 
0x0000000000009b26: and al, 0x20; lea rcx, [rip + 0x464d1]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001133a: and al, 0x20; mov dword ptr [rsp + 0x28], eax; mov rax, qword ptr [rsp + 0x20]; mov edx, dword ptr [rsp + 0x28]; add rsp, 0x48; ret; 
0x000000000001021d: and al, 0x20; mov edx, dword ptr [rsp + 0x28]; add rsp, 0x38; ret; 
0x0000000000011343: and al, 0x20; mov edx, dword ptr [rsp + 0x28]; add rsp, 0x48; ret; 
0x000000000000b05b: and al, 0x20; mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; add rsp, 0x30; ret; 
0x000000000001ea69: and al, 0x20; mov r12d, 0x2f; lea rdx, [rip + 0x3299c]; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x000000000000d95e: and al, 0x20; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x28; ret; 
0x0000000000030a3f: and al, 0x20; mov rbx, qword ptr [rip + 0x36170]; mov edx, 0x90; call rbx; 
0x000000000004e2cd: and al, 0x20; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x79cf]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000000a44e: and al, 0x20; mov rdi, qword ptr [rsp + 0x20]; call 0xb2c0; add rsp, 0x28; ret; 
0x000000000002da6e: and al, 0x20; mov rdi, r14; call rax; 
0x000000000000ecd4: and al, 0x20; mov rdx, qword ptr [rsp + 0x28]; add rsp, 0x98; ret; 
0x000000000004b904: and al, 0x20; shr al, 5; ret; 
0x000000000000ce8b: and al, 0x21; mov byte ptr [rsp + 0x37], al; lea rcx, [rip + 0x56a20]; lea rax, [rip - 0x368f]; lea rdx, [rsp + 0x37]; call rax; 
0x000000000004be3c: and al, 0x24; add rbp, qword ptr [rsp]; mov rdi, rbx; mov rsi, rbp; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x000000000000ce73: and al, 0x24; add rsp, 0x48; ret; 
0x00000000000102cc: and al, 0x27; add rsp, 0x28; ret; 
0x000000000001038c: and al, 0x27; and al, 1; movzx eax, al; add rsp, 0x28; ret; 
0x0000000000010388: and al, 0x27; mov al, byte ptr [rsp + 0x27]; and al, 1; movzx eax, al; add rsp, 0x28; ret; 
0x000000000000aea5: and al, 0x28; add rsp, 0x238; ret; 
0x0000000000010221: and al, 0x28; add rsp, 0x38; ret; 
0x0000000000011347: and al, 0x28; add rsp, 0x48; ret; 
0x000000000000f77b: and al, 0x28; add rsp, 0x68; ret; 
0x000000000000c2bc: and al, 0x28; add rsp, 0x78; ret; 
0x000000000000ecd9: and al, 0x28; add rsp, 0x98; ret; 
0x000000000000b530: and al, 0x28; call 0x7060; ud2; lea rax, [rip - 0x1f20]; call rax; 
0x000000000000b870: and al, 0x28; call 0x7060; ud2; lea rax, [rip - 0x2260]; call rax; 
0x000000000000c4a9: and al, 0x28; call 0xcca0; mov rdi, qword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000004be4b: and al, 0x28; call qword ptr [rax + 0x18]; 
0x000000000000c8f0: and al, 0x28; call qword ptr [rip + 0x5a0e8]; add rsp, 0x1a8; ret; 
0x000000000000f66f: and al, 0x28; lea rax, [rip - 0x6228]; call rax; 
0x000000000000c1ec: and al, 0x28; lea rdi, [rsp + 0x38]; call 0xd3e0; lea rax, [rip + 0x1e051]; call rax; 
0x000000000000e196: and al, 0x28; lea rdx, [rip + 0x557b9]; lea rax, [rip - 0x4c06]; call rax; 
0x00000000000110a2: and al, 0x28; mov dword ptr [rsp + 0x30], edx; mov rax, qword ptr [rsp + 0x28]; mov edx, dword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x00000000000110ab: and al, 0x28; mov edx, dword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x000000000000f2e1: and al, 0x28; mov qword ptr [rsp + 0x30], rax; mov rax, qword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x58; ret; 
0x000000000000f0be: and al, 0x28; mov qword ptr [rsp + 0x30], rax; mov rdx, qword ptr [rsp + 0x30]; call qword ptr [rip + 0x579b0]; add rsp, 0x38; ret; 
0x000000000004bc61: and al, 0x28; mov rax, qword ptr [rax + 0x20]; mov rdi, rbx; mov esi, 0x22; mov qword ptr [rsp + 0x38], rax; call rax; 
0x000000000001133e: and al, 0x28; mov rax, qword ptr [rsp + 0x20]; mov edx, dword ptr [rsp + 0x28]; add rsp, 0x48; ret; 
0x000000000004a71a: and al, 0x28; mov rax, qword ptr [rsp + 0x30]; lea rsi, [rip + 0xabed]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000000c4b3: and al, 0x28; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000002ec2c: and al, 0x28; mov rdi, r15; call qword ptr [rip + 0x37bc9]; mov rbx, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000004a702: and al, 0x28; mov rdi, r15; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x00000000000111f5: and al, 0x28; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x000000000000f2eb: and al, 0x28; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x58; ret; 
0x00000000000105a2: and al, 0x28; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x68; ret; 
0x000000000000d8cc: and al, 0x28; movups xmmword ptr [rcx], xmm0; add rsp, 0x58; ret; 
0x00000000000122d8: and al, 0x30; add al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret; 
0x00000000000110af: and al, 0x30; add rsp, 0x38; ret; 
0x000000000000de53: and al, 0x30; add rsp, 0x58; ret; 
0x00000000000105a7: and al, 0x30; add rsp, 0x68; ret; 
0x000000000000c4dd: and al, 0x30; call 0xcca0; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000f0c8: and al, 0x30; call qword ptr [rip + 0x579b0]; add rsp, 0x38; ret; 
0x000000000000d3c0: and al, 0x30; call qword ptr [rip + 0x596e8]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000000e165: and al, 0x30; lea rdx, [rip + 0x557d2]; lea rax, [rip - 0x4bd5]; call rax; 
0x000000000004a71f: and al, 0x30; lea rsi, [rip + 0xabed]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000000da0b: and al, 0x30; mov qword ptr [rax + 0x10], rcx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000001088f: and al, 0x30; mov qword ptr [rdi + 0x30], rcx; mov rcx, qword ptr [rsp + 0x38]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x00000000000110a6: and al, 0x30; mov rax, qword ptr [rsp + 0x28]; mov edx, dword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x000000000000f2e6: and al, 0x30; mov rax, qword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x58; ret; 
0x000000000000c4e7: and al, 0x30; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000f66a: and al, 0x30; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip - 0x6228]; call rax; 
0x000000000000f0c3: and al, 0x30; mov rdx, qword ptr [rsp + 0x30]; call qword ptr [rip + 0x579b0]; add rsp, 0x38; ret; 
0x000000000000d8c7: and al, 0x30; movups xmm0, xmmword ptr [rsp + 0x28]; movups xmmword ptr [rcx], xmm0; add rsp, 0x58; ret; 
0x0000000000021d41: and al, 0x30; shl rsi, 4; mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x10916]; call rbx; 
0x000000000000a557: and al, 0x31; ror byte ptr [rcx - 0x330173f], 0xff; dec dword ptr [rax - 0x75]; add al, 0x24; pop rcx; ret; 
0x0000000000010215: and al, 0x37; add dword ptr [rbp + 0xe], esi; mov rax, qword ptr [rsp + 0x20]; mov edx, dword ptr [rsp + 0x28]; add rsp, 0x38; ret; 
0x000000000000cea2: and al, 0x37; call rax; 
0x000000000000ce8f: and al, 0x37; lea rcx, [rip + 0x56a20]; lea rax, [rip - 0x368f]; lea rdx, [rsp + 0x37]; call rax; 
0x0000000000037250: and al, 0x38; add al, 0; add byte ptr [rcx], dh; rol byte ptr [rax + 0xf084979], cl; xchg eax, esp; ret 0x8b48; 
0x0000000000009ca9: and al, 0x38; add rsp, 0x98; ret; 
0x000000000000a911: and al, 0x38; call 0xa570; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x000000000000c3ed: and al, 0x38; call 0xb690; mov al, byte ptr [rsp + 3]; add rsp, 0x88; ret; 
0x000000000000c2b2: and al, 0x38; call 0xb690; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x78; ret; 
0x000000000000c511: and al, 0x38; call 0xcca0; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c2ea: and al, 0x38; call 0xd3e0; lea rax, [rip + 0x1df58]; call rax; 
0x000000000000c1f1: and al, 0x38; call 0xd3e0; lea rax, [rip + 0x1e051]; call rax; 
0x000000000004a183: and al, 0x38; call qword ptr [rip + 0x1cd8d]; add rsp, 0x68; ret; 
0x000000000000b1ea: and al, 0x38; call rax; 
0x0000000000034cb5: and al, 0x38; call rbx; 
0x000000000000b1f8: and al, 0x38; mov edx, 0xd0; call 0x7078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x000000000000d85b: and al, 0x38; mov qword ptr [rcx + 0x18], rdx; add rsp, 0xb0; ret; 
0x0000000000010898: and al, 0x38; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x000000000000d2af: and al, 0x38; mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsp + 0x40]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x58; ret; 
0x000000000000c51b: and al, 0x38; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x00000000000399d6: and al, 0x40; add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret; 
0x000000000000c545: and al, 0x40; call 0xcca0; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000002f825: and al, 0x40; call qword ptr [rax + 0x28]; 
0x000000000000d2b8: and al, 0x40; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x58; ret; 
0x000000000002da60: and al, 0x40; mov qword ptr [rsp + 0x48], 1; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x000000000002f813: and al, 0x40; mov qword ptr [rsp + 0x48], rdx; mov rdi, qword ptr [rbx + 0x10]; mov rax, qword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x000000000000c54f: and al, 0x40; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000e307: and al, 0x40; mov rdi, qword ptr [rsp + 0x10]; lea rdx, [rip + 0x5565b]; lea rax, [rip - 0x4d7c]; call rax; 
0x000000000000e160: and al, 0x40; mov rdi, qword ptr [rsp + 0x30]; lea rdx, [rip + 0x557d2]; lea rax, [rip - 0x4bd5]; call rax; 
0x0000000000034cab: and al, 0x40; mov rdi, rbp; xor esi, esi; mov rdx, qword ptr [rsp + 0x38]; call rbx; 
0x000000000002da65: and al, 0x48; add dword ptr [rax], eax; add byte ptr [rax], al; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x000000000001081d: and al, 0x48; add eax, 8; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x78; ret; 
0x000000000004be3d: and al, 0x48; add ebp, dword ptr [rsp]; mov rdi, rbx; mov rsi, rbp; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x000000000000b661: and al, 0x48; add edi, 0x18; call 0xb6d0; add rsp, 0x18; ret; 
0x000000000000bc07: and al, 0x48; add edi, 0xa8; call 0xbd40; add rsp, 0x18; ret; 
0x000000000000b9e1: and al, 0x48; add edi, 4; call 0xb7a0; pop rax; ret; 
0x000000000000b380: and al, 0x48; add edi, 8; call 0xb9f0; pop rax; ret; 
0x0000000000009fef: and al, 0x48; add esp, 0x18; ret; 
0x000000000000a995: and al, 0x48; add esp, 0x28; ret; 
0x000000000000ce74: and al, 0x48; add esp, 0x48; ret; 
0x0000000000011249: and al, 0x48; add esp, 4; ret; 
0x000000000000e789: and al, 0x48; add rsp, 0xd8; ret; 
0x000000000000c579: and al, 0x48; call 0xcca0; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000dcbf: and al, 0x48; call 0xd4a0; mov rdi, rsp; call 0xb410; add rsp, 0xa8; ret; 
0x000000000000c16d: and al, 0x48; lea eax, [rip + 0x1eb2b]; call rax; 
0x0000000000010a2b: and al, 0x48; mov dword ptr [rax + 8], 0; mov rax, qword ptr [rsp + 8]; add rsp, 0x138; ret; 
0x000000000000cc82: and al, 0x48; mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000110eb: and al, 0x48; mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000d34f: and al, 0x48; mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000000a7a7: and al, 0x48; mov dword ptr [rsp + 8], esi; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000000cf86: and al, 0x48; mov eax, dword ptr [rax + 8]; add rsp, 0x28; ret; 
0x0000000000009feb: and al, 0x48; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000010c87: and al, 0x48; mov eax, dword ptr [rsp]; mov byte ptr [rax], 0; pop rax; ret; 
0x000000000000b2a7: and al, 0x48; mov eax, dword ptr [rsp]; pop rcx; ret; 
0x000000000001d35a: and al, 0x48; mov ecx, dword ptr [rsp + 7]; mov qword ptr [rdi + 1], rax; mov qword ptr [rdi + 8], rcx; add rsp, 0x20; ret; 
0x000000000000ba23: and al, 0x48; mov edi, dword ptr [rax]; call 0xeda0; add rsp, 0x18; ret; 
0x000000000000b39a: and al, 0x48; mov edi, dword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax]; call rax; 
0x000000000000b92b: and al, 0x48; mov edi, dword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xecf0; add rsp, 0x18; ret; 
0x000000000000b94b: and al, 0x48; mov edi, dword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xee50; add rsp, 0x18; ret; 
0x000000000000b45e: and al, 0x48; mov edi, dword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xef00; add rsp, 0x18; ret; 
0x000000000000b3ce: and al, 0x48; mov edi, dword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xefc0; add rsp, 0x18; ret; 
0x000000000004be41: and al, 0x48; mov edi, ebx; mov rsi, rbp; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x000000000002a484: and al, 0x48; mov edi, esp; call qword ptr [rip + 0x3c7a2]; pop rcx; ret; 
0x000000000000a7b0: and al, 0x48; mov edx, dword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000000a81a: and al, 0x48; mov edx, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000cc8b: and al, 0x48; mov edx, dword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000110f4: and al, 0x48; mov edx, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000d358: and al, 0x48; mov edx, dword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000004ee06: and al, 0x48; mov edx, esp; call qword ptr [rip + 0x18108]; add rsp, 0x38; ret; 
0x000000000004ad53: and al, 0x48; mov edx, esp; mov rdi, rax; call qword ptr [rip + 0x1c1b8]; add rsp, 0x38; ret; 
0x000000000000aad6: and al, 0x48; mov esi, eax; call 0xa8d0; mov rax, qword ptr [rsp + 8]; add rsp, 0xd8; ret; 
0x000000000000c583: and al, 0x48; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000002f818: and al, 0x48; mov rdi, qword ptr [rbx + 0x10]; mov rax, qword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x000000000004a800: and al, 0x49; mov eax, dword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000004a825: and al, 0x49; mov eax, dword ptr [rsp + 8]; lea rsi, [rip + 0xaaed]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000038eb6: and al, 0x50; add eax, 0x8d480000; sbb eax, 0xfffd856e; call rbx; 
0x000000000002342c: and al, 0x50; add rax, qword ptr [rdi + 0x60]; lea rdi, [rip + 0x2e1d3]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000000a1b1: and al, 0x50; add rsp, 0xe8; ret; 
0x000000000000c23b: and al, 0x50; lea rsi, [rsp + 0x60]; lea rdx, [rsp + 0x38]; call rax; 
0x000000000000e9f2: and al, 0x50; mov qword ptr [rcx + 0x20], rdx; add rsp, 0x88; ret; 
0x0000000000010666: and al, 0x50; mov qword ptr [rdi + 0x30], rcx; mov rcx, qword ptr [rsp + 0x58]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x80; ret; 
0x000000000004b95d: and al, 0x50; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000000e191: and al, 0x50; mov rdi, qword ptr [rsp + 0x28]; lea rdx, [rip + 0x557b9]; lea rax, [rip - 0x4c06]; call rax; 
0x000000000000e338: and al, 0x50; mov rdi, qword ptr [rsp + 8]; lea rdx, [rip + 0x55642]; lea rax, [rip - 0x4dad]; call rax; 
0x0000000000010194: and al, 0x57; add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x0000000000038ec7: and al, 0x58; mov edi, 0x100; mov esi, 8; call rbx; 
0x000000000001066f: and al, 0x58; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x80; ret; 
0x000000000000a1e2: and al, 0x59; ret; 
0x000000000000c22f: and al, 0x60; lea rax, [rip + 0x1e048]; lea rdi, [rsp + 0x50]; lea rsi, [rsp + 0x60]; lea rdx, [rsp + 0x38]; call rax; 
0x000000000000c240: and al, 0x60; lea rdx, [rsp + 0x38]; call rax; 
0x000000000000e003: and al, 0x60; mov rsi, qword ptr [rax + 0x28]; call 0xe900; mov rax, qword ptr [rsp + 0x70]; add rsp, 0x108; ret; 
0x000000000002859e: and al, 0x60; mov rsi, rax; call qword ptr [rip + 0x3e3cf]; mov rdi, qword ptr [rsp + 0x110]; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x000000000000c690: and al, 0x68; add al, byte ptr [rax]; add byte ptr [rdx + 1], bh; mov ecx, 0x4a; call rax; 
0x000000000001fc44: and al, 0x68; add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x33], cl; call rbx; 
0x000000000000c5ad: and al, 0x68; call 0xcca0; mov rdi, qword ptr [rsp + 0x68]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x00000000000333dc: and al, 0x68; mov qword ptr [rbx + 0x90], rax; add rsp, 0x108; pop rbx; pop r14; ret; 
0x000000000000c5b7: and al, 0x68; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000e011: and al, 0x70; add rsp, 0x108; ret; 
0x000000000000c484: and al, 0x70; call rax; 
0x000000000000d1a9: and al, 0x70; mov qword ptr [rsp + 0x78], rdx; mov rdx, qword ptr [rsp + 0x78]; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x98; ret; 
0x000000000001fdfa: and al, 0x78; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rsi; inc byte ptr [rbp + 0x31]; jmp qword ptr [rsi + 0x2e]; 
0x000000000000d1b3: and al, 0x78; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x98; ret; 
0x000000000000d1ae: and al, 0x78; mov rdx, qword ptr [rsp + 0x78]; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x98; ret; 
0x000000000000f4a3: and al, 0x78; mov rdx, qword ptr [rsp + 0x80]; add rsp, 0xf8; ret; 
0x000000000003bad4: and al, 0x80; add al, byte ptr [rax]; add al, ch; ret 0xfd6e; 
0x000000000003a1eb: and al, 0x80; add dword ptr [rax], eax; add byte ptr [rbp - 0x7b], cl; fisttp dword ptr [rdi]; test eax, esp; ret 0xffff; 
0x000000000000bd73: and al, 0x83; jmp qword ptr [rax]; 
0x00000000000473da: and al, 0x83; ret 0x8910; 
0x000000000004765c: and al, 0x83; ret; 
0x000000000000c644: and al, 0x88; add byte ptr [rax], al; add bh, bh; adc eax, 0x5a391; add rsp, 0x318; ret; 
0x000000000000c0b5: and al, 0x88; add dword ptr [rax], eax; add bh, bh; adc eax, 0x5a920; add rsp, 0x1b8; ret; 
0x000000000001f39a: and al, 0x88; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000003d639: and al, 0x89; push 0x2c488928; pop rbx; pop r14; pop rbp; ret; 
0x0000000000011246: and al, 0x8b; add al, 0x24; add rsp, 4; ret; 
0x000000000001cf1f: and al, 0x8b; and al, 3; mov dword ptr [rdi + 9], eax; mov dword ptr [rdi + 0xc], ecx; add rsp, 0x18; ret; 
0x0000000000026983: and al, 0xa4; add byte ptr [rax], al; add byte ptr [rcx], cl; ret 0xc148; 
0x0000000000035624: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x1ce8; 
0x0000000000035806: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x3ae8; 
0x0000000000035702: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x3ee8; 
0x00000000000354f3: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x4de8; 
0x00000000000355d7: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x69e8; 
0x00000000000357cd: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x73e8; 
0x00000000000356b8: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x88e8; 
0x00000000000354a6: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x9ae8; 
0x0000000000035794: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xace8; 
0x000000000003558d: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xb3e8; 
0x000000000003566e: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xd2e8; 
0x0000000000035540: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xe8; 
0x000000000003574f: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xf1e8; 
0x000000000003012a: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsp + 0x10], eax; mov qword ptr [rsp], rsi; call qword ptr [rax + 0x20]; 
0x0000000000030a60: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rdx + 0xa8], bh; call rbx; 
0x00000000000116f6: and al, 0xb; insd dword ptr [rdi], dx; ret; 
0x0000000000010c8b: and al, 0xc6; add byte ptr [rax], al; pop rax; ret; 
0x000000000000c8a9: and al, 0xc8; add byte ptr [rax], al; add byte ptr [rdx + 7], bh; call 0xb180; lea rax, [rip + 0x210e1]; call rax; 
0x00000000000100f6: and al, 0xc; add rsp, 0x18; ret; 
0x00000000000100eb: and al, 0xc; test byte ptr [rsp + 0x17], 1; jne 0x100fd; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x000000000001026b: and al, 0xc; test byte ptr [rsp + 0x17], 1; jne 0x1027d; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x0000000000015744: and al, 0xd0; add byte ptr [rax], al; add al, ch; sbb edi, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000001eb43: and al, 0xd2; lea rcx, [rip + 0x32928]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002989e: and al, 0xe0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x15ff; 
0x000000000000b74d: and al, 0xe8; int 1; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000000bc5d: and al, 0xe8; lea eax, [rax]; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000000b6fd: and al, 0xe8; mov ebp, 0x48000000; add esp, 0x18; ret; 
0x0000000000010437: and al, 0xe8; or esp, 0xffffffff; dec dword ptr [rax - 0x75]; add al, 0x24; pop rcx; ret; 
0x000000000000d437: and al, 0xe8; ret; 
0x000000000000b5fd: and al, 0xe8; sbb eax, 0x48000000; add esp, 0x18; ret; 
0x000000000000b98d: and al, 0xe8; sub eax, 0x48000000; add esp, 0x18; ret; 
0x000000000000deb7: and al, 0xe8; xchg eax, ebx; add eax, 0x8b480000; add al, 0x24; pop rcx; ret; 
0x000000000000c79c: and al, 0xf0; add al, byte ptr [rax]; add byte ptr [rdx + 1], bh; mov ecx, 0x4a; call rax; 
0x00000000000294c0: and al, 0xf; adc dword ptr [rbx], eax; mov rax, rbx; add rsp, 0x1b0; pop rbx; ret; 
0x00000000000073a5: and al, 0xf; adc dword ptr [rdi + rax*8], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000003db7a: and al, 0xf; adc dword ptr [rdi], eax; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000002816c: and al, 0xf; mov qword ptr [rsp + 0x10], rax; lea rdi, [rsp + 0x10]; call 0x86c0; add rsp, 0x18; ret; 
0x000000000002db73: and al, 0xff; mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x000000000002db6e: and al, 0xff; mov rdi, qword ptr [r12 - 1]; mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x000000000000d461: and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000001038e: and al, 1; movzx eax, al; add rsp, 0x28; ret; 
0x000000000000fe87: and al, 1; movzx eax, al; add rsp, 0x48; ret; 
0x000000000000bdbb: and al, 1; movzx eax, al; pop rcx; ret; 
0x000000000000e8d2: and al, 1; movzx eax, al; ret; 
0x000000000004ded9: and al, 1; pop rbx; pop r14; pop r15; ret; 
0x000000000004ef9f: and al, 1; pop rcx; ret; 
0x000000000000c3f6: and al, 3; add rsp, 0x88; ret; 
0x000000000001d0ec: and al, 3; mov dword ptr [rdi + 4], edx; mov dword ptr [rdi + 1], ecx; mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x000000000001cf22: and al, 3; mov dword ptr [rdi + 9], eax; mov dword ptr [rdi + 0xc], ecx; add rsp, 0x18; ret; 
0x000000000000b357: and al, 4; add rsp, 0x28; ret; 
0x0000000000011afe: and al, 4; call 0x2b6b0; pop rcx; ret; 
0x0000000000011a1e: and al, 4; call 0x2b760; pop rcx; ret; 
0x000000000000ffaa: and al, 4; call 0xbd70; and al, 1; movzx eax, al; pop rcx; ret; 
0x0000000000010417: and al, 4; call 0xffa0; and al, 1; movzx eax, al; pop rcx; ret; 
0x000000000004acc4: and al, 4; call qword ptr [rip + 0x1c22c]; pop rcx; ret; 
0x000000000004ac80: and al, 4; call qword ptr [rip + 0x1c270]; pop rcx; ret; 
0x000000000004ac43: and al, 4; call qword ptr [rip + 0x1c2ad]; pop rcx; ret; 
0x000000000004ac11: and al, 4; call qword ptr [rip + 0x1c2df]; pop rcx; ret; 
0x000000000004aade: and al, 4; call qword ptr [rip + 0x1c412]; pop rcx; ret; 
0x000000000003fe06: and al, 4; call qword ptr [rip + 0x26c8a]; pop rcx; ret; 
0x000000000004c486: and al, 4; mov rdi, rsi; mov rsi, rax; call qword ptr [rip + 0x1aabc]; pop rcx; ret; 
0x000000000004b8e4: and al, 4; shr al, 2; ret; 
0x0000000000014f98: and al, 5; mov edx, 2; lea rsi, [rsp + 4]; call 0x2b6b0; pop rcx; ret; 
0x0000000000011a45: and al, 5; mov edx, 2; lea rsi, [rsp + 4]; call 0x2b760; pop rcx; ret; 
0x0000000000011a81: and al, 6; mov edx, 3; lea rsi, [rsp + 4]; call 0x2b760; pop rcx; ret; 
0x0000000000009ce4: and al, 7; add byte ptr [rdx + 0x59072444], cl; ret; 
0x000000000000bef6: and al, 7; add cl, byte ptr [rdx + 0x59072444]; ret; 
0x000000000000beef: and al, 7; add ebx, ebp; add eax, 0x72444c6; add cl, byte ptr [rdx + 0x59072444]; ret; 
0x000000000000bdb9: and al, 7; and al, 1; movzx eax, al; pop rcx; ret; 
0x000000000002db78: and al, 7; call qword ptr [rax]; 
0x0000000000011ba4: and al, 7; mov edx, 4; lea rsi, [rsp + 4]; call 0x2b6b0; pop rcx; ret; 
0x0000000000011ac4: and al, 7; mov edx, 4; lea rsi, [rsp + 4]; call 0x2b760; pop rcx; ret; 
0x000000000001d35e: and al, 7; mov qword ptr [rdi + 1], rax; mov qword ptr [rdi + 8], rcx; add rsp, 0x20; ret; 
0x000000000000d240: and al, 7; movzx eax, byte ptr [rsp + 7]; pop rcx; ret; 
0x0000000000009ce9: and al, 7; pop rcx; ret; 
0x000000000000c5cc: and al, 8; add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x1dea8; lea rdi, [rsp + 0x208]; call rax; 
0x000000000000f153: and al, 8; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x58; ret; 
0x000000000000f353: and al, 8; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x60; ret; 
0x000000000000bdf0: and al, 8; add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000000a7b4: and al, 8; add rsp, 0x10; ret; 
0x0000000000010a37: and al, 8; add rsp, 0x138; ret; 
0x000000000000a81e: and al, 8; add rsp, 0x18; ret; 
0x000000000000cc8f: and al, 8; add rsp, 0x20; ret; 
0x000000000000d317: and al, 8; add rsp, 0x28; ret; 
0x000000000000d35c: and al, 8; add rsp, 0x30; ret; 
0x000000000000ce34: and al, 8; add rsp, 0x38; ret; 
0x000000000000f15c: and al, 8; add rsp, 0x58; ret; 
0x000000000000f35c: and al, 8; add rsp, 0x60; ret; 
0x000000000001082a: and al, 8; add rsp, 0x78; ret; 
0x000000000000aae2: and al, 8; add rsp, 0xd8; ret; 
0x000000000004f1d3: and al, 8; add rsp, rax; leave; ret; 
0x0000000000007eba: and al, 8; call 0x8da0; add rsp, 0x28; ret; 
0x0000000000009fba: and al, 8; call 0x9af0; lea rdi, [rsp + 8]; call 0xb370; add rsp, 0x18; ret; 
0x0000000000009fc4: and al, 8; call 0xb370; add rsp, 0x18; ret; 
0x000000000000afca: and al, 8; call 0xda20; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000004a437: and al, 8; call qword ptr [rax + 0x18]; 
0x0000000000034d6c: and al, 8; call qword ptr [rax + 0x20]; 
0x000000000000c973: and al, 8; lea rax, [rip + 0x20c14]; lea rdi, [rsp + 0x90]; call rax; 
0x000000000003ce8e: and al, 8; lea rbx, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x00000000000103b9: and al, 8; lea rdx, [rip + 0x5360e]; lea rax, [rip - 0x6e29]; mov esi, 0x100; call rax; 
0x000000000000e33d: and al, 8; lea rdx, [rip + 0x55642]; lea rax, [rip - 0x4dad]; call rax; 
0x000000000004ad00: and al, 8; lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x1c20b]; add rsp, 0x48; ret; 
0x000000000003fe40: and al, 8; lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x270cb]; add rsp, 0x48; ret; 
0x0000000000015240: and al, 8; lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x51ccb]; add rsp, 0x48; ret; 
0x00000000000151f0: and al, 8; lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x51d1b]; add rsp, 0x48; ret; 
0x00000000000151a0: and al, 8; lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x51d6b]; add rsp, 0x48; ret; 
0x0000000000015150: and al, 8; lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x51dbb]; add rsp, 0x48; ret; 
0x0000000000011d7d: and al, 8; lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x5518e]; add rsp, 0x48; ret; 
0x0000000000011d3d: and al, 8; lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x551ce]; add rsp, 0x48; ret; 
0x0000000000011cfd: and al, 8; lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x5520e]; add rsp, 0x48; ret; 
0x000000000000cd6f: and al, 8; lea rsi, [rip + 0x56b28]; lea rax, [rip - 0x390f]; call rax; 
0x000000000004a829: and al, 8; lea rsi, [rip + 0xaaed]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000000d411: and al, 8; mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000000b060: and al, 8; mov qword ptr [rsp + 0x10], rax; add rsp, 0x30; ret; 
0x000000000000a51d: and al, 8; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000000b130: and al, 8; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x30; ret; 
0x0000000000009fe6: and al, 8; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000000fdce: and al, 8; mov rax, qword ptr [rsp + 0x10]; add rsp, 0xb8; ret; 
0x000000000000ff7e: and al, 8; mov rax, qword ptr [rsp + 0x10]; add rsp, 0xe8; ret; 
0x000000000004aefd: and al, 8; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000004adeb: and al, 8; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000000d21a: and al, 8; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000d312: and al, 8; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000010825: and al, 8; mov rax, qword ptr [rsp + 8]; add rsp, 0x78; ret; 
0x0000000000009fe1: and al, 8; mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000000a7ab: and al, 8; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000000a815: and al, 8; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000cc86: and al, 8; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000110ef: and al, 8; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000d353: and al, 8; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000000a488: and al, 8; mov rcx, qword ptr [rax + 0x10]; call 0xa240; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000004af4f: and al, 8; mov rcx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000000d486: and al, 8; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000a527: and al, 8; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000000b13a: and al, 8; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x30; ret; 
0x000000000000facf: and al, 8; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x0000000000011040: and al, 8; mov rdx, qword ptr [rsp + 0x10]; call 0x101b0; add rsp, 0x18; ret; 
0x000000000000b301: and al, 8; mov rsi, qword ptr [rsp + 0x10]; call 0xfc70; add rsp, 0x18; ret; 
0x0000000000030125: and al, 8; movaps xmm0, xmmword ptr [rsp + 0xb0]; movups xmmword ptr [rsp + 0x10], xmm0; mov qword ptr [rsp], rsi; call qword ptr [rax + 0x20]; 
0x000000000002cce9: and al, 8; movzx eax, byte ptr [rax]; lea rcx, [rip + 0x24ccf]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002ca73: and al, 8; movzx esi, byte ptr [rdx]; mov edx, 6; movsxd rsi, dword ptr [r12 + rsi*4]; add rsi, r12; jmp rsi; 
0x000000000001ca4c: and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004bc6b: and al, byte ptr [rax]; add byte ptr [rax], al; mov qword ptr [rsp + 0x38], rax; call rax; 
0x000000000000fbc0: and al, ch; mov edx, 0x48fffff4; add esp, 0x28; ret; 
0x000000000001127b: and al, ch; out dx, eax; sar bh, 0xff; add rsp, 0x28; ret; 
0x000000000001cbaf: and al, cl; ret; 
0x000000000004e057: and bh, byte ptr [rax + rax]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000000b352: and bl, ch; in al, 0x8b; and al, 4; add rsp, 0x28; ret; 
0x000000000000cfde: and bl, ch; in al, 0xf; or ecx, dword ptr [rax - 0x73]; add eax, 0xffffc636; call rax; 
0x000000000000cf46: and bl, ch; in al, 0xf; or ecx, dword ptr [rax - 0x73]; add eax, 0xffffc6ce; call rax; 
0x000000000003d3c9: and byte ptr [rax + 1], bh; ret; 
0x0000000000039f2e: and byte ptr [rax + rax], al; add byte ptr [rax - 0x75], cl; and al, 8; call qword ptr [rax + 0x20]; 
0x000000000003f5bc: and byte ptr [rax - 0x73], cl; adc eax, 0x142f8; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000000c479: and byte ptr [rax - 0x73], cl; add eax, 0x1e81f; mov qword ptr [rsp + 0x70], rax; call rax; 
0x000000000000b1df: and byte ptr [rax - 0x73], cl; add eax, 0x26149; lea rdi, [rsp + 0x38]; call rax; 
0x0000000000029b89: and byte ptr [rax - 0x73], cl; add eax, 0x27cc7; movsxd rcx, dword ptr [rax + rdi*4]; add rcx, rax; jmp rcx; 
0x0000000000031462: and byte ptr [rax - 0x73], cl; jl 0x3148b; adc al, ch; ret; 
0x0000000000009b27: and byte ptr [rax - 0x73], cl; or eax, 0x464d1; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000d95f: and byte ptr [rax - 0x75], cl; and al, 0x20; add rsp, 0x28; ret; 
0x000000000004e2ce: and byte ptr [rax - 0x75], cl; mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rip + 0x79cf]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000000ecd5: and byte ptr [rax - 0x75], cl; push rsp; and al, 0x28; add rsp, 0x98; ret; 
0x0000000000030a40: and byte ptr [rax - 0x75], cl; sbb eax, 0x36170; mov edx, 0x90; call rbx; 
0x000000000000b05c: and byte ptr [rax - 0x77], cl; and al, 8; mov qword ptr [rsp + 0x10], rax; add rsp, 0x30; ret; 
0x000000000004bc66: and byte ptr [rax - 0x77], cl; fistp qword ptr [rsi + 0x22]; mov qword ptr [rsp + 0x38], rax; call rax; 
0x000000000004c088: and byte ptr [rax - 0x77], cl; fistp qword ptr [rsi + 0x27]; mov r13, rax; call rax; 
0x000000000003e37a: and byte ptr [rax - 0x77], cl; lodsb al, byte ptr [rsi]; ret; 
0x000000000004127f: and byte ptr [rax - 0x77], cl; ret 0x948; 
0x000000000003906f: and byte ptr [rax - 0x7d], cl; ret 0x48e0; 
0x000000000003272f: and byte ptr [rax - 0x7d], cl; ret; 
0x000000000004b862: and byte ptr [rax - 1], cl; ret; 
0x000000000001c9a0: and byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002f7ec: and byte ptr [rbp + 0x1c], dh; mov rdi, r15; call rax; 
0x000000000002f7eb: and byte ptr [rbp + 0x1c], r14b; mov rdi, r15; call rax; 
0x000000000003d55d: and byte ptr [rbp - 0x77], cl; ret 0xf749; 
0x000000000003d55c: and byte ptr [rbp - 0x77], r9b; ret 0xf749; 
0x0000000000042095: and byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x000000000001195d: and byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; pop r15; ret; 
0x000000000001021e: and byte ptr [rbx + 0x48282454], cl; add esp, 0x38; ret; 
0x0000000000011344: and byte ptr [rbx + 0x48282454], cl; add esp, 0x48; ret; 
0x000000000004df33: and byte ptr [rbx + 4], dh; xor eax, eax; pop rcx; ret; 
0x000000000004e0d0: and byte ptr [rbx - 0x3d], bl; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x723b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000034a09: and byte ptr [rbx], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000001133b: and byte ptr [rcx + 0x48282444], cl; mov eax, dword ptr [rsp + 0x20]; mov edx, dword ptr [rsp + 0x28]; add rsp, 0x48; ret; 
0x0000000000020644: and byte ptr [rcx + 4], ch; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000034d70: and byte ptr [rcx + rax], dh; movzx eax, al; lea eax, [rax + rax*8]; add rsp, 0x28; ret; 
0x000000000002da6f: and byte ptr [rcx + rcx*4 - 9], cl; call rax; 
0x0000000000037e82: and byte ptr [rcx - 0x7d], cl; ret 0x48e8; 
0x00000000000217eb: and byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000017421: and byte ptr [rcx], dh; jmp qword ptr [rsi + 0x66]; 
0x000000000004e17d: and byte ptr [rcx], dh; rol byte ptr [rbp + 0x31], cl; ror byte ptr [rcx + rcx - 0x40], 0x48; or eax, edx; pop rbx; ret; 
0x000000000000c57c: and byte ptr [rdi], al; add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000004ee6e: and byte ptr [rdi], cl; xchg eax, edx; rol dword ptr [rbx - 0x7c7e39], 0x21; setb al; or al, cl; ret; 
0x000000000000ce94: and byte ptr [rdx + 5], ch; add byte ptr [rax - 0x73], cl; add eax, 0xffffc971; lea rdx, [rsp + 0x37]; call rax; 
0x000000000003d5e7: and byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x00000000000294ec: and byte ptr [rsi - 0x76b70002], 0xd8; add rsp, 0x1b0; pop rbx; ret; 
0x000000000001cc32: and cl, al; movzx eax, cl; ret; 
0x0000000000033168: and cl, byte ptr [rax - 0x73]; or eax, 0x1e8dc; movsxd rdx, dword ptr [rcx + rdi*4]; add rdx, rcx; jmp rdx; 
0x000000000004a656: and cl, byte ptr [rax - 0x75]; jge 0x4a65b; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xacac]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000000ce8c: and dword ptr [rax + 0x48372444], ecx; lea ecx, [rip + 0x56a20]; lea rax, [rip - 0x368f]; lea rdx, [rsp + 0x37]; call rax; 
0x000000000004c0ff: and dword ptr [rax + 0x63480000], edx; or al, 0x88; add rcx, rax; jmp rcx; 
0x000000000001ca29: and dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000000a20b: and dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000004e126: and dword ptr [rcx], esi; sal byte ptr [rcx], 0xd2; or rax, r8; or rax, rdx; pop rbx; ret; 
0x000000000004ee77: and dword ptr [rdi], ecx; xchg eax, edx; ror byte ptr [rax], 0xc8; ret; 
0x0000000000008348: and eax, 0; cmp qword ptr [rax - 8], 0; sete al; pop rcx; ret; 
0x00000000000287e7: and eax, 0; mov rbx, rax; dec qword ptr [rax - 8]; mov rdi, r14; call qword ptr [rbp]; 
0x00000000000491b2: and eax, 0x1d8c9; ret; 
0x0000000000049192: and eax, 0x1d8e9; ret; 
0x000000000003fbf0: and eax, 0x2735b; nop word ptr cs:[rax + rax]; nop; ret; 
0x000000000003d8f6: and eax, 0x29185; ret; 
0x000000000003d8be: and eax, 0x291bd; ret; 
0x000000000003d88d: and eax, 0x291ee; ret; 
0x000000000003d82e: and eax, 0x2967d; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x000000000003d016: and eax, 0x29a65; ret; 
0x000000000003cf5e: and eax, 0x29b1d; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ca06: and eax, 0x48000000; add esp, 8; pop rbx; pop r14; ret; 
0x000000000004a013: and eax, 0x48ceff48; mov dword ptr [rdi], esi; ret; 
0x0000000000018fe6: and eax, 0x4da95; ret; 
0x0000000000018fc4: and eax, 0x4dab7; pop rbx; ret; 
0x0000000000018f6e: and eax, 0x4db0d; pop rbx; ret; 
0x0000000000018f28: and eax, 0x4db53; ret; 
0x0000000000018efd: and eax, 0x4db7e; pop rbx; ret; 
0x0000000000013be6: and eax, 0x52e95; pop rbx; pop r14; pop r15; ret; 
0x0000000000013ad2: and eax, 0x52fa9; pop rbx; pop r14; pop r15; ret; 
0x0000000000013949: and eax, 0x53132; pop rbx; ret; 
0x00000000000138b2: and eax, 0x531c9; pop rbx; pop r14; pop r15; ret; 
0x0000000000013814: and eax, 0x53267; pop rbx; pop r14; pop r15; ret; 
0x00000000000137b6: and eax, 0x532c5; ret; 
0x00000000000136fd: and eax, 0x5337e; ret; 
0x0000000000013629: and eax, 0x534aa; pop rbx; ret; 
0x00000000000135ea: and eax, 0x534e9; nop; cmp dword ptr [rdi], 2; jae 0x135f6; ret; 
0x000000000001356f: and eax, 0x5350c; ret; 
0x000000000001340b: and eax, 0x53670; ret; 
0x00000000000133e6: and eax, 0x536ed; ret; 
0x00000000000133a9: and eax, 0x5372a; ret; 
0x00000000000132d8: and eax, 0x537a3; ret; 
0x0000000000013302: and eax, 0x53881; ret; 
0x0000000000013199: and eax, 0x538e2; pop rbx; ret; 
0x00000000000130b6: and eax, 0x539c5; ret; 
0x0000000000012f4d: and eax, 0x53b2e; ret; 
0x0000000000012f1e: and eax, 0x53b5d; ret; 
0x0000000000012ec8: and eax, 0x53bb3; ret; 
0x0000000000012ea8: and eax, 0x53bd3; ret; 
0x0000000000012e27: and eax, 0x53c54; ret; 
0x0000000000012e03: and eax, 0x53c78; ret; 
0x0000000000012d9d: and eax, 0x53cde; pop rbx; pop r14; pop r15; ret; 
0x0000000000012e6b: and eax, 0x53d18; pop rbx; ret; 
0x0000000000012c41: and eax, 0x53e92; nop word ptr cs:[rax + rax]; mov qword ptr [rsi + 0x10], rdi; ret; 
0x0000000000012b6c: and eax, 0x53f0f; pop rbx; ret; 
0x0000000000012a18: and eax, 0x54063; pop rbx; ret; 
0x00000000000129b7: and eax, 0x540c4; ret; 
0x00000000000128a6: and eax, 0x541d5; pop rbx; ret; 
0x00000000000127e9: and eax, 0x54292; add rsp, 8; pop rbx; pop r14; ret; 
0x00000000000127b3: and eax, 0x542c8; ret; 
0x000000000001275a: and eax, 0x54321; ret; 
0x0000000000012738: and eax, 0x54343; ret; 
0x0000000000012716: and eax, 0x54365; ret; 
0x00000000000126fa: and eax, 0x54381; ret; 
0x000000000001278f: and eax, 0x543f4; ret; 
0x0000000000012678: and eax, 0x54403; ret; 
0x0000000000012511: and eax, 0x5456a; ret; 
0x00000000000121b1: and eax, 0x548ca; pop rbx; pop r14; pop r15; ret; 
0x0000000000011f9d: and eax, 0x54ade; ret; 
0x0000000000019e62: and eax, 0x8d482e77; add eax, 0x36e84; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000001358d: and eax, 0xbfffffff; cmp eax, 0x80000000; je 0x1359a; ret; 
0x000000000003d353: and eax, 0xc9bc0f66; movzx ecx, cx; lea rdx, [rcx + rax]; add rdx, -0x10; mov eax, 1; ret; 
0x000000000002bc47: and eax, 0xf0003b0; or ecx, dword ptr [rax - 0x77]; ret; 
0x00000000000465af: and eax, 3; lea rax, [rip + 0xe397]; movsxd rbx, dword ptr [rax + r8*4]; add rbx, rax; jmp rbx; 
0x00000000000299f4: and eax, 3; lea rcx, [rip + 0x27e4a]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000296d1: and eax, 3; lea rcx, [rip + 0x2815d]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002947f: and eax, 3; lea rcx, [rip + 0x2839f]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029451: and eax, 3; lea rcx, [rip + 0x283cd]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001c8d8: and eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000049b76: and eax, ecx; ret; 
0x000000000002ba30: and ebp, 3; lea rcx, [rip + 0x25ec2]; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x000000000000c77b: and ebp, esp; add dword ptr [rax], eax; lea rdi, [rsp + 0x280]; call rax; 
0x000000000001e2be: and ecx, dword ptr [rcx + 0x55890c75]; or dword ptr [rax - 0x76b7f7b3], ecx; adc r9b, r13b; idiv di; jmp qword ptr [rsi + 0x2e]; 
0x000000000003f5d0: and esi, 0xfffe; cmp si, 2; sete al; ret; 
0x0000000000041744: and esi, eax; or byte ptr [r8], r8b; mov qword ptr [rdi], 0; pop rbx; ret; 
0x00000000000465ae: and r8d, 3; lea rax, [rip + 0xe397]; movsxd rbx, dword ptr [rax + r8*4]; add rbx, rax; jmp rbx; 
0x0000000000049b75: and rax, rcx; ret; 
0x000000000002e2ad: bnd call qword ptr [rip + 0x3878c]; add rsp, 0x80; pop rbx; pop r14; pop r15; ret; 
0x000000000002c2f5: bnd jmp rdx; 
0x000000000003d26c: bsf ax, ax; movzx edx, ax; mov eax, 1; ret; 
0x000000000003d369: bsf ax, dx; movzx edx, ax; add rdx, rcx; mov eax, 1; ret; 
0x000000000003d354: bsf cx, cx; movzx ecx, cx; lea rdx, [rcx + rax]; add rdx, -0x10; mov eax, 1; ret; 
0x000000000003d399: bsf cx, cx; movzx ecx, cx; lea rdx, [rcx + rax]; add rdx, 0x10; mov eax, 1; ret; 
0x000000000003d381: bsf cx, cx; movzx edx, cx; add rdx, rax; mov eax, 1; ret; 
0x000000000003d26d: bsf eax, eax; movzx edx, ax; mov eax, 1; ret; 
0x000000000003d36a: bsf eax, edx; movzx edx, ax; add rdx, rcx; mov eax, 1; ret; 
0x000000000003d355: bsf ecx, ecx; movzx ecx, cx; lea rdx, [rcx + rax]; add rdx, -0x10; mov eax, 1; ret; 
0x000000000003d39a: bsf ecx, ecx; movzx ecx, cx; lea rdx, [rcx + rax]; add rdx, 0x10; mov eax, 1; ret; 
0x000000000003d382: bsf ecx, ecx; movzx edx, cx; add rdx, rax; mov eax, 1; ret; 
0x000000000002a46d: bswap esp; add eax, dword ptr [rax]; pop rcx; ret; 
0x0000000000011047: call 0x101b0; add rsp, 0x18; ret; 
0x000000000001122a: call 0x10230; pop rcx; ret; 
0x000000000000a98d: call 0x105b0; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000011221: call 0x10cf0; mov edi, eax; mov esi, edx; call 0x10230; pop rcx; ret; 
0x0000000000015034: call 0x11bc0; xor eax, eax; pop rcx; ret; 
0x00000000000294eb: call 0x13b70; mov rax, rbx; add rsp, 0x1b0; pop rbx; ret; 
0x0000000000014f44: call 0x15d00; xor eax, eax; pop rcx; ret; 
0x0000000000011e29: call 0x18c5a176; pop rbx; pop rbp; ret; 
0x0000000000011e51: call 0x288b0; ud2; nop dword ptr [rax + rax]; ret; 
0x0000000000011b00: call 0x2b6b0; pop rcx; ret; 
0x0000000000011a20: call 0x2b760; pop rcx; ret; 
0x000000000003751c: call 0x2c40a; jmp qword ptr [rsi + 0x66]; 
0x000000000002ddcb: call 0x2e160; add rsp, 0x18; ret; 
0x0000000000028b41: call 0x2e2e0; test rax, rax; je 0x28b4d; pop rcx; ret; 
0x000000000000d959: call 0x448a215e; and al, 0x20; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x28; ret; 
0x000000000000c1f4: call 0x4800c20a; lea eax, [rip + 0x1e051]; call rax; 
0x000000000000c4a2: call 0x4800c4a7; mov dword ptr [rsp + 0x28], edi; call 0xcca0; mov rdi, qword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c8f4: call 0x4800ce99; add esp, 0x1a8; ret; 
0x000000000000d3c4: call 0x4800d95f; mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x0000000000009b1f: call 0x48161227; mov eax, dword ptr [rsp + 0x20]; lea rcx, [rip + 0x464d1]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004962c: call 0x49ba0; add rsp, 0x30; pop rbx; pop r14; pop r15; ret; 
0x000000000004aa84: call 0x4a960; mov rax, rbx; pop rbx; ret; 
0x000000000004df73: call 0x4de00; pop rcx; ret; 
0x0000000000022d01: call 0x634a2d08; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000003316d: call 0x634b3173; adc al, 0xb9; add rdx, rcx; jmp rdx; 
0x000000000000b532: call 0x7060; ud2; lea rax, [rip - 0x1f20]; call rax; 
0x000000000000b872: call 0x7060; ud2; lea rax, [rip - 0x2260]; call rax; 
0x000000000000b1ff: call 0x7078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x000000000000fc57: call 0x7078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x000000000000d5c3: call 0x7078; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rax + 0x40], 0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x168; ret; 
0x000000000000d03f: call 0x7078; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x00000000000106fc: call 0x7078; mov rax, qword ptr [rsp + 8]; add rsp, 0x58; ret; 
0x0000000000009abe: call 0x7080; call 0x9a30; mov byte ptr [rip + 0x5d569], 1; pop rbp; ret; 
0x000000000002a265: call 0x7de0; lea rax, [rip + 0x3cdd7]; pop rcx; ret; 
0x000000000002a465: call 0x7e30; lea rax, [rip + 0x3cc0f]; pop rcx; ret; 
0x0000000000028178: call 0x86c0; add rsp, 0x18; ret; 
0x0000000000007e69: call 0x8b30; add rsp, 0x28; ret; 
0x0000000000007ebc: call 0x8da0; add rsp, 0x28; ret; 
0x0000000000007e19: call 0x8ff0; add rsp, 0x28; ret; 
0x0000000000009ac3: call 0x9a30; mov byte ptr [rip + 0x5d569], 1; pop rbp; ret; 
0x0000000000009fbc: call 0x9af0; lea rdi, [rsp + 8]; call 0xb370; add rsp, 0x18; ret; 
0x000000000000b901: call 0x9fb0; pop rax; ret; 
0x000000000000a20a: call 0xa230; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000a48e: call 0xa240; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000a1da: call 0xa250; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000a913: call 0xa570; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x000000000000a5a1: call 0xa590; movzx eax, word ptr [rax + 0x21a]; pop rcx; ret; 
0x000000000000a791: call 0xa590; pop rcx; ret; 
0x000000000000aada: call 0xa8d0; mov rax, qword ptr [rsp + 8]; add rsp, 0xd8; ret; 
0x000000000000be9b: call 0xb150; pop rcx; ret; 
0x000000000000c8b3: call 0xb180; lea rax, [rip + 0x210e1]; call rax; 
0x000000000000a455: call 0xb2c0; add rsp, 0x28; ret; 
0x000000000000b2e4: call 0xb320; pop rcx; ret; 
0x000000000000fc24: call 0xb360; add rsp, 0x18; ret; 
0x0000000000009fc6: call 0xb370; add rsp, 0x18; ret; 
0x000000000000b6c1: call 0xb390; pop rax; ret; 
0x000000000000b911: call 0xb400; pop rax; ret; 
0x000000000000dcc9: call 0xb410; add rsp, 0xa8; ret; 
0x000000000000b023: call 0xb490; add rsp, 0x38; ret; 
0x000000000000b5fe: call 0xb620; add rsp, 0x18; ret; 
0x000000000000c3ef: call 0xb690; mov al, byte ptr [rsp + 3]; add rsp, 0x88; ret; 
0x000000000000c2b4: call 0xb690; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x78; ret; 
0x000000000000b666: call 0xb6d0; add rsp, 0x18; ret; 
0x000000000000b691: call 0xb6d0; pop rax; ret; 
0x000000000000b2d1: call 0xb770; pop rax; ret; 
0x000000000000b7a1: call 0xb780; pop rax; ret; 
0x000000000000b771: call 0xb790; pop rax; ret; 
0x000000000000b9e6: call 0xb7a0; pop rax; ret; 
0x000000000000b6fe: call 0xb7c0; add rsp, 0x18; ret; 
0x000000000000b0b3: call 0xb7d0; add rsp, 0x38; ret; 
0x000000000000b6a1: call 0xb900; pop rax; ret; 
0x000000000000b74e: call 0xb920; add rsp, 0x18; ret; 
0x000000000000b9b1: call 0xb960; pop rax; ret; 
0x000000000000b98e: call 0xb9c0; add rsp, 0x18; ret; 
0x000000000000b385: call 0xb9f0; pop rax; ret; 
0x000000000000b6b1: call 0xba50; pop rax; ret; 
0x000000000000b2c1: call 0xbcc0; pop rax; ret; 
0x000000000000bc5e: call 0xbcf0; add rsp, 0x18; ret; 
0x000000000000bc0f: call 0xbd40; add rsp, 0x18; ret; 
0x000000000000ffac: call 0xbd70; and al, 1; movzx eax, al; pop rcx; ret; 
0x000000000000d239: call 0xbe80; mov byte ptr [rsp + 7], al; movzx eax, byte ptr [rsp + 7]; pop rcx; ret; 
0x000000000000b781: call 0xbeb0; pop rax; ret; 
0x000000000000c63c: call 0xcca0; lea rdi, [rsp + 0x88]; call qword ptr [rip + 0x5a391]; add rsp, 0x318; ret; 
0x000000000000c4ab: call 0xcca0; mov rdi, qword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c4df: call 0xcca0; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c513: call 0xcca0; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c547: call 0xcca0; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c57b: call 0xcca0; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c5af: call 0xcca0; mov rdi, qword ptr [rsp + 0x68]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000cd67: call 0xcca0; mov rdi, qword ptr [rsp + 8]; lea rsi, [rip + 0x56b28]; lea rax, [rip - 0x390f]; call rax; 
0x000000000000c165: call 0xcca0; mov rdi, qword ptr [rsp]; lea rax, [rip + 0x1eb2b]; call rax; 
0x000000000000cb29: call 0xced0; add rsp, 0x128; ret; 
0x0000000000010438: call 0xd0c0; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000be71: call 0xd1e0; pop rcx; ret; 
0x000000000000cc50: call 0xd1f0; pop rcx; ret; 
0x000000000001127c: call 0xd370; add rsp, 0x28; ret; 
0x000000000000c2ec: call 0xd3e0; lea rax, [rip + 0x1df58]; call rax; 
0x000000000000c1f3: call 0xd3e0; lea rax, [rip + 0x1e051]; call rax; 
0x000000000000dcc1: call 0xd4a0; mov rdi, rsp; call 0xb410; add rsp, 0xa8; ret; 
0x000000000000b5c1: call 0xd5f0; pop rax; ret; 
0x000000000000afcc: call 0xda20; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000b401: call 0xdc20; pop rax; ret; 
0x000000000000b411: call 0xdce0; pop rax; ret; 
0x000000000000deb8: call 0xe450; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000e009: call 0xe900; mov rax, qword ptr [rsp + 0x70]; add rsp, 0x108; ret; 
0x000000000000f0e6: call 0xeb40; pop rcx; ret; 
0x000000000000b933: call 0xecf0; add rsp, 0x18; ret; 
0x000000000000ba27: call 0xeda0; add rsp, 0x18; ret; 
0x000000000000b953: call 0xee50; add rsp, 0x18; ret; 
0x000000000000b466: call 0xef00; add rsp, 0x18; ret; 
0x000000000000b3d6: call 0xefc0; add rsp, 0x18; ret; 
0x000000000000fb21: call 0xf080; add rsp, 0x28; ret; 
0x000000000000bcf1: call 0xfae0; pop rax; ret; 
0x000000000000b9c1: call 0xfb30; pop rax; ret; 
0x000000000000b621: call 0xfb80; pop rax; ret; 
0x000000000000b7c1: call 0xfbd0; pop rax; ret; 
0x000000000000b308: call 0xfc70; add rsp, 0x18; ret; 
0x000000000000ff91: call 0xfcd0; pop rcx; ret; 
0x0000000000010419: call 0xffa0; and al, 1; movzx eax, al; pop rcx; ret; 
0x000000000000c47e: call 0xffffffff8948c484; and al, 0x70; call rax; 
0x000000000000c8b5: call 0xffffffff8d49c8b9; add eax, 0x210e1; call rax; 
0x000000000002f090: call 0xffffffffff787de2; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000002f119: call 0xffffffffff787e6b; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000002f190: call 0xffffffffff787ee2; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000002f1be: call 0xffffffffff787f10; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000004a22f: call qword ptr [rax + 0x18]; 
0x000000000004e0ca: call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000004a785: call qword ptr [rax + 0x18]; mov byte ptr [rbx + 8], al; pop rbx; ret; 
0x0000000000030138: call qword ptr [rax + 0x20]; 
0x0000000000034d6e: call qword ptr [rax + 0x20]; xor al, 1; movzx eax, al; lea eax, [rax + rax*8]; add rsp, 0x28; ret; 
0x00000000000285b9: call qword ptr [rax + 0x28]; 
0x000000000002197d: call qword ptr [rax + 4]; 
0x0000000000007510: call qword ptr [rax]; 
0x000000000004b3b9: call qword ptr [rbp + 0x18]; 
0x000000000004b19a: call qword ptr [rbp + 0x20]; 
0x000000000001c17f: call qword ptr [rbp + 0x41]; 
0x000000000002764d: call qword ptr [rbp - 1]; 
0x00000000000287f9: call qword ptr [rbp]; 
0x000000000004b38f: call qword ptr [rbx + 0x18]; 
0x000000000004b121: call qword ptr [rbx + 0x20]; 
0x0000000000046c43: call qword ptr [rbx]; 
0x000000000003d09f: call qword ptr [rcx + 0x18]; 
0x0000000000039fdb: call qword ptr [rcx + 0x20]; 
0x00000000000413d3: call qword ptr [rdi + 0x3e]; 
0x0000000000042e24: call qword ptr [rdi]; 
0x0000000000042e24: call qword ptr [rdi]; ja 0x43349; lea rbx, [rip + 0x1128d]; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x000000000002ec3d: call qword ptr [rdx + 0x18]; 
0x000000000004ed48: call qword ptr [rip + 0x17b4a]; add rsp, 0x28; ret; 
0x000000000004ec18: call qword ptr [rip + 0x17c7a]; add rsp, 0x28; ret; 
0x000000000004eaea: call qword ptr [rip + 0x17da8]; add rsp, 0x30; pop rbx; ret; 
0x000000000004e9b4: call qword ptr [rip + 0x17ede]; add rsp, 0x28; ret; 
0x000000000004e906: call qword ptr [rip + 0x17f8c]; add rsp, 0x88; ret; 
0x000000000004e8b0: call qword ptr [rip + 0x17fe2]; add rsp, 0x88; ret; 
0x000000000004ee0a: call qword ptr [rip + 0x18108]; add rsp, 0x38; ret; 
0x000000000004e6d0: call qword ptr [rip + 0x181c2]; add rsp, 0x88; ret; 
0x000000000004e630: call qword ptr [rip + 0x18262]; add rsp, 0x88; ret; 
0x000000000004e59d: call qword ptr [rip + 0x182f5]; add rsp, 0x88; ret; 
0x000000000004e50d: call qword ptr [rip + 0x18385]; add rsp, 0x88; ret; 
0x000000000004e47b: call qword ptr [rip + 0x18417]; add rsp, 0x88; ret; 
0x000000000004e3eb: call qword ptr [rip + 0x184a7]; add rsp, 0x88; ret; 
0x000000000004c48e: call qword ptr [rip + 0x1aabc]; pop rcx; ret; 
0x000000000004b8cd: call qword ptr [rip + 0x1b645]; add rsp, 0x38; ret; 
0x000000000004ad5a: call qword ptr [rip + 0x1c1b8]; add rsp, 0x38; ret; 
0x000000000004ad07: call qword ptr [rip + 0x1c20b]; add rsp, 0x48; ret; 
0x000000000004acc6: call qword ptr [rip + 0x1c22c]; pop rcx; ret; 
0x000000000004ac82: call qword ptr [rip + 0x1c270]; pop rcx; ret; 
0x000000000004ac45: call qword ptr [rip + 0x1c2ad]; pop rcx; ret; 
0x000000000004ac13: call qword ptr [rip + 0x1c2df]; pop rcx; ret; 
0x000000000004aae0: call qword ptr [rip + 0x1c412]; pop rcx; ret; 
0x000000000004a185: call qword ptr [rip + 0x1cd8d]; add rsp, 0x68; ret; 
0x000000000004a0f7: call qword ptr [rip + 0x1ce73]; mov rax, rbx; pop rbx; ret; 
0x0000000000049c70: call qword ptr [rip + 0x1d22a]; add rsp, 0x18; ret; 
0x0000000000045eb1: call qword ptr [rip + 0x209f9]; add rsp, 0x68; pop rbx; pop r14; ret; 
0x000000000003fe08: call qword ptr [rip + 0x26c8a]; pop rcx; ret; 
0x000000000003fe47: call qword ptr [rip + 0x270cb]; add rsp, 0x48; ret; 
0x000000000003c6ed: call qword ptr [rip + 0x2a585]; pop rbx; ret; 
0x0000000000030391: call qword ptr [rip + 0x36541]; pop rcx; ret; 
0x000000000002f4c0: call qword ptr [rip + 0x3798a]; ud2; nop dword ptr [rax + rax]; mov rax, rdi; lea rdx, [rip + 0x35606]; ret; 
0x000000000002ec60: call qword ptr [rip + 0x37b9a]; mov r15, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000002ec31: call qword ptr [rip + 0x37bc9]; mov rbx, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000002e984: call qword ptr [rip + 0x38106]; mov rax, r14; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002e779: call qword ptr [rip + 0x38301]; add rsp, 0x50; pop rbx; pop r14; pop r15; ret; 
0x000000000002e854: call qword ptr [rip + 0x386ae]; test eax, eax; jne 0x2e864; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000002e2ae: call qword ptr [rip + 0x3878c]; add rsp, 0x80; pop rbx; pop r14; pop r15; ret; 
0x000000000002d993: call qword ptr [rip + 0x390b7]; ud2; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x000000000002ad5d: call qword ptr [rip + 0x3bf5d]; test rax, rax; jne 0x2ad78; add rsp, 0xb0; pop rbx; ret; 
0x000000000002a488: call qword ptr [rip + 0x3c7a2]; pop rcx; ret; 
0x00000000000285a3: call qword ptr [rip + 0x3e3cf]; mov rdi, qword ptr [rsp + 0x110]; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x0000000000028a10: call qword ptr [rip + 0x3e582]; add rsp, 0x10; pop rbx; ret; 
0x000000000001e34c: call qword ptr [rip + 0x48586]; pop rcx; ret; 
0x000000000001e327: call qword ptr [rip + 0x485ab]; pop rcx; ret; 
0x0000000000015247: call qword ptr [rip + 0x51ccb]; add rsp, 0x48; ret; 
0x00000000000151f7: call qword ptr [rip + 0x51d1b]; add rsp, 0x48; ret; 
0x00000000000151a7: call qword ptr [rip + 0x51d6b]; add rsp, 0x48; ret; 
0x0000000000015157: call qword ptr [rip + 0x51dbb]; add rsp, 0x48; ret; 
0x0000000000013b42: call qword ptr [rip + 0x53278]; mov qword ptr [r14 + 0x10], rbx; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000011e22: call qword ptr [rip + 0x54c58]; mov eax, ebp; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000011d84: call qword ptr [rip + 0x5518e]; add rsp, 0x48; ret; 
0x0000000000011d44: call qword ptr [rip + 0x551ce]; add rsp, 0x48; ret; 
0x0000000000011d04: call qword ptr [rip + 0x5520e]; add rsp, 0x48; ret; 
0x00000000000116c5: call qword ptr [rip + 0x55385]; ud2; nop dword ptr [rax]; movabs rax, 0x245dac89066f9f; ret; 
0x000000000000f0ca: call qword ptr [rip + 0x579b0]; add rsp, 0x38; ret; 
0x000000000000e594: call qword ptr [rip + 0x586fe]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000d45b: call qword ptr [rip + 0x59467]; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000d3c2: call qword ptr [rip + 0x596e8]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000000d211: call qword ptr [rip + 0x59ac9]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000cb19: call qword ptr [rip + 0x5a049]; mov rdi, rax; lea rsi, [rip + 0x56d27]; call 0xced0; add rsp, 0x128; ret; 
0x000000000000c8f2: call qword ptr [rip + 0x5a0e8]; add rsp, 0x1a8; ret; 
0x000000000000c649: call qword ptr [rip + 0x5a391]; add rsp, 0x318; ret; 
0x000000000000c0ba: call qword ptr [rip + 0x5a920]; add rsp, 0x1b8; ret; 
0x000000000000beb3: call qword ptr [rip + 0x5ac1f]; pop rax; ret; 
0x000000000000bc81: call qword ptr [rip + 0x5ad09]; pop rax; ret; 
0x000000000000b24a: call qword ptr [rip + 0x5b5a0]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000b28a: call qword ptr [rip + 0x5b8a0]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000868b: call qword ptr [rip + 0x5e4f7]; test rax, rax; jle 0x863a; pop rbx; ret; 
0x000000000004a1f7: call qword ptr [rsi + 0x18]; 
0x000000000004b80b: call qword ptr [rsi + 0x20]; 
0x0000000000045f4f: call r15; mov rax, rbx; pop rbx; pop r14; pop r15; ret; 
0x0000000000007010: call rax; 
0x0000000000007010: call rax; add rsp, 8; ret; 
0x00000000000102c6: call rax; ud2; mov al, byte ptr [rsp + 0x27]; add rsp, 0x28; ret; 
0x00000000000111ee: call rax; ud2; mov rax, qword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x00000000000281ea: call rbp; cmp eax, -1; jne 0x282b8; call rbx; 
0x0000000000013dc3: call rbx; 
0x0000000000034996: call rcx; 
0x0000000000008422: call rdi; 
0x0000000000045f50: call rdi; mov rax, rbx; pop rbx; pop r14; pop r15; ret; 
0x000000000000b361: call rdi; pop rax; ret; 
0x00000000000271cd: call rdx; 
0x0000000000008796: call rsi; 
0x0000000000007d5d: call rsp; 
0x000000000004b9ea: cdq; add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bad0: cdqe; add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000002815b: clc; add al, 0x75; add eax, 0x18c48348; ret; 
0x0000000000007deb: clc; add al, 0x75; add eax, 0x28c48348; ret; 
0x000000000002a458: clc; add al, 0x75; or dword ptr [rax - 0x73], ecx; add eax, 0x3cc1d; pop rcx; ret; 
0x000000000002a258: clc; add al, 0x75; or dword ptr [rax - 0x73], ecx; add eax, 0x3cde5; pop rcx; ret; 
0x000000000000bca9: clc; add byte ptr [rbp + 2], dh; pop rax; ret; 
0x000000000000cef3: clc; add byte ptr [rbp + 5], dh; add rsp, 0x28; ret; 
0x000000000000c1aa: clc; add byte ptr [rbp + 5], dh; add rsp, 0x78; ret; 
0x000000000000ce6d: clc; add byte ptr [rbp + 9], dh; mov eax, dword ptr [rsp + 0x24]; add rsp, 0x48; ret; 
0x000000000000f572: clc; add byte ptr [rbp + rcx - 0x15], dh; sub ecx, dword ptr [rax - 0x73]; add eax, 0x39d91; call rax; 
0x000000000003f5c0: clc; add dword ptr [rax], eax; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002b822: clc; add dword ptr [rbp + 0x3b], esi; lea r14, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000002a1cf: clc; add dword ptr [rbp + 0x3b], esi; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b6dc: clc; add dword ptr [rbp + 0x3b], esi; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000035f42: clc; add dword ptr [rbp + 0x3c], esi; lea rbp, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002a6ab: clc; add dword ptr [rbp + 0x3e], esi; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000012172: clc; add dword ptr [rbp + 0x40], esi; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000012d5e: clc; add dword ptr [rbp + 0x40], esi; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000031299: clc; add dword ptr [rbp + 0x52], esi; lea rbx, [r15 - 1]; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x0000000000028a44: clc; add dword ptr [rdx + rbp + 0x31], esi; rcr byte ptr [rbx + 0x41], 0x5e; pop r15; ret; 
0x000000000001cbf9: clc; add eax, 0x8d481677; or eax, 0x34668; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cb89: clc; add eax, 0x8d481677; or eax, 0x346c0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cb29: clc; add eax, 0x8d481a77; or eax, 0x34708; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000030aa8: clc; add rsp, 0x2e0; pop rbx; pop r14; pop r15; ret; 
0x000000000003f33e: clc; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000348ad: clc; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x0000000000015064: clc; add word ptr [rax], ax; pop rcx; ret; 
0x00000000000299f3: clc; and eax, 3; lea rcx, [rip + 0x27e4a]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002947e: clc; and eax, 3; lea rcx, [rip + 0x2839f]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029450: clc; and eax, 3; lea rcx, [rip + 0x283cd]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004adf5: clc; call qword ptr [rax + 0x18]; 
0x0000000000013dc2: clc; call rbx; 
0x000000000002c268: clc; cmp byte ptr [rax], cl; sete al; pop rcx; ret; 
0x000000000004f0c9: clc; div r8; mov r10, rax; mov rax, r10; mov rdx, r11; ret; 
0x0000000000009a40: clc; je 0x9a58; mov rax, qword ptr [rip + 0x5ce56]; test rax, rax; je 0x9a58; jmp rax; 
0x000000000001c208: clc; jmp rax; 
0x000000000001dfb4: clc; lea rbp, [rip + 0x33340]; movsxd rsi, dword ptr [rbp + rsi*4]; add rsi, rbp; jmp rsi; 
0x000000000002f4d2: clc; lea rdx, [rip + 0x35606]; ret; 
0x000000000004bd61: clc; lea rdx, [rip + 0x9267]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004ad22: clc; lea rdx, [rip - 0x10aa]; ret; 
0x000000000004bea8: clc; mov esi, 0x5c; jmp rax; 
0x000000000000e8e2: clc; mov qword ptr [rdi + 8], rsi; mov qword ptr [rdi + 0x10], rdx; mov qword ptr [rdi], 0; ret; 
0x000000000000e902: clc; mov qword ptr [rdi + 8], rsi; mov qword ptr [rdi + 0x10], rdx; mov qword ptr [rdi], 1; ret; 
0x000000000000a222: clc; mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000000e58e: clc; mov qword ptr [rsp + 0x10], rax; call qword ptr [rip + 0x586fe]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000afc6: clc; mov qword ptr [rsp + 8], rax; call 0xda20; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000010433: clc; mov qword ptr [rsp], rax; call 0xd0c0; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000deb3: clc; mov qword ptr [rsp], rax; call 0xe450; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000b396: clc; mov qword ptr [rsp], rax; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax]; call rax; 
0x000000000000be93: clc; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xb150; pop rcx; ret; 
0x0000000000018e93: clc; mov rdx, r14; pop rbx; pop r14; pop r15; ret; 
0x00000000000472f6: clc; or dword ptr [rcx], edi; ret 0x830f; 
0x000000000003f541: clc; pop rcx; ret; 
0x0000000000032a5f: clc; push qword ptr [rbx + rax*2 - 0x77]; ret 0x2b8; 
0x000000000004b3d8: clc; push qword ptr [rcx + rdx + 0x4c]; mov edi, edi; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000000be63: clc; ret; 
0x000000000001c1f7: clc; sub esi, dword ptr [rdi + 0x15]; lea rdi, [rip + 0x34cba]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000116e4: clc; test eax, 0x89a76c34; ret; 
0x000000000000bca1: cli; add byte ptr [rax + 0xf], cl; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 2], dh; pop rax; ret; 
0x000000000000ceeb: cli; add byte ptr [rax + 0xf], cl; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 5], dh; add rsp, 0x28; ret; 
0x000000000001cba7: cli; add byte ptr [rcx], al; add byte ptr [rax], al; setb al; and al, cl; ret; 
0x000000000002db67: cli; add dword ptr [rbp + 0x3f], esi; lea r15, [r12 - 1]; mov rdi, qword ptr [r12 - 1]; mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x000000000004b38e: cli; call qword ptr [rbx + 0x18]; 
0x000000000004e79b: cli; jmp rax; 
0x000000000004c1a4: cli; jmp rcx; 
0x000000000001cfa7: cli; jne 0x1cf48; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000001d005: cli; jne 0x1d16a; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x0000000000042118: cli; lea rsi, [rip + 0x11f00]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000002750b: cli; push rsi; ja 0x2757e; movsxd rcx, dword ptr [r14 + rdx*4]; add rcx, r14; jmp rcx; 
0x0000000000048f3f: cli; ret; 
0x000000000002ba2f: cmc; and ebp, 3; lea rcx, [rip + 0x25ec2]; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x000000000004becc: cmc; jmp rax; 
0x0000000000049faf: cmc; scasd eax, dword ptr [rdi]; add byte ptr [rax], al; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000010c37: cmc; sub eax, 0x8d480005; add eax, 0xffff88ae; mov esi, 0x2b; call rax; 
0x000000000003d1e7: cmova ebx, eax; mov rax, rbx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000003d1e6: cmova rbx, rax; mov rax, rbx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004a00c: cmovae eax, ecx; test rsi, rsi; je 0x4a039; dec rsi; mov qword ptr [rdi], rsi; ret; 
0x000000000004197a: cmovae eax, edx; shl rax, 0x20; or rax, rcx; ret; 
0x0000000000049fa4: cmovae ecx, eax; mov eax, 0x110000; lea rsi, [rip + 0xaff5]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000041979: cmovae rax, rdx; shl rax, 0x20; or rax, rcx; ret; 
0x000000000003d190: cmovb eax, edi; cmp rsi, rdx; cmovb rax, rdi; mov rdx, rcx; ret; 
0x000000000003d197: cmovb eax, edi; mov rdx, rcx; ret; 
0x000000000003d18f: cmovb rax, rdi; cmp rsi, rdx; cmovb rax, rdi; mov rdx, rcx; ret; 
0x000000000003d196: cmovb rax, rdi; mov rdx, rcx; ret; 
0x000000000000bca4: cmove eax, ecx; cmp rax, 0; jne 0xbcaf; pop rax; ret; 
0x000000000000bcd5: cmove eax, ecx; cmp rax, 0; jne 0xbce0; pop rax; ret; 
0x000000000000bd24: cmove eax, ecx; cmp rax, 0; jne 0xbd2f; pop rax; ret; 
0x000000000000bd50: cmove eax, ecx; cmp rax, 0; jne 0xbd5b; pop rax; ret; 
0x000000000000c1a5: cmove eax, ecx; cmp rax, 0; jne 0xc1b3; add rsp, 0x78; ret; 
0x000000000000ceee: cmove eax, ecx; cmp rax, 0; jne 0xcefc; add rsp, 0x28; ret; 
0x000000000001d435: cmove edx, eax; mov rax, rcx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004a5f3: cmove esi, eax; sete dl; or rdx, 2; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x000000000004a7f2: cmove esi, ecx; mov edx, 2; sub rdx, rax; mov rdi, qword ptr [r12]; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x000000000000bca3: cmove rax, rcx; cmp rax, 0; jne 0xbcaf; pop rax; ret; 
0x000000000000bcd4: cmove rax, rcx; cmp rax, 0; jne 0xbce0; pop rax; ret; 
0x000000000000bd23: cmove rax, rcx; cmp rax, 0; jne 0xbd2f; pop rax; ret; 
0x000000000000bd4f: cmove rax, rcx; cmp rax, 0; jne 0xbd5b; pop rax; ret; 
0x000000000000c1a4: cmove rax, rcx; cmp rax, 0; jne 0xc1b3; add rsp, 0x78; ret; 
0x000000000000ceed: cmove rax, rcx; cmp rax, 0; jne 0xcefc; add rsp, 0x28; ret; 
0x000000000001d434: cmove rdx, rax; mov rax, rcx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004a5f2: cmove rsi, rax; sete dl; or rdx, 2; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x000000000004a7f1: cmove rsi, rcx; mov edx, 2; sub rdx, rax; mov rdi, qword ptr [r12]; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x0000000000015425: cmovl edi, dword ptr [rcx]; ret 0x860f; 
0x0000000000034993: cmovne ecx, eax; call rcx; 
0x0000000000034992: cmovne rcx, rax; call rcx; 
0x0000000000032e4d: cmovo eax, dword ptr [rbx]; add byte ptr [rax + 1], cl; ret; 
0x00000000000491a7: cmovs ecx, dword ptr [rbx + 0x1ba087f]; add byte ptr [rax], al; add bh, bh; and eax, 0x1d8c9; ret; 
0x0000000000049187: cmovs ecx, dword ptr [rbx + 0x1ba087f]; add byte ptr [rax], al; add bh, bh; and eax, 0x1d8e9; ret; 
0x000000000000d40d: cmovs ecx, dword ptr [rbx + 0x4808244c]; mov dword ptr [rdi + 8], ecx; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000000d2ab: cmovs ecx, dword ptr [rbx + 0x4838244c]; mov dword ptr [rdi + 8], ecx; mov rcx, qword ptr [rsp + 0x40]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x58; ret; 
0x000000000003fdfe: cmovs ecx, dword ptr [rbx - 0x72b7ef81]; je 0x3fe2b; add al, 0xff; adc eax, 0x26c8a; pop rcx; ret; 
0x000000000002816d: cmovs ecx, dword ptr [rcx + 0x48102444]; lea edi, [rsp + 0x10]; call 0x86c0; add rsp, 0x18; ret; 
0x0000000000046607: cmovs edi, edi; ret 0x214c; 
0x000000000004ef93: cmovs edi, edi; ret 0x3949; 
0x0000000000046521: cmovs edi, edi; ret 0x8948; 
0x000000000000710a: cmp al, 0; jne 0x70f0; test dx, dx; setne al; pop rbx; ret; 
0x000000000001cda1: cmp al, 0x10; add byte ptr [rdi], cl; test bl, bl; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000001cca1: cmp al, 0x10; add byte ptr [rdi], cl; test bl, bl; add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret 0x3948; 
0x0000000000019fc2: cmp al, 0x13; add byte ptr [rdi], cl; test byte ptr [rcx], dh; or dword ptr [rax], eax; add byte ptr [rcx - 1], cl; ret 0x394c; 
0x0000000000009cdb: cmp al, 0x24; add dword ptr [rbp + rdx - 0x15], esi; or eax, esi; and al, 7; add byte ptr [rdx + 0x59072444], cl; ret; 
0x000000000000b660: cmp al, 0x24; add rdi, 0x18; call 0xb6d0; add rsp, 0x18; ret; 
0x000000000000bc06: cmp al, 0x24; add rdi, 0xa8; call 0xbd40; add rsp, 0x18; ret; 
0x000000000000b9e0: cmp al, 0x24; add rdi, 4; call 0xb7a0; pop rax; ret; 
0x000000000000b37f: cmp al, 0x24; add rdi, 8; call 0xb9f0; pop rax; ret; 
0x000000000000b5fc: cmp al, 0x24; call 0xb620; add rsp, 0x18; ret; 
0x000000000000b6fc: cmp al, 0x24; call 0xb7c0; add rsp, 0x18; ret; 
0x000000000000b74c: cmp al, 0x24; call 0xb920; add rsp, 0x18; ret; 
0x000000000000b98c: cmp al, 0x24; call 0xb9c0; add rsp, 0x18; ret; 
0x000000000000bc5c: cmp al, 0x24; call 0xbcf0; add rsp, 0x18; ret; 
0x000000000002b3ca: cmp al, 0x24; call rbx; 
0x000000000000c16c: cmp al, 0x24; lea rax, [rip + 0x1eb2b]; call rax; 
0x0000000000011245: cmp al, 0x24; mov eax, dword ptr [rsp]; add rsp, 4; ret; 
0x000000000000a7a6: cmp al, 0x24; mov qword ptr [rsp + 8], rsi; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000004a7ff: cmp al, 0x24; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x000000000004a824: cmp al, 0x24; mov rax, qword ptr [r12 + 8]; lea rsi, [rip + 0xaaed]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000000b2a6: cmp al, 0x24; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000002a483: cmp al, 0x24; mov rdi, rsp; call qword ptr [rip + 0x3c7a2]; pop rcx; ret; 
0x000000000000aad5: cmp al, 0x24; mov rsi, rax; call 0xa8d0; mov rax, qword ptr [rsp + 8]; add rsp, 0xd8; ret; 
0x000000000002e64c: cmp al, 0x2b; call rax; 
0x0000000000035f45: cmp al, 0x48; lea ebp, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000001d2d3: cmp al, 0x4b; jne 0x1d355; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x20; ret; 
0x000000000001d3e8: cmp al, 0x4b; jne 0x1d38c; mov qword ptr [rdi + 8], rdx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000002fb25: cmp al, 0x91; add rdi, rcx; jmp rdi; 
0x000000000001d990: cmp al, 0x98; add rdi, r8; jmp rdi; 
0x0000000000042e35: cmp al, 0xbb; add rdi, rbx; jmp rdi; 
0x00000000000195d6: cmp al, 0xf; xchg eax, esp; ret 0x8d48; 
0x0000000000008b8b: cmp al, 1; add byte ptr [rax], al; mov ecx, eax; movsxd rcx, dword ptr [r12 + rcx*4]; add rcx, r12; jmp rcx; 
0x0000000000032c38: cmp al, 3; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000012d9f: cmp al, 5; add byte ptr [rbx + 0x41], bl; pop rsi; pop r15; ret; 
0x000000000004dc5e: cmp al, 7; mov edi, 0x8948107f; ret 0x8948; 
0x0000000000030343: cmp al, byte ptr [r15 + 0x11]; sete al; pop rbx; pop r14; pop r15; ret; 
0x000000000000b692: cmp al, byte ptr [rax]; add byte ptr [rax], al; pop rax; ret; 
0x000000000001d820: cmp al, byte ptr [rbx]; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x0000000000030344: cmp al, byte ptr [rdi + 0x11]; sete al; pop rbx; pop r14; pop r15; ret; 
0x0000000000013271: cmp al, byte ptr [rip + 0x5c415b00]; pop r13; pop r14; pop r15; ret; 
0x000000000000c1f2: cmp al, ch; call 0x4800c20a; lea eax, [rip + 0x1e051]; call rax; 
0x000000000000ba26: cmp al, ch; je 0xba5d; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000000c512: cmp al, ch; mov byte ptr [rdi], al; add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c2eb: cmp al, ch; out dx, eax; adc byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x1df58; call rax; 
0x000000000004a184: cmp bh, bh; adc eax, 0x1cd8d; add rsp, 0x68; ret; 
0x00000000000071b6: cmp bh, byte ptr [rcx + 2]; jne 0x7170; cmp r11, 3; jne 0x7170; pop rbx; ret; 
0x000000000002c541: cmp bl, 6; je 0x2c64e; movzx ecx, byte ptr [r10]; movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x000000000004b3a5: cmp byte ptr [r13 + 0x31], r8b; in al, 0xeb; test eax, 0x48ff894c; mov esi, dword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x20]; call qword ptr [rbp + 0x18]; 
0x0000000000037251: cmp byte ptr [rax + rax], al; add byte ptr [rcx], dh; rol byte ptr [rax + 0xf084979], cl; xchg eax, esp; ret 0x8b48; 
0x000000000000cfa6: cmp byte ptr [rax + rax], al; lea rcx, [rip + 0x56928]; lea rax, [rip - 0x37a7]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000000cf0e: cmp byte ptr [rax + rax], al; lea rcx, [rip + 0x569c0]; lea rax, [rip - 0x370f]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000001daac: cmp byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000000c51c: cmp byte ptr [rax - 0x75], cl; and al, 0x70; call rax; 
0x000000000000b3d1: cmp byte ptr [rax - 0x75], cl; jo 0xb3de; call 0xefc0; add rsp, 0x18; ret; 
0x000000000000b461: cmp byte ptr [rax - 0x75], cl; jo 0xb46e; call 0xef00; add rsp, 0x18; ret; 
0x000000000000b92e: cmp byte ptr [rax - 0x75], cl; jo 0xb93b; call 0xecf0; add rsp, 0x18; ret; 
0x000000000000b94e: cmp byte ptr [rax - 0x75], cl; jo 0xb95b; call 0xee50; add rsp, 0x18; ret; 
0x000000000000be96: cmp byte ptr [rax - 0x75], cl; jo 0xbea3; call 0xb150; pop rcx; ret; 
0x000000000004e0d5: cmp byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x73], cl; xor eax, 0x723b; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e0b9: cmp byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x73], cl; xor eax, 0x7258; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004b9e1: cmp byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x73], cl; xor eax, 0x992f; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a774: cmp byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x73], cl; xor eax, 0xab9c; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004aa9e: cmp byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x73], cl; xor eax, 0xa877; mov edx, 1; jmp rax; 
0x000000000000d2b0: cmp byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x75], r9b; and al, 0x40; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x58; ret; 
0x0000000000024126: cmp byte ptr [rax - 1], cl; ret 0x8948; 
0x000000000000d03b: cmp byte ptr [rax], al; add byte ptr [rax], al; call 0x7078; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000002c269: cmp byte ptr [rax], cl; sete al; pop rcx; ret; 
0x000000000004b3a6: cmp byte ptr [rbp + 0x31], al; in al, 0xeb; test eax, 0x48ff894c; mov esi, dword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x20]; call qword ptr [rbp + 0x18]; 
0x00000000000362a3: cmp byte ptr [rbp + 1], cl; ret 0xff31; 
0x0000000000007a92: cmp byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x0000000000007f6e: cmp byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; ret; 
0x0000000000045ead: cmp byte ptr [rcx + rcx*4 - 9], cl; call qword ptr [rip + 0x209f9]; add rsp, 0x68; pop rbx; pop r14; ret; 
0x000000000000dbd8: cmp byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x000000000004aa90: cmp byte ptr [rdi + 8], 0; je 0x4aa99; mov al, 1; ret; 
0x000000000002c25b: cmp byte ptr [rdi], 0x2e; je 0x2c269; xor eax, eax; pop rcx; ret; 
0x000000000000b1f9: cmp byte ptr [rdx + 0xd0], bh; call 0x7078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x00000000000126f3: cmp byte ptr [rdx + 8], 0xff; and eax, 0x54381; ret; 
0x000000000000aeaa: cmp byte ptr [rdx], al; add byte ptr [rax], al; ret; 
0x0000000000017154: cmp byte ptr [rip - 0x7cb80000], al; sar al, 0x75; ret 0x280f; 
0x0000000000017214: cmp byte ptr [rip - 0x7cb80000], al; sar al, 0x75; ret 0xc031; 
0x00000000000172a4: cmp byte ptr [rip - 0x7cb80000], al; sar eax, 0x75; ret 0xc749; 
0x0000000000008549: cmp byte ptr [rsp + rsi*2], al; ret; 
0x000000000004194b: cmp cl, 0x1a; jae 0x41969; xor ecx, ecx; shl rax, 0x20; or rax, rcx; ret; 
0x000000000001cf7b: cmp cl, 0x4b; jne 0x1ceea; mov qword ptr [rdi + 8], rdx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000001d114: cmp cl, 0x4b; jne 0x1d125; mov qword ptr [rdi + 8], rdx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x00000000000302da: cmp cl, bl; jne 0x30364; lea rax, [rip + 0x2173b]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000003d59a: cmp cl, byte ptr [rax - 1]; ret; 
0x000000000002ec5c: cmp cl, byte ptr [rcx + rcx*4 - 1]; call qword ptr [rip + 0x37b9a]; mov r15, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x0000000000015bd1: cmp cl, byte ptr [rcx - 0x7d]; sal al, 0x84; ror byte ptr [rdi], 0x95; ret; 
0x00000000000190d6: cmp cl, byte ptr [rdi]; xchg eax, esp; ret 0x8948; 
0x0000000000013db7: cmp cl, ch; xor al, 1; add byte ptr [rax], al; nop dword ptr [rax]; movzx edi, al; call rbx; 
0x00000000000071b5: cmp dil, byte ptr [r9 + 2]; jne 0x7170; cmp r11, 3; jne 0x7170; pop rbx; ret; 
0x000000000001cfa6: cmp dl, 0x4b; jne 0x1cf48; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000001d004: cmp dl, 0x4b; jne 0x1d16a; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x0000000000007108: cmp dword ptr [r8 + rax], edi; jne 0x70f0; test dx, dx; setne al; pop rbx; ret; 
0x0000000000007109: cmp dword ptr [rax + rax], edi; jne 0x70f0; test dx, dx; setne al; pop rbx; ret; 
0x000000000002bcde: cmp dword ptr [rax - 0x6bf0cfc1], eax; ret; 
0x0000000000021767: cmp dword ptr [rax - 1], ecx; ret; 
0x000000000000834e: cmp dword ptr [rax - 8], 0; sete al; pop rcx; ret; 
0x000000000002f7e5: cmp dword ptr [rbx + 0x10], 0; mov rax, qword ptr [r14 + 0x20]; jne 0x2f80b; mov rdi, r15; call rax; 
0x00000000000135bf: cmp dword ptr [rbx + 0x10], 2; jae 0x135e5; pop rbx; ret; 
0x00000000000135b9: cmp dword ptr [rbx + 8], 2; jae 0x135d6; cmp dword ptr [rbx + 0x10], 2; jae 0x135e5; pop rbx; ret; 
0x00000000000330cc: cmp dword ptr [rbx], eax; add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rsi*2 + 0x48], 0x89; ret; 
0x000000000001d98b: cmp dword ptr [rbx], eax; add byte ptr [rcx + 0x63], cl; cmp al, 0x98; add rdi, r8; jmp rdi; 
0x000000000000cf7e: cmp dword ptr [rdi], 0; jne 0xcf90; mov rax, qword ptr [rsp]; mov rax, qword ptr [rax + 8]; add rsp, 0x28; ret; 
0x00000000000135f0: cmp dword ptr [rdi], 2; jae 0x135f6; ret; 
0x000000000000bd4c: cmp dword ptr [rdi], 4; cmove rax, rcx; cmp rax, 0; jne 0xbd5b; pop rax; ret; 
0x00000000000191a6: cmp dword ptr [rdi], ecx; xchg eax, esp; ret 0x8948; 
0x000000000001314b: cmp dword ptr [rip + 0x5c415b00], eax; pop r13; pop r14; pop r15; ret; 
0x000000000004b3d7: cmp eax, -1; je 0x4b3ed; mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x00000000000281ec: cmp eax, -1; jne 0x282b8; call rbx; 
0x000000000000bca8: cmp eax, 0; jne 0xbcaf; pop rax; ret; 
0x000000000000bcd9: cmp eax, 0; jne 0xbce0; pop rax; ret; 
0x000000000000bd28: cmp eax, 0; jne 0xbd2f; pop rax; ret; 
0x000000000000bd54: cmp eax, 0; jne 0xbd5b; pop rax; ret; 
0x000000000000c1a9: cmp eax, 0; jne 0xc1b3; add rsp, 0x78; ret; 
0x000000000000ce6c: cmp eax, 0; jne 0xce7a; mov eax, dword ptr [rsp + 0x24]; add rsp, 0x48; ret; 
0x000000000000cef2: cmp eax, 0; jne 0xcefc; add rsp, 0x28; ret; 
0x0000000000022d48: cmp eax, 0x18; ja 0x22c38; lea rcx, [rip + 0x2e788]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000022cf4: cmp eax, 0x1a; ja 0x22c38; lea rcx, [rip + 0x2e840]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002bfe8: cmp eax, 0x2592f; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000001c1f6: cmp eax, 0x2b; ja 0x1c210; lea rdi, [rip + 0x34cba]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000024400: cmp eax, 0x2d1ab; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x0000000000023434: cmp eax, 0x2e1d3; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000001c1fd: cmp eax, 0x34cba; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000010c2f: cmp eax, 0x3fdb5; lea rdx, [rip + 0x52df5]; lea rax, [rip - 0x7752]; mov esi, 0x2b; call rax; 
0x00000000000106d2: cmp eax, 0x40312; lea rdx, [rip + 0x5333a]; lea rax, [rip - 0x71f5]; mov esi, 0x2b; call rax; 
0x000000000000d96c: cmp eax, 0x42e7f; lea rdx, [rip + 0x55fb0]; lea rax, [rip - 0x448f]; mov esi, 0x49; call rax; 
0x000000000000d061: cmp eax, 0x4374d; lea rcx, [rip + 0x5686b]; lea rax, [rip - 0x3864]; mov esi, 0x2b; lea rdx, [rsp + 0x20]; call rax; 
0x000000000000cf0c: cmp eax, 0x438a2; lea rcx, [rip + 0x569c0]; lea rax, [rip - 0x370f]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x0000000000009b3a: cmp eax, 0x464d1; lea rdx, [rip + 0x59a9a]; lea rax, [rip - 0x65d]; mov esi, 0x28; call rax; 
0x000000000002e741: cmp eax, 0x49de8949; dec esi; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000013c4b: cmp eax, 0x49fe894d; dec esi; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x0000000000009ab9: cmp eax, 0x5d542; call 0x7080; call 0x9a30; mov byte ptr [rip + 0x5d569], 1; pop rbp; ret; 
0x0000000000013592: cmp eax, 0x80000000; je 0x1359a; ret; 
0x0000000000041a8f: cmp eax, 0x89480002; retf 0x8948; sar edi, 0x15; ret 0x254; 
0x000000000000c8a3: cmp eax, 0x8d480004; mov esp, 0xc824; add byte ptr [rdx + 7], bh; call 0xb180; lea rax, [rip + 0x210e1]; call rax; 
0x000000000002b51d: cmp eax, 0xff7b8d4c; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000000cc49: cmp eax, 0xfffffef2; xor ecx, ecx; call 0xd1f0; pop rcx; ret; 
0x0000000000012171: cmp eax, 1; jne 0x121b6; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000012d5d: cmp eax, 1; jne 0x12da2; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000137d4: cmp eax, 1; jne 0x13819; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000013872: cmp eax, 1; jne 0x138b7; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000013a92: cmp eax, 1; jne 0x13ad7; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000013ba6: cmp eax, 1; jne 0x13beb; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002a1ce: cmp eax, 1; jne 0x2a20e; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002a6aa: cmp eax, 1; jne 0x2a6ed; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b395: cmp eax, 1; jne 0x2b27f; lea r12, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b6db: cmp eax, 1; jne 0x2b71b; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b821: cmp eax, 1; jne 0x2b861; lea r14, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000002d43b: cmp eax, 1; jne 0x2d47b; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002d4fb: cmp eax, 1; jne 0x2d53b; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000031298: cmp eax, 1; jne 0x312ef; lea rbx, [r15 - 1]; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x0000000000035f41: cmp eax, 1; jne 0x35f82; lea rbp, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000036098: cmp eax, 1; jne 0x360d8; lea r14, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000003b577: cmp eax, 1; jne 0x3b5b7; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002815a: cmp eax, 4; jne 0x28164; add rsp, 0x18; ret; 
0x000000000002a257: cmp eax, 4; jne 0x2a265; lea rax, [rip + 0x3cde5]; pop rcx; ret; 
0x000000000002a457: cmp eax, 4; jne 0x2a465; lea rax, [rip + 0x3cc1d]; pop rcx; ret; 
0x0000000000007dea: cmp eax, 4; jne 0x7df4; add rsp, 0x28; ret; 
0x0000000000007e3a: cmp eax, 4; jne 0x7e44; add rsp, 0x28; ret; 
0x0000000000007e8a: cmp eax, 4; jne 0x7e94; add rsp, 0x28; ret; 
0x000000000001cb28: cmp eax, 5; ja 0x1cb47; lea rcx, [rip + 0x34708]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cb88: cmp eax, 5; ja 0x1cba3; lea rcx, [rip + 0x346c0]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cbf8: cmp eax, 5; ja 0x1cc13; lea rcx, [rip + 0x34668]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001c774: cmp eax, 7; ja 0x1cb02; lea rcx, [rip + 0x34a98]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cfc9: cmp eax, 7; ja 0x1d037; lea rcx, [rip + 0x342c7]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001d199: cmp eax, 7; ja 0x1d1fe; lea rcx, [rip + 0x34117]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000025294: cmp eax, 7; ja 0x24fc9; lea rcx, [rip + 0x2c3c8]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000025104: cmp eax, 7; ja 0x266e2; lea rcx, [rip + 0x2c518]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004cc59: cmp eax, dword ptr [rax + rax]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000033108: cmp eax, dword ptr [rbx]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000000904b: cmp eax, dword ptr [rcx]; add byte ptr [rax], al; mov ecx, eax; movsxd rcx, dword ptr [r12 + rcx*4]; add rcx, r12; jmp rcx; 
0x000000000000fcc4: cmp eax, dword ptr [rsi]; setb al; and al, 1; movzx eax, al; ret; 
0x000000000003d18d: cmp eax, ecx; cmovb rax, rdi; cmp rsi, rdx; cmovb rax, rdi; mov rdx, rcx; ret; 
0x000000000003f595: cmp eax, ecx; jae 0x3f5a2; mov qword ptr [rdi + 0x18], 0; ret; 
0x0000000000009a3f: cmp eax, edi; je 0x9a58; mov rax, qword ptr [rip + 0x5ce56]; test rax, rax; je 0x9a58; jmp rax; 
0x00000000000071bc: cmp ebx, 3; jne 0x7170; pop rbx; ret; 
0x0000000000019e60: cmp ecx, 0x25; ja 0x19e93; lea rax, [rip + 0x36e84]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000001ab3c: cmp ecx, 0x2b; ja 0x1abf9; movsxd rax, dword ptr [r9 + rcx*4]; add rax, r9; jmp rax; 
0x000000000002b519: cmp ecx, 1; jne 0x2b55b; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b619: cmp ecx, 1; jne 0x2b65b; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002445b: cmp ecx, 5; ja 0x2439a; lea rdx, [rip + 0x2d159]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000024435: cmp ecx, 5; ja 0x2439a; lea rdx, [rip + 0x2d197]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000024413: cmp ecx, 5; ja 0x2439a; lea rdx, [rip + 0x2d1d5]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000001ed57: cmp ecx, 7; ja 0x20b24; lea rdx, [rip + 0x326ed]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002517e: cmp ecx, 7; ja 0x266f0; lea rdx, [rip + 0x2c4be]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002c329: cmp ecx, dword ptr [rax - 0x39]; ret 0xffff; 
0x000000000002a1d2: cmp ecx, dword ptr [rbp + rcx*4 + 0x73]; dec dword ptr [rax - 0x75]; jnp 0x2a1da; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b825: cmp ecx, dword ptr [rbp + rcx*4 + 0x75]; dec dword ptr [rax - 0x75]; jge 0x2b82d; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000003609c: cmp ecx, dword ptr [rbp + rcx*4 + 0x75]; dec dword ptr [rax - 0x75]; jge 0x360a4; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000002b6df: cmp ecx, dword ptr [rbp + rcx*4 + 0x7b]; dec dword ptr [rax - 0x75]; jnp 0x2b6e7; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002d43f: cmp ecx, dword ptr [rbp + rcx*4 + 0x7b]; dec dword ptr [rax - 0x75]; jnp 0x2d447; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002d4ff: cmp ecx, dword ptr [rbp + rcx*4 + 0x7b]; dec dword ptr [rax - 0x75]; jnp 0x2d507; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003b57b: cmp ecx, dword ptr [rbp + rcx*4 + 0x7b]; dec dword ptr [rax - 0x75]; jnp 0x3b583; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000019276: cmp ecx, dword ptr [rdi]; xchg eax, esp; ret 0x8948; 
0x000000000003d245: cmp ecx, eax; jb 0x3d230; ret; 
0x000000000004ef98: cmp ecx, edx; jne 0x4ef80; mov rax, r9; and al, 1; pop rcx; ret; 
0x000000000004668a: cmp ecx, esi; jae 0x467ac; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + rcx], al; pop rbx; ret; 
0x0000000000042e23: cmp edi, 0x17; ja 0x43349; lea rbx, [rip + 0x1128d]; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x000000000004df31: cmp edi, 0x20; jae 0x4df3a; xor eax, eax; pop rcx; ret; 
0x000000000004ee75: cmp edi, 0x21; setb al; or al, cl; ret; 
0x000000000004df3c: cmp edi, 0x7f; jae 0x4df43; pop rcx; ret; 
0x000000000004e034: cmp edi, 0xfffd01f0; setb al; pop rcx; ret; 
0x000000000004f079: cmp edi, eax; sbb rsi, r9; sbb r10, -1; mov rax, r10; mov rdx, r11; ret; 
0x0000000000038ae0: cmp edi, esi; dec dword ptr [rax - 0x7d]; ret; 
0x000000000002c242: cmp edi, esi; jne 0x2c24a; xor eax, eax; pop rcx; ret; 
0x000000000000bca0: cmp edx, 0; cmove rax, rcx; cmp rax, 0; jne 0xbcaf; pop rax; ret; 
0x000000000000bcd1: cmp edx, 0; cmove rax, rcx; cmp rax, 0; jne 0xbce0; pop rax; ret; 
0x000000000000bd20: cmp edx, 0; cmove rax, rcx; cmp rax, 0; jne 0xbd2f; pop rax; ret; 
0x000000000000ceea: cmp edx, 0; cmove rax, rcx; cmp rax, 0; jne 0xcefc; add rsp, 0x28; ret; 
0x000000000001cba6: cmp edx, 0x100; setb al; and al, cl; ret; 
0x000000000002750a: cmp edx, 0x56; ja 0x2757e; movsxd rcx, dword ptr [r14 + rdx*4]; add rcx, r14; jmp rcx; 
0x000000000002db66: cmp edx, 1; jne 0x2dbaa; lea r15, [r12 - 1]; mov rdi, qword ptr [r12 - 1]; mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x000000000003f549: cmp edx, 6; jae 0x3f557; add rdi, 0x10; mov rax, rdi; pop rcx; ret; 
0x000000000003f4d9: cmp edx, dword ptr [rax]; inc qword ptr [rbx + 8]; add rsp, 0x18; pop rbx; pop r14; ret; 
0x00000000000302e5: cmp edx, dword ptr [rdi]; add al, byte ptr [rax]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x00000000000354e9: cmp edx, dword ptr [rip - 0x76b7fffd]; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x4de8; 
0x0000000000046823: cmp edx, esi; jae 0x46915; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + r10], al; pop rax; ret; 
0x000000000003f5d7: cmp esi, 2; sete al; ret; 
0x000000000004e0dd: cmp esi, dword ptr [rdx]; add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; 
0x000000000004e0dd: cmp esi, dword ptr [rdx]; add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000001913c: cmp esi, eax; jne 0x19157; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001920c: cmp esi, eax; jne 0x19227; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000192dc: cmp esi, eax; jne 0x192f7; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000193bb: cmp esi, eax; jne 0x193d6; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001949b: cmp esi, eax; jne 0x194b6; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001956f: cmp esi, eax; jne 0x1958a; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001963d: cmp esi, eax; jne 0x19658; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001970c: cmp esi, eax; jne 0x19727; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000197ea: cmp esi, eax; jne 0x19805; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000198cb: cmp esi, eax; jne 0x198e6; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000199a5: cmp esi, eax; jne 0x199c0; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000019a74: cmp esi, eax; jne 0x19a8f; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000003d4f4: cmp esi, eax; jne 0x3d50f; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000003da2f: cmp esi, eax; jne 0x3da4a; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000003dafc: cmp esi, eax; jne 0x3db17; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004924e: cmp esi, eax; jne 0x49269; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000007a8b: cmp esi, eax; jne 0x7aa6; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000007b54: cmp esi, eax; jne 0x7b6f; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000007c2c: cmp esi, eax; jne 0x7c47; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000092f4: cmp esi, eax; jne 0x930f; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000000941e: cmp esi, eax; jne 0x9439; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004d243: cmp esi, edi; jne 0x4d230; ret; 
0x000000000003d194: cmp esi, edx; cmovb rax, rdi; mov rdx, rcx; ret; 
0x00000000000330cb: cmp qword ptr [r11], rax; add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rsi*2 + 0x48], 0x89; ret; 
0x000000000000834d: cmp qword ptr [rax - 8], 0; sete al; pop rcx; ret; 
0x000000000002f7e4: cmp qword ptr [rbx + 0x10], 0; mov rax, qword ptr [r14 + 0x20]; jne 0x2f80b; mov rdi, r15; call rax; 
0x000000000000cf7d: cmp qword ptr [rdi], 0; jne 0xcf90; mov rax, qword ptr [rsp]; mov rax, qword ptr [rax + 8]; add rsp, 0x28; ret; 
0x0000000000046822: cmp r10, rsi; jae 0x46915; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + r10], al; pop rax; ret; 
0x000000000003f4d8: cmp r10d, dword ptr [rax]; inc qword ptr [rbx + 8]; add rsp, 0x18; pop rbx; pop r14; ret; 
0x00000000000071bb: cmp r11, 3; jne 0x7170; pop rbx; ret; 
0x000000000002c540: cmp r11b, 6; je 0x2c64e; movzx ecx, byte ptr [r10]; movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x000000000003d18c: cmp r8, rcx; cmovb rax, rdi; cmp rsi, rdx; cmovb rax, rdi; mov rdx, rcx; ret; 
0x000000000004ef97: cmp r9, rdx; jne 0x4ef80; mov rax, r9; and al, 1; pop rcx; ret; 
0x000000000004b3d6: cmp rax, -1; je 0x4b3ed; mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000000bca7: cmp rax, 0; jne 0xbcaf; pop rax; ret; 
0x000000000000bcd8: cmp rax, 0; jne 0xbce0; pop rax; ret; 
0x000000000000bd27: cmp rax, 0; jne 0xbd2f; pop rax; ret; 
0x000000000000bd53: cmp rax, 0; jne 0xbd5b; pop rax; ret; 
0x000000000000c1a8: cmp rax, 0; jne 0xc1b3; add rsp, 0x78; ret; 
0x000000000000ce6b: cmp rax, 0; jne 0xce7a; mov eax, dword ptr [rsp + 0x24]; add rsp, 0x48; ret; 
0x000000000000cef1: cmp rax, 0; jne 0xcefc; add rsp, 0x28; ret; 
0x000000000001cb27: cmp rax, 5; ja 0x1cb47; lea rcx, [rip + 0x34708]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cb87: cmp rax, 5; ja 0x1cba3; lea rcx, [rip + 0x346c0]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cbf7: cmp rax, 5; ja 0x1cc13; lea rcx, [rip + 0x34668]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001c773: cmp rax, 7; ja 0x1cb02; lea rcx, [rip + 0x34a98]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000fcc3: cmp rax, qword ptr [rsi]; setb al; and al, 1; movzx eax, al; ret; 
0x000000000003f594: cmp rax, rcx; jae 0x3f5a2; mov qword ptr [rdi + 0x18], 0; ret; 
0x0000000000009a3e: cmp rax, rdi; je 0x9a58; mov rax, qword ptr [rip + 0x5ce56]; test rax, rax; je 0x9a58; jmp rax; 
0x000000000002445a: cmp rcx, 5; ja 0x2439a; lea rdx, [rip + 0x2d159]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000024434: cmp rcx, 5; ja 0x2439a; lea rdx, [rip + 0x2d197]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000024412: cmp rcx, 5; ja 0x2439a; lea rdx, [rip + 0x2d1d5]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000003d244: cmp rcx, r8; jb 0x3d230; ret; 
0x0000000000046689: cmp rcx, rsi; jae 0x467ac; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + rcx], al; pop rbx; ret; 
0x000000000004f078: cmp rdi, r8; sbb rsi, r9; sbb r10, -1; mov rax, r10; mov rdx, r11; ret; 
0x000000000002c241: cmp rdi, rsi; jne 0x2c24a; xor eax, eax; pop rcx; ret; 
0x000000000000bc9f: cmp rdx, 0; cmove rax, rcx; cmp rax, 0; jne 0xbcaf; pop rax; ret; 
0x000000000000bcd0: cmp rdx, 0; cmove rax, rcx; cmp rax, 0; jne 0xbce0; pop rax; ret; 
0x000000000000bd1f: cmp rdx, 0; cmove rax, rcx; cmp rax, 0; jne 0xbd2f; pop rax; ret; 
0x000000000000cee9: cmp rdx, 0; cmove rax, rcx; cmp rax, 0; jne 0xcefc; add rsp, 0x28; ret; 
0x000000000001cba5: cmp rdx, 0x100; setb al; and al, cl; ret; 
0x000000000003f548: cmp rdx, 6; jae 0x3f557; add rdi, 0x10; mov rax, rdi; pop rcx; ret; 
0x000000000001913b: cmp rsi, rax; jne 0x19157; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001920b: cmp rsi, rax; jne 0x19227; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000192db: cmp rsi, rax; jne 0x192f7; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000193ba: cmp rsi, rax; jne 0x193d6; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001949a: cmp rsi, rax; jne 0x194b6; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001956e: cmp rsi, rax; jne 0x1958a; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001963c: cmp rsi, rax; jne 0x19658; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001970b: cmp rsi, rax; jne 0x19727; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000197e9: cmp rsi, rax; jne 0x19805; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000198ca: cmp rsi, rax; jne 0x198e6; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000199a4: cmp rsi, rax; jne 0x199c0; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000019a73: cmp rsi, rax; jne 0x19a8f; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000003d4f3: cmp rsi, rax; jne 0x3d50f; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000003da2e: cmp rsi, rax; jne 0x3da4a; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000003dafb: cmp rsi, rax; jne 0x3db17; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004924d: cmp rsi, rax; jne 0x49269; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000007a8a: cmp rsi, rax; jne 0x7aa6; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000007b53: cmp rsi, rax; jne 0x7b6f; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000007c2b: cmp rsi, rax; jne 0x7c47; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000092f3: cmp rsi, rax; jne 0x930f; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000000941d: cmp rsi, rax; jne 0x9439; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004d242: cmp rsi, rdi; jne 0x4d230; ret; 
0x000000000003d193: cmp rsi, rdx; cmovb rax, rdi; mov rdx, rcx; ret; 
0x000000000003f5d6: cmp si, 2; sete al; ret; 
0x00000000000116f3: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0x420b247d; insd dword ptr [rdi], dx; ret; 
0x000000000000a1ad: cmpsb byte ptr [rsi], byte ptr [rdi]; mov rax, qword ptr [rsp + 0x50]; add rsp, 0xe8; ret; 
0x0000000000043676: cmpsb byte ptr [rsi], byte ptr [rdi]; or al, byte ptr [rcx]; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000004a54f: cmpsd dword ptr [rsi], dword ptr [rdi]; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000003f5ff: cwde; add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x000000000004c558: cwde; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000004bad1: cwde; add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000001c780: cwde; add rax, qword ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001d991: cwde; add rdi, r8; jmp rdi; 
0x000000000004e7d5: dec byte ptr [rax - 0x77]; ret 0x8348; 
0x0000000000014cb4: dec byte ptr [rax - 0x7d]; ret 0x48fe; 
0x000000000002974e: dec dword ptr [r8 - 0x7d]; ret; 
0x000000000001c14b: dec dword ptr [rax + 0x21]; ret; 
0x000000000002b0fb: dec dword ptr [rax + 0x29]; ret; 
0x0000000000008810: dec dword ptr [rax + 0x39]; ret; 
0x000000000000d23d: dec dword ptr [rax + 0xf072444]; mov dh, 0x44; and al, 7; pop rcx; ret; 
0x000000000001f30e: dec dword ptr [rax - 0x39]; ret 0xffff; 
0x0000000000024463: dec dword ptr [rax - 0x73]; adc eax, 0x2d159; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002443d: dec dword ptr [rax - 0x73]; adc eax, 0x2d197; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000000c8b7: dec dword ptr [rax - 0x73]; add eax, 0x210e1; call rax; 
0x000000000002a469: dec dword ptr [rax - 0x73]; add eax, 0x3cc0f; pop rcx; ret; 
0x000000000002a269: dec dword ptr [rax - 0x73]; add eax, 0x3cdd7; pop rcx; ret; 
0x000000000000c9c0: dec dword ptr [rax - 0x73]; add eax, 0xffffcc58; call rax; 
0x000000000004a6fe: dec dword ptr [rax - 0x73]; je 0x4a727; sub byte ptr [rcx + rcx*4 - 1], cl; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000002529c: dec dword ptr [rax - 0x73]; or eax, 0x2c3c8; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000022d50: dec dword ptr [rax - 0x73]; or eax, 0x2e788; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000022cfc: dec dword ptr [rax - 0x73]; or eax, 0x2e840; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003a222: dec dword ptr [rax - 0x73]; pop rbp; dec dword ptr [rax - 0x75]; jge 0x3a22a; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000000ce9e: dec dword ptr [rax - 0x73]; push rsp; and al, 0x37; call rax; 
0x0000000000021d4e: dec dword ptr [rax - 0x73]; sbb eax, 0xfffef6ea; call rbx; 
0x000000000000a560: dec dword ptr [rax - 0x75]; add al, 0x24; pop rcx; ret; 
0x000000000000b203: dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x118; ret; 
0x000000000000a492: dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x18; ret; 
0x000000000000fc5b: dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x48; ret; 
0x000000000000a917: dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x58; ret; 
0x000000000000d5c7: dec dword ptr [rax - 0x75]; and al, 0x10; mov qword ptr [rax + 0x40], 0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x168; ret; 
0x000000000000d043: dec dword ptr [rax - 0x75]; and al, 0x18; add rsp, 0x38; ret; 
0x000000000000aea1: dec dword ptr [rax - 0x75]; and al, 0x28; add rsp, 0x238; ret; 
0x000000000000c2b8: dec dword ptr [rax - 0x75]; and al, 0x28; add rsp, 0x78; ret; 
0x0000000000010700: dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x58; ret; 
0x000000000000aade: dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0xd8; ret; 
0x000000000004a706: dec dword ptr [rax - 0x75]; and al, 8; call qword ptr [rax + 0x18]; 
0x000000000004b3ae: dec dword ptr [rax - 0x75]; je 0x4b3d7; adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x20; call qword ptr [rbp + 0x18]; 
0x000000000002b829: dec dword ptr [rax - 0x75]; jge 0x2b82d; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x00000000000360a0: dec dword ptr [rax - 0x75]; jge 0x360a4; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000003a226: dec dword ptr [rax - 0x75]; jge 0x3a22a; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000003ce93: dec dword ptr [rax - 0x75]; jge 0x3ce97; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000000cd6b: dec dword ptr [rax - 0x75]; jl 0xcd94; or byte ptr [rax - 0x73], cl; xor eax, 0x56b28; lea rax, [rip - 0x390f]; call rax; 
0x0000000000012179: dec dword ptr [rax - 0x75]; jnp 0x1217d; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000012d65: dec dword ptr [rax - 0x75]; jnp 0x12d69; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000137dc: dec dword ptr [rax - 0x75]; jnp 0x137e0; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000001387a: dec dword ptr [rax - 0x75]; jnp 0x1387e; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000013a9a: dec dword ptr [rax - 0x75]; jnp 0x13a9e; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000013bae: dec dword ptr [rax - 0x75]; jnp 0x13bb2; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000292b2: dec dword ptr [rax - 0x75]; jnp 0x292b6; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002a1d6: dec dword ptr [rax - 0x75]; jnp 0x2a1da; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002a6b2: dec dword ptr [rax - 0x75]; jnp 0x2a6b6; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b3a1: dec dword ptr [rax - 0x75]; jnp 0x2b3a5; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b521: dec dword ptr [rax - 0x75]; jnp 0x2b525; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b621: dec dword ptr [rax - 0x75]; jnp 0x2b625; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b6e3: dec dword ptr [rax - 0x75]; jnp 0x2b6e7; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002d443: dec dword ptr [rax - 0x75]; jnp 0x2d447; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002d503: dec dword ptr [rax - 0x75]; jnp 0x2d507; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000035f49: dec dword ptr [rax - 0x75]; jnp 0x35f4d; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003b57f: dec dword ptr [rax - 0x75]; jnp 0x3b583; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b3c3: dec dword ptr [rax - 0x75]; push rax; adc byte ptr [rcx - 0x75], cl; cmp al, 0x24; call rbx; 
0x000000000004a642: dec dword ptr [rax - 0x77]; out dx, al; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x00000000000170e6: dec dword ptr [rax - 0x77]; ret 0x8348; 
0x00000000000394fa: dec dword ptr [rax - 0x77]; ret 0xcfeb; 
0x0000000000019aff: dec dword ptr [rax - 0x77]; ret; 
0x00000000000252bf: dec dword ptr [rax - 0x77]; retf 0x148; ret 0x840f; 
0x000000000002abfe: dec dword ptr [rax - 0x7b]; fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x000000000002e731: dec dword ptr [rax - 0x7b]; sal byte ptr [rax + rcx*2 + 0x48], 0x89; ret; 
0x000000000002f729: dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rcx*2 + 0x48], 0x89; ret; 
0x0000000000045551: dec dword ptr [rax - 0x7d]; ret 0x8d04; 
0x0000000000045577: dec dword ptr [rax - 0x7d]; ret 0xc103; 
0x0000000000007620: dec dword ptr [rax - 0x7d]; ret; 
0x0000000000012144: dec dword ptr [rax - 0x7f]; ret; 
0x00000000000287f0: dec dword ptr [rax - 8]; mov rdi, r14; call qword ptr [rbp]; 
0x000000000001fa92: dec dword ptr [rbp + 1]; ret 0xd231; 
0x000000000002b39d: dec dword ptr [rbp + rcx*4 + 0x63]; dec dword ptr [rax - 0x75]; jnp 0x2b3a5; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000037826: dec dword ptr [rbx + 0xf]; test dword ptr [rax - 0x9fffffe], ebp; ret; 
0x0000000000028aef: dec dword ptr [rcx + rcx*4 - 0x10]; lea rax, [r14 - 0x20]; pop rbx; pop r14; pop r15; ret; 
0x000000000004f081: dec dword ptr [rcx + rcx*4 - 0x30]; mov rdx, r11; ret; 
0x000000000004a63f: dec dword ptr [rcx + rcx*4 - 1]; mov rsi, rbp; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000030aa5: dec dword ptr [rcx + rcx*4 - 8]; add rsp, 0x2e0; pop rbx; pop r14; pop r15; ret; 
0x00000000000287f5: dec dword ptr [rcx + rcx*4 - 9]; call qword ptr [rbp]; 
0x0000000000007616: dec dword ptr [rcx + rdi + 0x43]; xor byte ptr [rdi], cl; or dword ptr [rdi - 2], 0xffffffff; dec dword ptr [rax - 0x7d]; ret; 
0x000000000002db74: dec dword ptr [rcx - 0x75]; and al, 7; call qword ptr [rax]; 
0x00000000000312a0: dec dword ptr [rcx - 0x75]; jg 0x312a4; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000002db6f: dec dword ptr [rcx - 0x75]; jl 0x2db98; dec dword ptr [rcx - 0x75]; and al, 7; call qword ptr [rax]; 
0x000000000002ba96: dec dword ptr [rcx - 0x75]; jle 0x2ba9a; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x000000000004e1cc: dec dword ptr [rcx - 1]; ret 0x144; 
0x000000000000a5a5: dec dword ptr [rdi]; mov bh, 0x80; sbb al, byte ptr [rdx]; add byte ptr [rax], al; pop rcx; ret; 
0x000000000002fb18: dec dword ptr [rdi]; mov dh, 0xd1; lea rcx, [rip + 0x21eed]; movsxd rdi, dword ptr [rcx + rdx*4]; add rdi, rcx; jmp rdi; 
0x000000000001eade: dec dword ptr [rdi]; mov eax, esi; add dword ptr [rax], eax; add byte ptr [rcx + 0x39], cl; ret; 
0x0000000000010ba8: dec dword ptr [rdi]; or ebp, ebx; add rsp, 0x78; ret; 
0x000000000000d72f: dec dword ptr [rdi]; or ebp, ebx; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x000000000000ce27: dec dword ptr [rdi]; or ebp, ebx; mov rdx, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x0000000000009ca1: dec dword ptr [rdi]; or ebp, ebx; out dx, eax; mov rax, qword ptr [rsp + 0x38]; add rsp, 0x98; ret; 
0x000000000000b876: dec dword ptr [rdi]; or ecx, dword ptr [rax - 0x73]; add eax, 0xffffdda0; call rax; 
0x000000000000b536: dec dword ptr [rdi]; or ecx, dword ptr [rax - 0x73]; add eax, 0xffffe0e0; call rax; 
0x0000000000030f9c: dec dword ptr [rdi]; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000000b76c: dec dword ptr [rdi]; or edx, dword ptr [rax + 0x1ae850]; add byte ptr [rax], al; pop rax; ret; 
0x000000000000b61c: dec dword ptr [rdi]; or edx, dword ptr [rax + 0x455ae850]; add byte ptr [rax], al; pop rax; ret; 
0x000000000002b3bd: dec dword ptr [rdi]; test byte ptr [rsi + rdi*8 - 0x74b70001], ch; push rax; adc byte ptr [rcx - 0x75], cl; cmp al, 0x24; call rbx; 
0x0000000000014126: dec dword ptr [rdi]; xchg eax, esp; ret 0xc208; 
0x000000000000c3f3: dec dword ptr [rdx + 0x48032444]; add esp, 0x88; ret; 
0x000000000000fc9c: dec dword ptr [rdx + 0x48172444]; add esp, 0x18; ret; 
0x0000000000049b6d: dec ecx; mov rax, rdx; neg rax; and rax, rcx; ret; 
0x000000000004a0f5: dec edx; call qword ptr [rip + 0x1ce73]; mov rax, rbx; pop rbx; ret; 
0x000000000004b191: dec esi; je 0x4b1a3; mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000004b111: dec esi; je 0x4b384; mov rdi, rbp; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x0000000000013589: dec esi; mov eax, esi; and eax, 0xbfffffff; cmp eax, 0x80000000; je 0x1359a; ret; 
0x000000000004a015: dec esi; mov qword ptr [rdi], rsi; ret; 
0x0000000000013c50: dec esi; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000002e746: dec esi; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002ab65: dec esp; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x00000000000170e5: dec qword ptr [rax - 0x77]; ret 0x8348; 
0x00000000000287ef: dec qword ptr [rax - 8]; mov rdi, r14; call qword ptr [rbp]; 
0x000000000002ab64: dec r12; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000004b190: dec r14; je 0x4b1a3; mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000004b110: dec r14; je 0x4b384; mov rdi, rbp; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x0000000000013c4f: dec r14; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000002e745: dec r14; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000049b6c: dec rcx; mov rax, rdx; neg rax; and rax, rcx; ret; 
0x000000000004a0f4: dec rdx; call qword ptr [rip + 0x1ce73]; mov rax, rbx; pop rbx; ret; 
0x000000000004a014: dec rsi; mov qword ptr [rdi], rsi; ret; 
0x000000000004a011: div byte ptr [rbp + 0x48]; dec esi; mov qword ptr [rdi], rsi; ret; 
0x000000000003d012: div byte ptr [rsi + rax - 1]; and eax, 0x29a65; ret; 
0x0000000000018fe2: div byte ptr [rsi + rax - 1]; and eax, 0x4da95; ret; 
0x000000000002c243: div dword ptr [rbp + 4]; xor eax, eax; pop rcx; ret; 
0x000000000002f5a5: div dword ptr [rdi + 3]; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000004f0cb: div eax; mov r10, rax; mov rax, r10; mov rdx, r11; ret; 
0x000000000004f095: div eax; mov r10, rax; xor r11d, r11d; mov rax, r10; mov rdx, r11; ret; 
0x000000000004f193: div eax; xor esi, esi; mov r11, rdx; mov rax, r11; mov rdx, rsi; ret; 
0x000000000004f0ca: div r8; mov r10, rax; mov rax, r10; mov rdx, r11; ret; 
0x000000000004f094: div r8; mov r10, rax; xor r11d, r11d; mov rax, r10; mov rdx, r11; ret; 
0x000000000004f192: div r8; xor esi, esi; mov r11, rdx; mov rax, r11; mov rdx, rsi; ret; 
0x000000000003efd3: fadd dword ptr [rax + rax]; add byte ptr [rax + 0x6b], cl; ret; 
0x000000000000aae7: fadd dword ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000296d0: fadd dword ptr [rbx - 0x72b7fc20]; or eax, 0x2815d; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029175: fadd dword ptr [rbx]; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000004963e: fadd dword ptr [rcx]; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000002a212: fcomp dword ptr [rbx + 0x41]; pop rsi; pop r15; ret; 
0x0000000000049b19: fcomp dword ptr [rbx + 0x41]; pop rsp; pop r13; pop r14; pop r15; ret; 
0x000000000004ac15: ffreep st(2); add dword ptr [rax], eax; pop rcx; ret; 
0x0000000000018fc6: fiadd dword ptr [rax + rax]; pop rbx; ret; 
0x0000000000018fe8: fiadd dword ptr [rax + rax]; ret; 
0x0000000000046ed6: fiadd dword ptr [rax]; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000046b55: fiadd word ptr [rax]; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x0000000000028bbf: fiadd word ptr [rbx]; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x0000000000042989: ficomp dword ptr [rbx + 0x41]; pop rsp; pop r13; pop r14; pop r15; ret; 
0x000000000004e298: fidiv dword ptr [rbp - 0x2b]; mov qword ptr [r8 + 8], rax; xor eax, eax; mov byte ptr [r8], al; mov rax, r8; ret; 
0x0000000000010052: fidivr dword ptr [rbp + 0x34ebffff]; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000012d9e: fidivr word ptr [rax + 0x5e415b00]; pop r15; ret; 
0x0000000000018eff: fild dword ptr [rax + rax]; pop rbx; ret; 
0x0000000000018f2a: fild dword ptr [rax + rax]; ret; 
0x000000000002b362: fimul dword ptr [rax + 0x29]; ret 0x8b49; 
0x0000000000044ffa: fimul dword ptr [rax - 0x73]; xor eax, 0xf29e; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x0000000000025752: fimul dword ptr [rdi]; test byte ptr [rdi], bl; add eax, 0x8b480000; add dword ptr [rax - 1], ecx; ret; 
0x0000000000037d72: fimul dword ptr [rdi]; test byte ptr [rdx], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; add dword ptr [rax - 1], ecx; ret; 
0x000000000003c677: fimul dword ptr [rdi]; xchg eax, ebp; ret 0xf41; 
0x000000000000bc03: fimul word ptr [rax - 0x75]; cmp al, 0x24; add rdi, 0xa8; call 0xbd40; add rsp, 0x18; ret; 
0x00000000000298a5: fimul word ptr [rax - 0x77]; ret 0x15ff; 
0x0000000000047bef: fimul word ptr [rax - 0x77]; ret 0x17eb; 
0x000000000003562b: fimul word ptr [rax - 0x77]; ret 0x1ce8; 
0x0000000000035110: fimul word ptr [rax - 0x77]; ret 0x37e8; 
0x000000000003580d: fimul word ptr [rax - 0x77]; ret 0x3ae8; 
0x0000000000035709: fimul word ptr [rax - 0x77]; ret 0x3ee8; 
0x00000000000354fa: fimul word ptr [rax - 0x77]; ret 0x4de8; 
0x0000000000034fef: fimul word ptr [rax - 0x77]; ret 0x58e8; 
0x00000000000351e5: fimul word ptr [rax - 0x77]; ret 0x62e8; 
0x00000000000355de: fimul word ptr [rax - 0x77]; ret 0x69e8; 
0x00000000000357d4: fimul word ptr [rax - 0x77]; ret 0x73e8; 
0x00000000000350c7: fimul word ptr [rax - 0x77]; ret 0x80e8; 
0x00000000000356bf: fimul word ptr [rax - 0x77]; ret 0x88e8; 
0x00000000000352b2: fimul word ptr [rax - 0x77]; ret 0x95e8; 
0x00000000000354ad: fimul word ptr [rax - 0x77]; ret 0x9ae8; 
0x0000000000034fa9: fimul word ptr [rax - 0x77]; ret 0x9ee8; 
0x000000000003519f: fimul word ptr [rax - 0x77]; ret 0xa8e8; 
0x000000000003579b: fimul word ptr [rax - 0x77]; ret 0xace8; 
0x0000000000035594: fimul word ptr [rax - 0x77]; ret 0xb3e8; 
0x000000000003523c: fimul word ptr [rax - 0x77]; ret 0xbe8; 
0x0000000000035081: fimul word ptr [rax - 0x77]; ret 0xc6e8; 
0x000000000003527d: fimul word ptr [rax - 0x77]; ret 0xcae8; 
0x0000000000035675: fimul word ptr [rax - 0x77]; ret 0xd2e8; 
0x0000000000035547: fimul word ptr [rax - 0x77]; ret 0xe8; 
0x0000000000035159: fimul word ptr [rax - 0x77]; ret 0xeee8; 
0x0000000000035756: fimul word ptr [rax - 0x77]; ret 0xf1e8; 
0x0000000000035038: fimul word ptr [rax - 0x77]; ret 0xfe8; 
0x0000000000015421: fimul word ptr [rcx - 0x73]; push rdi; cmovl edi, dword ptr [rcx]; ret 0x860f; 
0x000000000004bc69: fistp qword ptr [rsi + 0x22]; mov qword ptr [rsp + 0x38], rax; call rax; 
0x000000000004c08b: fistp qword ptr [rsi + 0x27]; mov r13, rax; call rax; 
0x0000000000018fc1: fistp word ptr [rbx - 1]; and eax, 0x4dab7; pop rbx; ret; 
0x0000000000018f6b: fistp word ptr [rbx - 1]; and eax, 0x4db0d; pop rbx; ret; 
0x0000000000018efa: fistp word ptr [rbx - 1]; and eax, 0x4db7e; pop rbx; ret; 
0x000000000002bc97: fisttp dword ptr [rax - 0x73]; or eax, 0x25c6d; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a20f: fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x41]; pop rsi; pop r15; ret; 
0x000000000004f09c: fisttp dword ptr [rcx + rcx*4 - 0x30]; mov rdx, r11; ret; 
0x000000000003a1f2: fisttp dword ptr [rdi]; test eax, esp; ret 0xffff; 
0x000000000002ac01: fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x00000000000390c0: fisttp qword ptr [rax + 0x39]; ret 0xca73; 
0x000000000002bf79: fisttp qword ptr [rax + 0x39]; ret; 
0x00000000000362c7: fisttp qword ptr [rax - 0x7d]; ret; 
0x0000000000041788: fisttp qword ptr [rcx + 1]; ror dword ptr [rcx - 9], 1; fmul dword ptr [rcx + rcx*4 + 0xf]; mov qword ptr [rdi + 8], r8; pop rbx; ret; 
0x000000000004b83f: fisttp word ptr [rax - 0x39]; ret; 
0x000000000004be44: fisttp word ptr [rax - 0x77]; out dx, al; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x000000000004f224: fisttp word ptr [rax - 0x7d]; ret; 
0x000000000002177c: fisttp word ptr [rax - 1]; ret; 
0x000000000004bffb: fisttp word ptr [rcx + rcx*4 - 0x16]; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x00000000000348ab: fisttp word ptr [rcx - 0x3b7cb708]; js 0x3490e; pop rbp; ret; 
0x0000000000007ebd: fisttp word ptr [rsi]; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x0000000000048f3c: fisub dword ptr [rsi + 0xf]; cli; ret; 
0x0000000000030c3e: fisub word ptr [rbx + rax]; lea rdx, [rip + 0x364cf]; lea rax, [rip + 0x364d1]; pop rcx; ret; 
0x00000000000291f1: fld dword ptr [rbx]; add dh, al; sbb al, 0x20; add byte ptr [rax - 1], cl; ret; 
0x000000000004952f: fld dword ptr [rcx]; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000003246f: fld qword ptr [rbp + 3]; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000002915e: fld qword ptr [rbx]; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000004ef6b: fldcw word ptr [rbp]; add byte ptr [rax - 0x77], cl; ret 0x6666; 
0x0000000000049fdb: fldcw word ptr [rdi + 0x63480000]; or al, 0x8e; add rcx, rsi; jmp rcx; 
0x0000000000037e7d: fmul dword ptr [rax - 0x7b]; sal byte ptr [rax + 0x49], 0x83; ret 0x48e8; 
0x0000000000049d45: fmul dword ptr [rax - 1]; ret 0x3948; 
0x000000000002f6a3: fmul dword ptr [rbp + rcx*4 + 0x73]; dec dword ptr [rax - 0x7d]; ret; 
0x000000000004178e: fmul dword ptr [rcx + rcx*4 + 0xf]; mov qword ptr [rdi + 8], r8; pop rbx; ret; 
0x0000000000008300: fmul dword ptr [rcx + rcx*4 - 0xe]; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000003d06a: fmul dword ptr [rcx + rcx*4 - 0xe]; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004f1cf: fmul qword ptr [rax - 0x7b]; and al, 8; add rsp, rax; leave; ret; 
0x0000000000015530: fmul qword ptr [rcx - 9]; fsub st(1), st(0); retf 3; add byte ptr [rax - 1], cl; ret; 
0x000000000002a467: fscale; dec dword ptr [rax - 0x73]; add eax, 0x3cc0f; pop rcx; ret; 
0x000000000004df64: fstp xword ptr [rax]; add byte ptr [rdx + 0x28], bh; mov r8d, 0x11f; call 0x4de00; pop rcx; ret; 
0x000000000003316c: fsub st(0), st(0); add dword ptr [rax], eax; movsxd rdx, dword ptr [rcx + rdi*4]; add rdx, rcx; jmp rdx; 
0x000000000003dc3a: fsub st(0); add al, 0; add byte ptr [rdi], cl; xchg eax, ebp; ret 0xf41; 
0x0000000000015533: fsub st(1), st(0); retf 3; add byte ptr [rax - 1], cl; ret; 
0x0000000000030b50: fsubp st(0); or dh, byte ptr [rsi - 3]; dec dword ptr [rax - 0x77]; ret; 
0x000000000001b465: fucomi st(1); ret 4; 
0x000000000002bce6: fucomi st(3); xor dword ptr [rbx + 0x48d88901], esi; add esp, 0x20; pop rbx; ret; 
0x0000000000008d98: fucomip st(0); ret 0xffe2; 
0x000000000001ae7b: hlt; add eax, dword ptr [rax]; add byte ptr [rcx], dh; jmp qword ptr [rsi + 0x66]; 
0x000000000002eca9: idiv bh; dec dword ptr [rax - 0x77]; ret; 
0x0000000000016d03: idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000003f582: idiv byte ptr [rax + 5]; add qword ptr [rdi + 0x18], rsi; ret; 
0x000000000001e2cd: idiv di; jmp qword ptr [rsi + 0x2e]; 
0x000000000004e8aa: idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x17fe2]; add rsp, 0x88; ret; 
0x000000000004e6ca: idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x181c2]; add rsp, 0x88; ret; 
0x000000000004e62a: idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x18262]; add rsp, 0x88; ret; 
0x000000000004e597: idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x182f5]; add rsp, 0x88; ret; 
0x000000000004e507: idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x18385]; add rsp, 0x88; ret; 
0x000000000004e475: idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x18417]; add rsp, 0x88; ret; 
0x000000000004e3e5: idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x184a7]; add rsp, 0x88; ret; 
0x000000000004e9ac: idiv dword ptr [rsi + 1]; xor ecx, ecx; call qword ptr [rip + 0x17ede]; add rsp, 0x28; ret; 
0x000000000004e8fe: idiv dword ptr [rsi + 1]; xor ecx, ecx; call qword ptr [rip + 0x17f8c]; add rsp, 0x88; ret; 
0x0000000000045eb0: idiv edi; adc eax, 0x209f9; add rsp, 0x68; pop rbx; pop r14; ret; 
0x000000000001e2ce: idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000001cd03: imul eax, dword ptr [rcx], 0x47c60000; or byte ptr [rbp + 0x48], al; mov dword ptr [rdi], 1; add rsp, 0x30; ret; 
0x000000000004b115: imul eax, dword ptr [rdx], 0; add byte ptr [rax - 0x77], cl; out dx, eax; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x000000000000cfad: imul eax, dword ptr [rip + 0x58d4800], 0xffffc859; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000000cf15: imul eax, dword ptr [rip + 0x58d4800], 0xffffc8f1; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000002a797: imul eax; ret; 
0x000000000000d069: imul ebp, dword ptr [rax + 5], 0; lea rax, [rip - 0x3864]; mov esi, 0x2b; lea rdx, [rsp + 0x20]; call rax; 
0x000000000004e365: imul ebp, dword ptr [rsi], 0x1ba00; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000001cfcd: imul ecx, dword ptr [rax - 0x73], 0x342c70d; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x00000000000106fe: imul edi, edi, 0x448b48ff; and al, 8; add rsp, 0x58; ret; 
0x0000000000035f48: imul edi, edi, 0x48; mov edi, dword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000015e02: imul edx, dword ptr [rax], 0x31; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x0000000000025183: imul edx, dword ptr [rip - 0x72b80000], 0x2c4be15; add byte ptr [rax + 0x63], cl; or al, 0x8a; add rcx, rdx; jmp rcx; 
0x0000000000009aca: imul edx, ebp, 0x5d010005; ret; 
0x000000000004c553: imul esi, dword ptr [rax], 0x48; add esp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000013498: in al, 0x35; add eax, 0x5c415b00; pop r13; pop r14; pop r15; ret; 
0x000000000004bec9: in al, 0x45; mov ebp, esi; jmp rax; 
0x000000000000ed99: in al, 0x48; add esp, 0x78; ret; 
0x000000000004ef9b: in al, 0x4c; mov eax, ecx; and al, 1; pop rcx; ret; 
0x000000000004f1cc: in al, 0x4c; sub esp, ebx; test qword ptr [rsp + 8], rsp; add rsp, rax; leave; ret; 
0x000000000000b354: in al, 0x8b; and al, 4; add rsp, 0x28; ret; 
0x000000000004baea: in al, 0x96; add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004b3a9: in al, 0xeb; test eax, 0x48ff894c; mov esi, dword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x20]; call qword ptr [rbp + 0x18]; 
0x000000000000d09d: in al, 0xf; or ecx, dword ptr [rax - 0x73]; add eax, 0xffffc579; call rax; 
0x000000000000cfe0: in al, 0xf; or ecx, dword ptr [rax - 0x73]; add eax, 0xffffc636; call rax; 
0x000000000000cf48: in al, 0xf; or ecx, dword ptr [rax - 0x73]; add eax, 0xffffc6ce; call rax; 
0x00000000000345a2: in al, 0xf; test byte ptr [rcx + 0x48000000], ch; mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x000000000000868e: in al, 5; add byte ptr [rax - 0x7b], cl; sar byte ptr [rsi - 0x5c], 0x5b; ret; 
0x0000000000011242: in al, dx; add al, 0x89; cmp al, 0x24; mov eax, dword ptr [rsp]; add rsp, 4; ret; 
0x0000000000034a08: in al, dx; and byte ptr [rbx], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002ab63: in al, dx; dec r12; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000003d093: in al, dx; mov rax, qword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rdi, rax; call qword ptr [rcx + 0x18]; 
0x000000000003cc60: in al, dx; movabs eax, dword ptr [0x894800eb0b0f0002]; ret; 
0x0000000000007002: in al, dx; or byte ptr [rax - 0x75], cl; add eax, 0x5fb95; test rax, rax; je 0x7012; call rax; 
0x0000000000049c48: in al, dx; ret; 
0x0000000000028152: in al, dx; sbb byte ptr [rbx + 0x3eee205], cl; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x18; ret; 
0x0000000000007e82: in al, dx; sub byte ptr [rbx + 0x5f22e05], cl; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x0000000000007e32: in al, dx; sub byte ptr [rbx + 0x5f27e05], cl; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x0000000000007de2: in al, dx; sub byte ptr [rbx + 0x5f28e05], cl; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x00000000000103f8: in al, dx; xor eax, 0x8d480005; add eax, 0xffff919d; mov esi, 0x100; call rax; 
0x000000000000b3d7: in eax, 0x3b; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000000b5f9: in eax, 0x48; mov edi, dword ptr [rsp]; call 0xb620; add rsp, 0x18; ret; 
0x000000000000b6f9: in eax, 0x48; mov edi, dword ptr [rsp]; call 0xb7c0; add rsp, 0x18; ret; 
0x000000000000b749: in eax, 0x48; mov edi, dword ptr [rsp]; call 0xb920; add rsp, 0x18; ret; 
0x000000000000b989: in eax, 0x48; mov edi, dword ptr [rsp]; call 0xb9c0; add rsp, 0x18; ret; 
0x000000000000bc59: in eax, 0x48; mov edi, dword ptr [rsp]; call 0xbcf0; add rsp, 0x18; ret; 
0x000000000002a25f: in eax, 0xcd; add eax, dword ptr [rax]; pop rcx; ret; 
0x000000000002ba31: in eax, 3; lea rcx, [rip + 0x25ec2]; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x000000000004af4a: in eax, 4; mov rdi, qword ptr [rsp + 8]; mov rcx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000001ed63: in eax, dx; add eax, dword ptr es:[rax]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000038adf: in eax, dx; cmp edi, esi; dec dword ptr [rax - 0x7d]; ret; 
0x000000000004bff8: in eax, dx; mov rdi, rbx; mov rdx, r13; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x000000000004a82e: in eax, dx; stosb byte ptr [rdi], al; add byte ptr [rax], al; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a724: in eax, dx; stosd dword ptr [rdi], eax; add byte ptr [rax], al; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000001fe02: inc byte ptr [rbp + 0x31]; jmp qword ptr [rsi + 0x2e]; 
0x000000000003f5d8: inc byte ptr [rdx]; sete al; ret; 
0x000000000000e596: inc byte ptr [rsi - 0x74b7fffb]; and al, 0x10; add rsp, 0x18; ret; 
0x000000000002ad03: inc dword ptr [rax + rax*8 + 0x58b6075]; stosb byte ptr [rdi], al; ret; 
0x0000000000048f55: inc dword ptr [rax]; add byte ptr [rcx], ch; ret 0x148d; 
0x000000000003f5d3: inc dword ptr [rax]; add byte ptr [rsi - 0x7d], ah; inc byte ptr [rdx]; sete al; ret; 
0x0000000000008353: inc dword ptr [rax]; sete al; pop rcx; ret; 
0x000000000004f26e: inc dword ptr [rax]; sub rsp, 8; add rsp, 8; ret; 
0x000000000001c1f5: inc dword ptr [rbx + 0x15772bf8]; lea rdi, [rip + 0x34cba]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000003f4dc: inc dword ptr [rbx + 8]; add rsp, 0x18; pop rbx; pop r14; ret; 
0x000000000002e37f: inc dword ptr [rbx - 0x50]; mov rax, rcx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ab3b: inc dword ptr [rbx - 0x78f0d407]; mov ah, 0; add byte ptr [rax], al; movsxd rax, dword ptr [r9 + rcx*4]; add rax, r9; jmp rax; 
0x00000000000475d2: inc dword ptr [rcx + 0xf]; mov dh, 0x43; add dword ptr [rcx - 0x7d], ecx; ret; 
0x00000000000130c1: inc dword ptr [rdi + 0x10]; ret; 
0x0000000000012091: inc dword ptr [rdi]; ret; 
0x000000000003d23f: inc ecx; inc rdx; cmp rcx, r8; jb 0x3d230; ret; 
0x000000000003d242: inc edx; cmp rcx, r8; jb 0x3d230; ret; 
0x0000000000033138: inc esi; mov qword ptr [rbx + 0x10], rsi; pop rbx; pop r14; pop r15; ret; 
0x000000000003f40e: inc esi; mov qword ptr [rbx + 0x18], rsi; add rsp, 0x18; pop rbx; pop r14; ret; 
0x000000000003f4db: inc qword ptr [rbx + 8]; add rsp, 0x18; pop rbx; pop r14; ret; 
0x000000000002e37e: inc qword ptr [rbx - 0x50]; mov rax, rcx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ab3a: inc qword ptr [rbx - 0x78f0d407]; mov ah, 0; add byte ptr [rax], al; movsxd rax, dword ptr [r9 + rcx*4]; add rax, r9; jmp rax; 
0x00000000000130c0: inc qword ptr [rdi + 0x10]; ret; 
0x0000000000012090: inc qword ptr [rdi]; ret; 
0x000000000003d23e: inc rcx; inc rdx; cmp rcx, r8; jb 0x3d230; ret; 
0x000000000003d241: inc rdx; cmp rcx, r8; jb 0x3d230; ret; 
0x0000000000033137: inc rsi; mov qword ptr [rbx + 0x10], rsi; pop rbx; pop r14; pop r15; ret; 
0x000000000003f40d: inc rsi; mov qword ptr [rbx + 0x18], rsi; add rsp, 0x18; pop rbx; pop r14; ret; 
0x000000000003fe0b: insb byte ptr [rdi], dx; add al, byte ptr [rax]; pop rcx; ret; 
0x0000000000034caa: insb byte ptr [rdi], dx; and al, 0x40; mov rdi, rbp; xor esi, esi; mov rdx, qword ptr [rsp + 0x38]; call rbx; 
0x000000000004b95c: insb byte ptr [rdi], dx; and al, 0x50; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000000cb26: insd dword ptr [rdi], dx; add eax, 0x3a2e800; add byte ptr [rax], al; add rsp, 0x128; ret; 
0x00000000000303a7: insd dword ptr [rdi], dx; add eax, dword ptr [rax]; mov qword ptr [rip + 0x36d5f], rsi; ret; 
0x00000000000303ae: insd dword ptr [rdi], dx; add eax, dword ptr [rax]; ret; 
0x000000000002bc9b: insd dword ptr [rdi], dx; pop rsp; add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000116f9: insd dword ptr [rdi], dx; ret; 
0x0000000000047d61: int 0; add byte ptr [rdi], cl; mov dh, 0xc; or byte ptr [rbp - 0x6bf0be37], al; ret 0x4c89; 
0x000000000001353f: int 0x37; add eax, 0x5c415b00; pop r13; pop r14; pop r15; ret; 
0x0000000000037bbf: int 0x41; call rsi; 
0x0000000000041233: int 0x77; sub cl, byte ptr [rax - 0x77]; ret; 
0x0000000000015d5f: int 0x80; 
0x0000000000029457: int 0x83; add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002e72f: int 0xff; dec dword ptr [rax - 0x7b]; sal byte ptr [rax + rcx*2 + 0x48], 0x89; ret; 
0x000000000000b74f: int 1; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000004d241: int1; cmp rsi, rdi; jne 0x4d230; ret; 
0x0000000000048f54: int1; inc dword ptr [rax]; add byte ptr [rcx], ch; ret 0x148d; 
0x000000000004668b: int1; jae 0x467ac; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + rcx], al; pop rbx; ret; 
0x0000000000027515: int1; jmp rcx; 
0x000000000004a7f4: int1; mov edx, 2; sub rdx, rax; mov rdi, qword ptr [r12]; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x000000000000c68a: iretd; add eax, dword ptr [rax]; lea rdi, [rsp + 0x268]; mov edx, 1; mov ecx, 0x4a; call rax; 
0x0000000000030c45: iretd; add eax, dword ptr fs:[rax]; lea rax, [rip + 0x364d1]; pop rcx; ret; 
0x000000000002ccf1: iretd; add r8b, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002fb29: iretd; jmp rdi; 
0x000000000004e2d9: iretd; jns 0x4e2dc; add byte ptr [rdx + 0x11], bh; call qword ptr [rax + 0x18]; 
0x000000000004ba60: iretd; mov r12, rdx; mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x0000000000011670: ja 0x1168a; add rsp, 0x10; pop rbx; ret; 
0x0000000000019e63: ja 0x19e93; lea rax, [rip + 0x36e84]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000001ab3f: ja 0x1abf9; movsxd rax, dword ptr [r9 + rcx*4]; add rax, r9; jmp rax; 
0x000000000001c1f9: ja 0x1c210; lea rdi, [rip + 0x34cba]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000001c25a: ja 0x1c36e; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000001c777: ja 0x1cb02; lea rcx, [rip + 0x34a98]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cb2b: ja 0x1cb47; lea rcx, [rip + 0x34708]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cb8b: ja 0x1cba3; lea rcx, [rip + 0x346c0]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cbfb: ja 0x1cc13; lea rcx, [rip + 0x34668]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cfcc: ja 0x1d037; lea rcx, [rip + 0x342c7]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001d14a: ja 0x1d158; mov dword ptr [rdi + 9], edx; mov byte ptr [rdi], cl; mov qword ptr [rdi + 1], rax; add rsp, 0x10; ret; 
0x000000000001d19c: ja 0x1d1fe; lea rcx, [rip + 0x34117]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001d3c1: ja 0x1d3cf; mov dword ptr [rdi + 9], edx; mov byte ptr [rdi], al; mov qword ptr [rdi + 1], rcx; add rsp, 0x18; ret; 
0x000000000001dfb0: ja 0x1e02d; add rax, rdi; lea rbp, [rip + 0x33340]; movsxd rsi, dword ptr [rbp + rsi*4]; add rsi, rbp; jmp rsi; 
0x000000000001ed5a: ja 0x20b24; lea rdx, [rip + 0x326ed]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000022d4b: ja 0x22c38; lea rcx, [rip + 0x2e788]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000022cf7: ja 0x22c38; lea rcx, [rip + 0x2e840]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002445e: ja 0x2439a; lea rdx, [rip + 0x2d159]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000024438: ja 0x2439a; lea rdx, [rip + 0x2d197]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000024416: ja 0x2439a; lea rdx, [rip + 0x2d1d5]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000025297: ja 0x24fc9; lea rcx, [rip + 0x2c3c8]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000025107: ja 0x266e2; lea rcx, [rip + 0x2c518]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000025181: ja 0x266f0; lea rdx, [rip + 0x2c4be]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002750d: ja 0x2757e; movsxd rcx, dword ptr [r14 + rdx*4]; add rcx, r14; jmp rcx; 
0x000000000002f5a6: ja 0x2f5ab; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000002fa39: ja 0x2fa11; movzx ecx, cl; lea rdx, [rip + 0x21f97]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002fb13: ja 0x2fa11; movzx edx, cl; lea rcx, [rip + 0x21eed]; movsxd rdi, dword ptr [rcx + rdx*4]; add rdi, rcx; jmp rdi; 
0x0000000000033165: ja 0x3317f; mov al, 0x22; lea rcx, [rip + 0x1e8dc]; movsxd rdx, dword ptr [rcx + rdi*4]; add rdx, rcx; jmp rdx; 
0x000000000003f587: ja 0x3f5a1; ret; 
0x000000000003f5bb: ja 0x3f5dd; lea rdx, [rip + 0x142f8]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000003f5ba: ja 0x3f633; and byte ptr [rax - 0x73], cl; adc eax, 0x142f8; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000042e26: ja 0x43349; lea rbx, [rip + 0x1128d]; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x000000000004aaaa: ja 0x4aa54; add byte ptr [rax], al; mov edx, 1; jmp rax; 
0x000000000004f1cb: ja 0x4f1b1; sub rsp, r11; test qword ptr [rsp + 8], rsp; add rsp, rax; leave; ret; 
0x0000000000008719: ja 0x89f5; mov eax, eax; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x0000000000008b89: ja 0x8ccb; mov ecx, eax; movsxd rcx, dword ptr [r12 + rcx*4]; add rcx, r12; jmp rcx; 
0x0000000000008df9: ja 0x8f2d; mov ecx, eax; movsxd rcx, dword ptr [r12 + rcx*4]; add rcx, r12; jmp rcx; 
0x0000000000009049: ja 0x918a; mov ecx, eax; movsxd rcx, dword ptr [r12 + rcx*4]; add rcx, r12; jmp rcx; 
0x0000000000009b21: ja 0x9b38; mov rax, qword ptr [rsp + 0x20]; lea rcx, [rip + 0x464d1]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000e8e5: ja 0xe8ef; mov qword ptr [rdi + 0x10], rdx; mov qword ptr [rdi], 0; ret; 
0x000000000000e905: ja 0xe90f; mov qword ptr [rdi + 0x10], rdx; mov qword ptr [rdi], 1; ret; 
0x0000000000012178: jae 0x12179; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000135bd: jae 0x135d6; cmp dword ptr [rbx + 0x10], 2; jae 0x135e5; pop rbx; ret; 
0x00000000000135c3: jae 0x135e5; pop rbx; ret; 
0x00000000000135f3: jae 0x135f6; ret; 
0x0000000000013879: jae 0x1387a; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002a1d5: jae 0x2a1d6; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002c6b2: jae 0x2c6bc; mov edi, 6; lea rax, [rip + 0x252bc]; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x000000000002f6a6: jae 0x2f6a7; add rbx, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000002f73f: jae 0x2f740; add rbx, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000003313c: jae 0x3314e; pop rbx; pop r14; pop r15; ret; 
0x0000000000033437: jae 0x33441; add rsp, 0x108; pop rbx; pop r14; ret; 
0x000000000003c6d9: jae 0x3c6df; xor eax, eax; pop rbx; ret; 
0x000000000003f412: jae 0x3f42c; add rsp, 0x18; pop rbx; pop r14; ret; 
0x000000000003f54c: jae 0x3f557; add rdi, 0x10; mov rax, rdi; pop rcx; ret; 
0x000000000003f597: jae 0x3f5a2; mov qword ptr [rdi + 0x18], 0; ret; 
0x000000000003f5f5: jae 0x3f607; mov eax, 0x110001; add rsp, 0x98; pop rbx; pop r14; ret; 
0x000000000003fbf2: jae 0x3fbf6; add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; nop; ret; 
0x000000000004194e: jae 0x41969; xor ecx, ecx; shl rax, 0x20; or rax, rcx; ret; 
0x0000000000041b80: jae 0x41ba2; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004668c: jae 0x467ac; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + rcx], al; pop rbx; ret; 
0x0000000000046825: jae 0x46915; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + r10], al; pop rax; ret; 
0x000000000004a0f9: jae 0x4a0c9; add dword ptr [rax], eax; mov rax, rbx; pop rbx; ret; 
0x000000000004adf4: jae 0x4adee; call qword ptr [rax + 0x18]; 
0x000000000004df34: jae 0x4df3a; xor eax, eax; pop rcx; ret; 
0x000000000004df3f: jae 0x4df43; pop rcx; ret; 
0x000000000002c23f: jb 0x2c270; cmp rdi, rsi; jne 0x2c24a; xor eax, eax; pop rcx; ret; 
0x000000000003d247: jb 0x3d230; ret; 
0x000000000004e0c2: jb 0x4e0c4; add byte ptr [rdx + 2], bh; call qword ptr [rax + 0x18]; 
0x000000000004e0c2: jb 0x4e0c4; add byte ptr [rdx + 2], bh; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000004e0de: jb 0x4e0e0; add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; 
0x000000000004e0de: jb 0x4e0e0; add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000002a266: jbe 0x2a243; std; dec dword ptr [rax - 0x73]; add eax, 0x3cdd7; pop rcx; ret; 
0x0000000000030b53: jbe 0x30b52; dec dword ptr [rax - 0x77]; ret; 
0x00000000000102b7: je 0x102dd; adc byte ptr [rax - 0x75], cl; jl 0x102e2; sbb byte ptr [rax - 0x73], cl; add eax, 0xffff919a; call rax; 
0x00000000000106f4: je 0x1071a; adc byte ptr [rdx + 0x30], bh; call 0x7078; mov rax, qword ptr [rsp + 8]; add rsp, 0x58; ret; 
0x0000000000011279: je 0x1129f; and al, ch; out dx, eax; sar bh, 0xff; add rsp, 0x28; ret; 
0x0000000000011b2e: je 0x11b54; add al, 0xe8; jp 0x11acf; add dword ptr [rax], eax; pop rcx; ret; 
0x0000000000011b6a: je 0x11b90; add al, 0xe8; wait; add dword ptr [rax], eax; pop rcx; ret; 
0x0000000000013597: je 0x1359a; ret; 
0x0000000000014fdd: je 0x15003; add al, 0xe8; retf; add word ptr [rax], ax; pop rcx; ret; 
0x0000000000015060: je 0x15086; add al, 0xe8; clc; add word ptr [rax], ax; pop rcx; ret; 
0x0000000000015110: je 0x15136; add al, 0xe8; add word ptr [rax], ax; pop rcx; ret; 
0x000000000001dfbe: je 0x1df75; add byte ptr [rax + 1], cl; out dx, al; jmp rsi; 
0x000000000001e2bc: je 0x1e2e2; and ecx, dword ptr [rcx + 0x55890c75]; or dword ptr [rax - 0x76b7f7b3], ecx; adc r9b, r13b; idiv di; jmp qword ptr [rsi + 0x2e]; 
0x000000000001eb3e: je 0x1eb96; lea rax, [r12 - 0x2e]; lea rcx, [rip + 0x32928]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000025d0e: je 0x25d21; sbb byte ptr [rax - 0x7d], cl; ret 0x4820; 
0x0000000000028a46: je 0x28a72; xor eax, eax; pop rbx; pop r14; pop r15; ret; 
0x0000000000028b49: je 0x28b4d; pop rcx; ret; 
0x000000000002b3be: je 0x2b270; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [r12]; call rbx; 
0x000000000002bab3: je 0x2babf; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000002c25e: je 0x2c269; xor eax, eax; pop rcx; ret; 
0x000000000002c544: je 0x2c64e; movzx ecx, byte ptr [r10]; movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x000000000002da6d: je 0x2da93; and byte ptr [rcx + rcx*4 - 9], cl; call rax; 
0x000000000002e648: je 0x2e659; mov rdi, qword ptr [rbx + r13]; call rax; 
0x000000000002f722: je 0x2f748; adc al, ch; xchg byte ptr [rbp - 0x7ab70001], bh; sal byte ptr [rsp + rcx*2 + 0x48], 0x89; ret; 
0x0000000000030a3e: je 0x30a64; and byte ptr [rax - 0x75], cl; sbb eax, 0x36170; mov edx, 0x90; call rbx; 
0x0000000000030fe7: je 0x30ff4; mov qword ptr [rbx + 8], rax; xor eax, eax; mov qword ptr [rbx], rax; pop rbx; ret; 
0x00000000000345a3: je 0x34652; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x000000000003b544: je 0x3b56a; or byte ptr [rax - 0x7b], cl; test byte ptr [rdi], 0x84; ret; 
0x000000000003d26a: je 0x3d279; bsf ax, ax; movzx edx, ax; mov eax, 1; ret; 
0x000000000003d37f: je 0x3d391; bsf cx, cx; movzx edx, cx; add rdx, rax; mov eax, 1; ret; 
0x000000000003f535: je 0x3f544; mov rdx, qword ptr [rdi + 0x18]; mov rdi, qword ptr [rdi + 0x10]; mov rax, rdi; pop rcx; ret; 
0x000000000003f6ad: je 0x3f6dc; mov eax, 0x110000; add rsp, 0x98; pop rbx; pop r14; ret; 
0x000000000003fe05: je 0x3fe2b; add al, 0xff; adc eax, 0x26c8a; pop rcx; ret; 
0x000000000003fe7d: je 0x3fe82; mov al, 1; ret; 
0x0000000000045e95: je 0x45ea1; mov al, 1; add rsp, 0x68; pop rbx; pop r14; ret; 
0x0000000000045df7: je 0x45ea6; add rsp, 0x68; pop rbx; pop r14; ret; 
0x0000000000049f3d: je 0x49f49; mov al, 1; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004a012: je 0x4a039; dec rsi; mov qword ptr [rdi], rsi; ret; 
0x000000000004a701: je 0x4a727; sub byte ptr [rcx + rcx*4 - 1], cl; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000004a9a3: je 0x4a9c0; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xa963]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004aa94: je 0x4aa99; mov al, 1; ret; 
0x000000000004aadd: je 0x4ab03; add al, 0xff; adc eax, 0x1c412; pop rcx; ret; 
0x000000000004ac10: je 0x4ac36; add al, 0xff; adc eax, 0x1c2df; pop rcx; ret; 
0x000000000004ac42: je 0x4ac68; add al, 0xff; adc eax, 0x1c2ad; pop rcx; ret; 
0x000000000004ac7f: je 0x4aca5; add al, 0xff; adc eax, 0x1c270; pop rcx; ret; 
0x000000000004acc3: je 0x4ace9; add al, 0xff; adc eax, 0x1c22c; pop rcx; ret; 
0x000000000004ade6: je 0x4ae01; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000004aef8: je 0x4af0f; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000004b193: je 0x4b1a3; mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000004b113: je 0x4b384; mov rdi, rbp; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x000000000004b389: je 0x4b3af; adc byte ptr [rcx + rcx*4 - 6], cl; call qword ptr [rbx + 0x18]; 
0x000000000004b3b1: je 0x4b3d7; adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x20; call qword ptr [rbp + 0x18]; 
0x000000000004b3da: je 0x4b3ed; mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000004e028: je 0x4e02e; xor eax, eax; pop rcx; ret; 
0x000000000004e0a4: je 0x4e0ac; add rsp, 0x20; pop rbx; ret; 
0x000000000000700e: je 0x7012; call rax; 
0x000000000000700e: je 0x7012; call rax; add rsp, 8; ret; 
0x0000000000009a4d: je 0x9a58; jmp rax; 
0x0000000000009a41: je 0x9a58; mov rax, qword ptr [rip + 0x5ce56]; test rax, rax; je 0x9a58; jmp rax; 
0x0000000000009a8e: je 0x9a98; jmp rax; 
0x0000000000009a82: je 0x9a98; mov rax, qword ptr [rip + 0x5d485]; test rax, rax; je 0x9a98; jmp rax; 
0x000000000000a7aa: je 0xa7d0; or byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000000a7ca: je 0xa7f0; or byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000000a7ea: je 0xa810; or byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000000b020: je 0xb046; sbb al, ch; push 0x48000004; add esp, 0x38; ret; 
0x000000000000b0b0: je 0xb0d6; sbb al, ch; sbb byte ptr [rdi], al; add byte ptr [rax], al; add rsp, 0x38; ret; 
0x000000000000b1dd: je 0xb203; and byte ptr [rax - 0x73], cl; add eax, 0x26149; lea rdi, [rsp + 0x38]; call rax; 
0x000000000000b1f7: je 0xb21d; cmp byte ptr [rdx + 0xd0], bh; call 0x7078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x000000000000ba28: je 0xba5d; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000000be4a: je 0xbe70; or byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000000c972: je 0xc998; or byte ptr [rax - 0x73], cl; add eax, 0x20c14; lea rdi, [rsp + 0x90]; call rax; 
0x000000000000d8c6: je 0xd8ec; xor byte ptr [rdi], cl; adc byte ptr [rsp + 0x28], al; movups xmmword ptr [rcx], xmm0; add rsp, 0x58; ret; 
0x000000000000dcbe: je 0xdce4; call 0xd4a0; mov rdi, rsp; call 0xb410; add rsp, 0xa8; ret; 
0x000000000000e15f: je 0xe185; mov rdi, qword ptr [rsp + 0x30]; lea rdx, [rip + 0x557d2]; lea rax, [rip - 0x4bd5]; call rax; 
0x000000000000e190: je 0xe1b6; push rax; mov rdi, qword ptr [rsp + 0x28]; lea rdx, [rip + 0x557b9]; lea rax, [rip - 0x4c06]; call rax; 
0x000000000000e306: je 0xe32c; mov rdi, qword ptr [rsp + 0x10]; lea rdx, [rip + 0x5565b]; lea rax, [rip - 0x4d7c]; call rax; 
0x000000000000e337: je 0xe35d; push rax; mov rdi, qword ptr [rsp + 8]; lea rdx, [rip + 0x55642]; lea rax, [rip - 0x4dad]; call rax; 
0x000000000000f669: je 0xf68f; xor byte ptr [rax - 0x75], cl; jl 0xf694; sub byte ptr [rax - 0x73], cl; add eax, 0xffff9dd8; call rax; 
0x000000000000fc59: je 0xfc5a; dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x48; ret; 
0x000000000000fc4f: je 0xfc75; sbb byte ptr [rdx + 0x28], bh; call 0x7078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x00000000000138fd: jg 0x13955; add byte ptr [rax], al; ret; 
0x0000000000013c54: jg 0x13c55; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x0000000000015742: jg 0x15700; and al, 0xd0; add byte ptr [rax], al; add al, ch; sbb edi, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000001affb: jg 0x1b071; ret 0xdb85; 
0x0000000000023ce3: jg 0x23d29; ret 0x4808; 
0x00000000000312a3: jg 0x312a4; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000003cf39: jg 0x3cf63; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000003f53d: jg 0x3f54f; mov rax, rdi; pop rcx; ret; 
0x000000000003fe01: jg 0x3fe13; lea rsi, [rsp + 4]; call qword ptr [rip + 0x26c8a]; pop rcx; ret; 
0x000000000000d96d: jg 0xd99d; add al, 0; lea rdx, [rip + 0x55fb0]; lea rax, [rip - 0x448f]; mov esi, 0x49; call rax; 
0x00000000000116f5: jge 0x1171b; or eax, dword ptr [rdx + 0x6d]; ret; 
0x000000000002ab69: jge 0x2ab6a; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000002b82c: jge 0x2b82d; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000002babb: jge 0x2babd; call rbx; 
0x00000000000345ab: jge 0x345ad; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x00000000000360a3: jge 0x360a4; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000003a229: jge 0x3a22a; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000003ce96: jge 0x3ce97; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000003d82f: jge 0x3d7c7; add al, byte ptr [rax]; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000049f65: jge 0x49f8b; or eax, dword ptr [rdx + 0x6d]; ret; 
0x0000000000049fed: jge 0x49fef; add byte ptr [rax], al; ret; 
0x000000000004a5ff: jge 0x4a601; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x000000000004a60e: jge 0x4a610; mov rax, qword ptr [rbp + 8]; mov rsi, r14; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000004a623: jge 0x4a625; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xace0]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a659: jge 0x4a65b; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xacac]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000004a9a7: jge 0x4a9a9; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xa963]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a9d5: jge 0x4a9d7; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xa941]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bba0: jge 0x4bba2; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x9775]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bbbb: jge 0x4bbbd; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x960a]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004f26c: jge 0x4f269; inc dword ptr [rax]; sub rsp, 8; add rsp, 8; ret; 
0x00000000000102bc: jl 0x102e2; sbb byte ptr [rax - 0x73], cl; add eax, 0xffff919a; call rax; 
0x00000000000103b8: jl 0x103de; or byte ptr [rax - 0x73], cl; adc eax, 0x5360e; lea rax, [rip - 0x6e29]; mov esi, 0x100; call rax; 
0x00000000000103f2: jl 0x10418; adc byte ptr [rax - 0x73], cl; adc eax, 0x535ec; lea rax, [rip - 0x6e63]; mov esi, 0x100; call rax; 
0x0000000000010ba1: jl 0x10bc7; push -0x9b4818; dec dword ptr [rdi]; or ebp, ebx; add rsp, 0x78; ret; 
0x00000000000111e2: jl 0x11208; adc byte ptr [rax - 0x73], cl; add eax, 0xffff8804; xor edx, edx; call rax; 
0x0000000000029b8e: jl 0x29b92; add byte ptr [rax + 0x63], cl; or al, 0xb8; add rcx, rax; jmp rcx; 
0x000000000002db6d: jl 0x2db93; dec dword ptr [rcx - 0x75]; jl 0x2db98; dec dword ptr [rcx - 0x75]; and al, 7; call qword ptr [rax]; 
0x000000000002db72: jl 0x2db98; dec dword ptr [rcx - 0x75]; and al, 7; call qword ptr [rax]; 
0x0000000000030e78: jl 0x30e9e; adc byte ptr [rax - 0x77], cl; out 0x41, al; call rdi; 
0x0000000000031460: jl 0x31486; and byte ptr [rax - 0x73], cl; jl 0x3148b; adc al, ch; ret; 
0x0000000000031465: jl 0x3148b; adc al, ch; ret; 
0x0000000000034d5f: jl 0x34d85; adc byte ptr [rax - 0x75], cl; mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000004a431: jl 0x4a457; adc byte ptr [rax - 0x75], cl; and al, 8; call qword ptr [rax + 0x18]; 
0x000000000004a548: jl 0x4a56e; adc byte ptr [rax - 0x73], cl; xor eax, 0xa76e; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000004a719: jl 0x4a73f; sub byte ptr [rax - 0x75], cl; and al, 0x30; lea rsi, [rip + 0xabed]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a8bf: jl 0x4a8e5; adc byte ptr [rax - 0x75], cl; and al, 0x18; lea rsi, [rip + 0xaa47]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004aa5a: jl 0x4aa80; adc byte ptr [rax - 0x75], cl; and al, 0x18; lea rsi, [rip + 0xa8ac]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004adea: jl 0x4ae10; or byte ptr [rax - 0x75], cl; and al, 0x10; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000004aefc: jl 0x4af22; or byte ptr [rax - 0x75], cl; and al, 0x10; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000004af4e: jl 0x4af74; or byte ptr [rax - 0x75], cl; and al, 0x10; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000004e058: jl 0x4e05a; add byte ptr [rdx + 0xd], bh; call qword ptr [rax + 0x18]; 
0x000000000004e04a: jl 0x4e070; sbb byte ptr [rax - 0x75], cl; mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rip + 0x7c22]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000004e2cc: jl 0x4e2f2; and byte ptr [rax - 0x75], cl; mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rip + 0x79cf]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x0000000000007e16: jl 0x7e3c; adc al, ch; rcl byte ptr [rcx], cl; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x0000000000007e66: jl 0x7e8c; adc al, ch; ret 0xc; 
0x0000000000007eb9: jl 0x7edf; or al, ch; fisttp word ptr [rsi]; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x000000000000b285: jl 0xb2ab; adc byte ptr [rcx - 0x5fea003a], cl; mov eax, 0x8b480005; and al, 0x10; add rsp, 0x18; ret; 
0x000000000000b52f: jl 0xb555; sub al, ch; sub dword ptr [rbx + 0xb0fffff], edi; lea rax, [rip - 0x1f20]; call rax; 
0x000000000000c1f0: jl 0xc216; cmp al, ch; call 0x4800c20a; lea eax, [rip + 0x1e051]; call rax; 
0x000000000000c23a: jl 0xc260; push rax; lea rsi, [rsp + 0x60]; lea rdx, [rsp + 0x38]; call rax; 
0x000000000000c333: jl 0xc359; push rax; lea rsi, [rsp + 0x60]; lea rdx, [rsp + 0x38]; call rax; 
0x000000000000c477: jl 0xc49d; and byte ptr [rax - 0x73], cl; add eax, 0x1e81f; mov qword ptr [rsp + 0x70], rax; call rax; 
0x000000000000c4b2: jl 0xc4d8; sub byte ptr [rax - 0x75], cl; and al, 0x70; call rax; 
0x000000000000c4dc: jl 0xc502; xor al, ch; mov esp, 0x48000007; mov edi, dword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c4e6: jl 0xc50c; xor byte ptr [rax - 0x75], cl; and al, 0x70; call rax; 
0x000000000000c51a: jl 0xc540; cmp byte ptr [rax - 0x75], cl; and al, 0x70; call rax; 
0x000000000000c544: jl 0xc56a; call 0xcca0; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c54e: jl 0xc574; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c578: jl 0xc59e; call 0xcca0; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c582: jl 0xc5a8; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c8ef: jl 0xc915; sub bh, bh; adc eax, 0x5a0e8; add rsp, 0x1a8; ret; 
0x000000000000cd6e: jl 0xcd94; or byte ptr [rax - 0x73], cl; xor eax, 0x56b28; lea rax, [rip - 0x390f]; call rax; 
0x000000000000d037: jl 0xd05d; adc byte ptr [rdx + 0x38], bh; call 0x7078; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000000e164: jl 0xe18a; xor byte ptr [rax - 0x73], cl; adc eax, 0x557d2; lea rax, [rip - 0x4bd5]; call rax; 
0x000000000000e195: jl 0xe1bb; sub byte ptr [rax - 0x73], cl; adc eax, 0x557b9; lea rax, [rip - 0x4c06]; call rax; 
0x000000000000e30b: jl 0xe331; adc byte ptr [rax - 0x73], cl; adc eax, 0x5565b; lea rax, [rip - 0x4d7c]; call rax; 
0x000000000000e33c: jl 0xe362; or byte ptr [rax - 0x73], cl; adc eax, 0x55642; lea rax, [rip - 0x4dad]; call rax; 
0x000000000000f66e: jl 0xf694; sub byte ptr [rax - 0x73], cl; add eax, 0xffff9dd8; call rax; 
0x00000000000116f2: jle 0x1169a; add eax, 0x420b247d; insd dword ptr [rdi], dx; ret; 
0x0000000000012c52: jle 0x12c64; ret; 
0x0000000000018efe: jle 0x18edb; add al, 0; pop rbx; ret; 
0x000000000001914a: jle 0x19154; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001921a: jle 0x19224; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000192ea: jle 0x192f4; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000193c9: jle 0x193d3; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000194a9: jle 0x194b3; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001957d: jle 0x19587; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001964b: jle 0x19655; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001971a: jle 0x19724; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000197f8: jle 0x19802; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000198d9: jle 0x198e3; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000199b3: jle 0x199bd; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000019a82: jle 0x19a8c; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001d2d6: jle 0x1d320; mov dword ptr [rdi + 8], ecx; mov byte ptr [rdi], 0x4b; add rsp, 0x20; ret; 
0x00000000000299fb: jle 0x299ff; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000002ba99: jle 0x2ba9a; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x000000000002fb3c: jle 0x2fb4e; mov rax, qword ptr [rsi + 0x18]; call qword ptr [rax + 0x28]; 
0x000000000003d502: jle 0x3d50c; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000003da3d: jle 0x3da47; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000003db0a: jle 0x3db14; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004925c: jle 0x49266; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000049f62: jle 0x49f0a; add eax, 0x420b247d; insd dword ptr [rdi], dx; ret; 
0x000000000004a930: jle 0x4a93a; mov rdi, qword ptr [r15]; mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xa892]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000007a99: jle 0x7aa3; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000007b62: jle 0x7b6c; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000007c3a: jle 0x7c44; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000007e36: jle 0x7e2a; add eax, 0x4f88300; jne 0x7e44; add rsp, 0x28; ret; 
0x0000000000008694: jle 0x863a; pop rbx; ret; 
0x0000000000009302: jle 0x930c; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000000942c: jle 0x9436; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000000bd75: jmp qword ptr [rax]; 
0x000000000003051b: jmp qword ptr [rcx]; 
0x000000000004210d: jmp qword ptr [rdi]; 
0x000000000004bd47: jmp qword ptr [rdx]; 
0x0000000000009ae4: jmp qword ptr [rsi + 0x2e]; 
0x0000000000018864: jmp qword ptr [rsi + 0x41]; 
0x0000000000015899: jmp qword ptr [rsi + 0x44]; 
0x0000000000014851: jmp qword ptr [rsi + 0x66]; 
0x0000000000008379: jmp qword ptr [rsi + 0xf]; 
0x00000000000070f5: jmp qword ptr [rsi - 0x2d]; 
0x000000000001d6d4: jmp qword ptr [rsi - 0x39]; 
0x0000000000048166: jmp qword ptr [rsi - 0x47]; 
0x000000000001c6cd: jmp qword ptr [rsi - 0x70]; 
0x0000000000024aec: jmp qword ptr [rsi - 0x7d]; 
0x0000000000008728: jmp rax; 
0x00000000000465c0: jmp rbx; 
0x0000000000008b98: jmp rcx; 
0x000000000001d995: jmp rdi; 
0x000000000001e371: jmp rdx; 
0x000000000001dfc4: jmp rsi; 
0x0000000000028bfd: jmp rsp; 
0x00000000000100f2: jne 0x100fd; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x0000000000010197: jne 0x101a3; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x0000000000010218: jne 0x10228; mov rax, qword ptr [rsp + 0x20]; mov edx, dword ptr [rsp + 0x28]; add rsp, 0x38; ret; 
0x0000000000010272: jne 0x1027d; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x00000000000106ce: jne 0x106ee; lea rdi, [rip + 0x40312]; lea rdx, [rip + 0x5333a]; lea rax, [rip - 0x71f5]; mov esi, 0x2b; call rax; 
0x0000000000010c2b: jne 0x10c4b; lea rdi, [rip + 0x3fdb5]; lea rdx, [rip + 0x52df5]; lea rax, [rip - 0x7752]; mov esi, 0x2b; call rax; 
0x0000000000012174: jne 0x121b6; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000012d60: jne 0x12da2; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000137d7: jne 0x13819; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000013875: jne 0x138b7; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000013a95: jne 0x13ad7; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000013ba9: jne 0x13beb; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000013c4a: jne 0x13c89; mov r14, r15; dec r14; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x0000000000014ef4: jne 0x14efd; shr rdi, 8; mov eax, edi; ret; 
0x000000000001913e: jne 0x19157; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001920e: jne 0x19227; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000192de: jne 0x192f7; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000193bd: jne 0x193d6; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001949d: jne 0x194b6; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000019571: jne 0x1958a; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001963f: jne 0x19658; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001970e: jne 0x19727; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000197ec: jne 0x19805; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000198cd: jne 0x198e6; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000199a7: jne 0x199c0; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000019a76: jne 0x19a8f; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001cf7e: jne 0x1ceea; mov qword ptr [rdi + 8], rdx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000001cfa9: jne 0x1cf48; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000001d117: jne 0x1d125; mov qword ptr [rdi + 8], rdx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000001d007: jne 0x1d16a; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000001d2d5: jne 0x1d355; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x20; ret; 
0x000000000001d3ea: jne 0x1d38c; mov qword ptr [rdi + 8], rdx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000002815d: jne 0x28164; add rsp, 0x18; ret; 
0x00000000000281ef: jne 0x282b8; call rbx; 
0x000000000002a1d1: jne 0x2a20e; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002a25a: jne 0x2a265; lea rax, [rip + 0x3cde5]; pop rcx; ret; 
0x000000000002a45a: jne 0x2a465; lea rax, [rip + 0x3cc1d]; pop rcx; ret; 
0x000000000002a6ad: jne 0x2a6ed; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002ab5f: jne 0x2aba6; mov r12, rbp; dec r12; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000002ad66: jne 0x2ad78; add rsp, 0xb0; pop rbx; ret; 
0x000000000002b398: jne 0x2b27f; lea r12, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b51c: jne 0x2b55b; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b61c: jne 0x2b65b; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b6de: jne 0x2b71b; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b828: jne 0x2b829; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000002b824: jne 0x2b861; lea r14, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000002c244: jne 0x2c24a; xor eax, eax; pop rcx; ret; 
0x000000000002d43e: jne 0x2d47b; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002d4fe: jne 0x2d53b; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002db69: jne 0x2dbaa; lea r15, [r12 - 1]; mov rdi, qword ptr [r12 - 1]; mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x000000000002e740: jne 0x2e77f; mov r14, rbx; dec r14; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002e85c: jne 0x2e864; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000002ea3e: jne 0x2ea7d; mov r14, rbx; dec r14; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002eb5e: jne 0x2eb9d; mov r14, rbx; dec r14; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002f093: jne 0x2f094; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000002f11c: jne 0x2f11d; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000002f193: jne 0x2f194; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000002f1c1: jne 0x2f1c2; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000002f7ed: jne 0x2f80b; mov rdi, r15; call rax; 
0x00000000000302dc: jne 0x30364; lea rax, [rip + 0x2173b]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x0000000000030c39: jne 0x30c52; movzx eax, byte ptr [rip + 0x364de]; lea rdx, [rip + 0x364cf]; lea rax, [rip + 0x364d1]; pop rcx; ret; 
0x000000000003129b: jne 0x312ef; lea rbx, [r15 - 1]; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x0000000000033216: jne 0x3322a; mov qword ptr [rbx], 3; add rsp, 0x108; pop rbx; pop r14; ret; 
0x0000000000035f44: jne 0x35f82; lea rbp, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003609f: jne 0x360a0; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000003609b: jne 0x360d8; lea r14, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000003a21d: jne 0x36ad6; lea rbx, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000003b57a: jne 0x3b5b7; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003d4f6: jne 0x3d50f; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000003da31: jne 0x3da4a; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000003dafe: jne 0x3db17; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000003fc57: jne 0x3fc47; mov rax, rsi; mov rdx, rcx; pop rcx; ret; 
0x000000000003fdfd: jne 0x3fe0e; mov rdi, qword ptr [rdi + 0x10]; lea rsi, [rsp + 4]; call qword ptr [rip + 0x26c8a]; pop rcx; ret; 
0x000000000004183f: jne 0x4184b; mov byte ptr [rdi + 1], 0; mov al, 1; mov byte ptr [rdi], al; pop rbx; ret; 
0x0000000000041914: jne 0x41920; mov byte ptr [rdi + 1], 0; mov al, 1; mov byte ptr [rdi], al; pop rbx; ret; 
0x0000000000041b7c: jne 0x41b8a; mov qword ptr [rbx + 0x20], r14; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000049250: jne 0x49269; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004a02a: jne 0x4a02c; add byte ptr [rax], al; ret; 
0x000000000004a6f9: jne 0x4a5aa; lea rsi, [rsp + 0x28]; mov rdi, r15; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000004a61f: jne 0x4a5aa; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xace0]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a60a: jne 0x4a5aa; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; mov rsi, r14; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000004a63a: jne 0x4a5aa; mov rdi, r15; mov rsi, rbp; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000004a655: jne 0x4a679; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xacac]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000004a820: jne 0x4a84d; mov rdi, qword ptr [r12]; mov rax, qword ptr [r12 + 8]; lea rsi, [rip + 0xaaed]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a910: jne 0x4a932; mov rdi, qword ptr [r15]; mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xaa02]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a9d1: jne 0x4a9f1; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xa941]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bac4: jne 0x4bae0; mov rdi, qword ptr [r14]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x984e]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bade: jne 0x4baf8; mov rdi, qword ptr [r14]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x96e4]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bba9: jne 0x4bb42; add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bb9c: jne 0x4bbb9; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x9775]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bbb7: jne 0x4bbd2; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x960a]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004d245: jne 0x4d230; ret; 
0x000000000004e0b5: jne 0x4e0d3; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x7258]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004e299: jne 0x4e270; mov qword ptr [r8 + 8], rax; xor eax, eax; mov byte ptr [r8], al; mov rax, r8; ret; 
0x000000000004e33f: jne 0x4e35b; mov rdi, qword ptr [r14]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x6fd3]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e359: jne 0x4e373; mov rdi, qword ptr [r14]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x6e69]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004ef9a: jne 0x4ef80; mov rax, r9; and al, 1; pop rcx; ret; 
0x000000000000710c: jne 0x70f0; test dx, dx; setne al; pop rbx; ret; 
0x00000000000071b9: jne 0x7170; cmp r11, 3; jne 0x7170; pop rbx; ret; 
0x00000000000071bf: jne 0x7170; pop rbx; ret; 
0x0000000000007a8d: jne 0x7aa6; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000007b56: jne 0x7b6f; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000007c2e: jne 0x7c47; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000007ded: jne 0x7df4; add rsp, 0x28; ret; 
0x0000000000007e3d: jne 0x7e44; add rsp, 0x28; ret; 
0x0000000000007e8d: jne 0x7e94; add rsp, 0x28; ret; 
0x00000000000092f6: jne 0x930f; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000009420: jne 0x9439; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000000bcab: jne 0xbcaf; pop rax; ret; 
0x000000000000bcdc: jne 0xbce0; pop rax; ret; 
0x000000000000bd2b: jne 0xbd2f; pop rax; ret; 
0x000000000000bd57: jne 0xbd5b; pop rax; ret; 
0x000000000000c1ac: jne 0xc1b3; add rsp, 0x78; ret; 
0x000000000000c727: jne 0xc70e; add dword ptr [rax], eax; lea rdi, [rsp + 0x228]; call rax; 
0x000000000000ce6f: jne 0xce7a; mov eax, dword ptr [rsp + 0x24]; add rsp, 0x48; ret; 
0x000000000000cef5: jne 0xcefc; add rsp, 0x28; ret; 
0x000000000000cf81: jne 0xcf90; mov rax, qword ptr [rsp]; mov rax, qword ptr [rax + 8]; add rsp, 0x28; ret; 
0x000000000004c2af: jno 0x4c23f; add byte ptr [rax], al; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004efff: jno 0x4f001; add byte ptr [rdx + 0xb], bh; jmp rax; 
0x000000000000a1db: jno 0xa1dd; add byte ptr [rax], al; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000cd37: jno 0xcd59; mov qword ptr [rcx + 0x28], rdx; add rsp, 0x88; ret; 
0x000000000001217c: jnp 0x1217d; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000012d64: jnp 0x12d65; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000012d68: jnp 0x12d69; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000135ba: jnp 0x135c4; add dh, byte ptr [rbx + 0x17]; cmp dword ptr [rbx + 0x10], 2; jae 0x135e5; pop rbx; ret; 
0x00000000000135c0: jnp 0x135d2; add dh, byte ptr [rbx + 0x20]; pop rbx; ret; 
0x00000000000137db: jnp 0x137dc; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000137df: jnp 0x137e0; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000001387d: jnp 0x1387e; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000013a99: jnp 0x13a9a; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000013a9d: jnp 0x13a9e; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000013bad: jnp 0x13bae; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000013bb1: jnp 0x13bb2; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000001dfb1: jnp 0x1dffb; add eax, edi; lea rbp, [rip + 0x33340]; movsxd rsi, dword ptr [rbp + rsi*4]; add rsi, rbp; jmp rsi; 
0x00000000000292b1: jnp 0x292b2; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000292b5: jnp 0x292b6; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002a1d9: jnp 0x2a1da; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002a6b1: jnp 0x2a6b2; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002a6b5: jnp 0x2a6b6; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b3a4: jnp 0x2b3a5; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b520: jnp 0x2b521; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b524: jnp 0x2b525; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b620: jnp 0x2b621; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b624: jnp 0x2b625; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b6e2: jnp 0x2b6e3; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b6e6: jnp 0x2b6e7; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002d442: jnp 0x2d443; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002d446: jnp 0x2d447; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002d502: jnp 0x2d503; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002d506: jnp 0x2d507; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002e74a: jnp 0x2e74b; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002ea48: jnp 0x2ea49; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002eb68: jnp 0x2eb69; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002ec34: jnp 0x2ec39; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002f7e6: jnp 0x2f7f8; add byte ptr [rcx - 0x75], cl; and byte ptr [rbp + 0x1c], r14b; mov rdi, r15; call rax; 
0x000000000002f81c: jnp 0x2f82e; mov rax, qword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x0000000000035f4c: jnp 0x35f4d; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003b57e: jnp 0x3b57f; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003b582: jnp 0x3b583; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003cf9d: jnp 0x3cfc7; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000004a020: jnp 0x4a022; add byte ptr [rax], al; ret; 
0x0000000000037258: jns 0x372a3; or byte ptr [rdi], cl; xchg eax, esp; ret 0x8b48; 
0x000000000003f508: jns 0x3f50c; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x0000000000041897: jns 0x418e1; mov dword ptr [rdi + 8], 0; xor eax, eax; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000004e2da: jns 0x4e2dc; add byte ptr [rdx + 0x11], bh; call qword ptr [rax + 0x18]; 
0x00000000000071b7: jns 0x71bb; jne 0x7170; cmp r11, 3; jne 0x7170; pop rbx; ret; 
0x000000000000cd33: jns 0xcd3d; mov qword ptr [rcx + 0x20], rsi; mov qword ptr [rcx + 0x28], rdx; add rsp, 0x88; ret; 
0x000000000002eeaa: jo 0x2ef07; pop r12; pop r14; pop r15; pop rbp; ret; 
0x000000000002f4a5: jo 0x2f4af; lea rdx, [rip + 0x35632]; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000030a44: jo 0x30aa7; add eax, dword ptr [rax]; mov edx, 0x90; call rbx; 
0x0000000000032e82: jo 0x32edf; ret; 
0x0000000000032e8d: jo 0x32eea; ret; 
0x0000000000048f4c: jo 0x48f27; jmp qword ptr [rsi + 0xf]; 
0x0000000000049399: jo 0x493ab; ret; 
0x00000000000493b6: jo 0x493c8; ret; 
0x00000000000493ce: jo 0x493e0; ret; 
0x00000000000493e8: jo 0x493fa; ret; 
0x000000000004a323: jo 0x4a380; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000004a7ba: jo 0x4a817; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000004a983: jo 0x4a9e0; pop r12; pop r14; pop r15; pop rbp; ret; 
0x000000000004ac84: jo 0x4ac48; add dword ptr [rax], eax; pop rcx; ret; 
0x000000000000b3d4: jo 0xb3de; call 0xefc0; add rsp, 0x18; ret; 
0x000000000000b464: jo 0xb46e; call 0xef00; add rsp, 0x18; ret; 
0x000000000000b931: jo 0xb93b; call 0xecf0; add rsp, 0x18; ret; 
0x000000000000b951: jo 0xb95b; call 0xee50; add rsp, 0x18; ret; 
0x000000000000be99: jo 0xbea3; call 0xb150; pop rcx; ret; 
0x000000000000d1aa: jo 0xd1f4; mov dword ptr [rsp + 0x78], edx; mov rdx, qword ptr [rsp + 0x78]; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x98; ret; 
0x000000000000e007: jo 0xe031; call 0xe900; mov rax, qword ptr [rsp + 0x70]; add rsp, 0x108; ret; 
0x000000000000e012: jo 0xe05c; add esp, 0x108; ret; 
0x000000000000ed97: jo 0xed84; in al, 0x48; add esp, 0x78; ret; 
0x000000000000ee3f: jo 0xee2c; in al, 0x48; add esp, 0x78; ret; 
0x000000000000eef7: jo 0xeee4; in al, 0x48; add esp, 0x78; ret; 
0x000000000000efac: jo 0xef99; in al, 0x48; add esp, 0x78; ret; 
0x000000000000f06c: jo 0xf059; in al, 0x48; add esp, 0x78; ret; 
0x0000000000011b32: jp 0x11acf; add dword ptr [rax], eax; pop rcx; ret; 
0x000000000002f3b3: jp 0x2f3b8; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000004df9c: jp 0x4df9e; add byte ptr [rdx + 0x2c], bh; mov r8d, 0xc4; call 0x4de00; pop rcx; ret; 
0x000000000004ec1a: jp 0x4ec98; add dword ptr [rax], eax; add rsp, 0x28; ret; 
0x000000000002f09b: js 0x2f09c; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000002f124: js 0x2f125; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000002f19b: js 0x2f19c; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000002f1c9: js 0x2f1ca; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000002f6ae: js 0x2f6af; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000002f747: js 0x2f748; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000002fc43: js 0x2fca0; pop r12; pop r14; pop r15; ret; 
0x0000000000030db2: js 0x30e0f; pop r14; pop r15; pop rbp; ret; 
0x00000000000348b1: js 0x3490e; pop rbp; ret; 
0x000000000003f583: js 0x3f58a; add qword ptr [rdi + 0x18], rsi; ret; 
0x000000000004d968: js 0x4d972; mov qword ptr [rax + 0x10], r8; mov qword ptr [rax + 0x18], rcx; pop rbx; pop rbp; ret; 
0x000000000004df65: js 0x4df67; add byte ptr [rdx + 0x28], bh; mov r8d, 0x11f; call 0x4de00; pop rcx; ret; 
0x000000000000c2c1: js 0xc286; lea rax, [rip - 0x2caa]; call rax; 
0x000000000000d1af: js 0xd1f9; mov edx, dword ptr [rsp + 0x78]; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x98; ret; 
0x000000000000d1b4: js 0xd1fe; mov dword ptr [rcx + 0x10], edx; add rsp, 0x98; ret; 
0x000000000000f4a4: js 0xf4ee; mov edx, dword ptr [rsp + 0x80]; add rsp, 0xf8; ret; 
0x000000000004680a: js 0xffffffff834c6f1c; ret 0x4c02; 
0x0000000000029485: lahf; add dword ptr [rdx], 0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001ff75: lahf; push 4; add byte ptr [rax - 0x77], cl; ret; 
0x000000000003f086: lahf; xor byte ptr [rip - 0xb80000], al; ret 0x3948; 
0x000000000004656e: lar ecx, word ptr [rax - 1]; ret 0x8948; 
0x000000000004656d: lar r9d, word ptr [rax - 1]; ret 0x8948; 
0x0000000000028af9: lcall [rbx + 0x41]; pop rsi; pop r15; ret; 
0x0000000000034d76: lea eax, [rax + rax*8]; add rsp, 0x28; ret; 
0x0000000000028b01: lea eax, [rax - 0x20]; pop rbx; pop r14; pop r15; ret; 
0x000000000000bc5f: lea eax, [rax]; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000002c551: lea eax, [rax]; add rax, r13; jmp rax; 
0x000000000000c5c1: lea eax, [rip + 0x1de89]; call rax; 
0x000000000000c5d2: lea eax, [rip + 0x1dea8]; lea rdi, [rsp + 0x208]; call rax; 
0x000000000000c2f2: lea eax, [rip + 0x1df58]; call rax; 
0x000000000000c232: lea eax, [rip + 0x1e048]; lea rdi, [rsp + 0x50]; lea rsi, [rsp + 0x60]; lea rdx, [rsp + 0x38]; call rax; 
0x000000000000c1f9: lea eax, [rip + 0x1e051]; call rax; 
0x000000000000c832: lea eax, [rip + 0x1e468]; lea rdi, [rsp + 0x2b0]; call rax; 
0x000000000000c779: lea eax, [rip + 0x1e521]; lea rdi, [rsp + 0x280]; call rax; 
0x000000000000c725: lea eax, [rip + 0x1e575]; lea rdi, [rsp + 0x228]; call rax; 
0x000000000000c47b: lea eax, [rip + 0x1e81f]; mov qword ptr [rsp + 0x70], rax; call rax; 
0x000000000000c16f: lea eax, [rip + 0x1eb2b]; call rax; 
0x000000000000c976: lea eax, [rip + 0x20c14]; lea rdi, [rsp + 0x90]; call rax; 
0x000000000000c945: lea eax, [rip + 0x21055]; call rax; 
0x000000000000c8b9: lea eax, [rip + 0x210e1]; call rax; 
0x00000000000302e3: lea eax, [rip + 0x2173b]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000000c178: lea eax, [rip + 0x21832]; mov edi, 1; call rax; 
0x000000000002c6ba: lea eax, [rip + 0x252bc]; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x000000000002c1e6: lea eax, [rip + 0x25748]; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x000000000000b1e1: lea eax, [rip + 0x26149]; lea rdi, [rsp + 0x38]; call rax; 
0x0000000000029b8b: lea eax, [rip + 0x27cc7]; movsxd rcx, dword ptr [rax + rdi*4]; add rcx, rax; jmp rcx; 
0x000000000001ed3b: lea eax, [rip + 0x32703]; movsxd rcx, dword ptr [r8 + rbp*4]; add rcx, r8; jmp rcx; 
0x000000000001d988: lea eax, [rip + 0x339ae]; movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x0000000000030c4a: lea eax, [rip + 0x364d1]; pop rcx; ret; 
0x0000000000019e66: lea eax, [rip + 0x36e84]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000000f579: lea eax, [rip + 0x39d91]; call rax; 
0x000000000000f55b: lea eax, [rip + 0x39daf]; call rax; 
0x000000000002a46b: lea eax, [rip + 0x3cc0f]; pop rcx; ret; 
0x000000000002a45d: lea eax, [rip + 0x3cc1d]; pop rcx; ret; 
0x000000000002a26b: lea eax, [rip + 0x3cdd7]; pop rcx; ret; 
0x000000000002a25d: lea eax, [rip + 0x3cde5]; pop rcx; ret; 
0x000000000000c793: lea eax, [rip + 0x3cec7]; lea rdi, [rsp + 0x2f0]; mov edx, 1; mov ecx, 0x4a; call rax; 
0x000000000000c687: lea eax, [rip + 0x3cfd3]; lea rdi, [rsp + 0x268]; mov edx, 1; mov ecx, 0x4a; call rax; 
0x000000000004c2ad: lea eax, [rip + 0x8e71]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c24d: lea eax, [rip + 0x8ed1]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c214: lea eax, [rip + 0x8f0a]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c1d6: lea eax, [rip + 0x8f48]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c195: lea eax, [rip + 0x8f89]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; mov edx, r15d; jmp rcx; 
0x000000000004c13c: lea eax, [rip + 0x8fe2]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c0fd: lea eax, [rip + 0x9021]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x00000000000465b3: lea eax, [rip + 0xe397]; movsxd rbx, dword ptr [rax + r8*4]; add rbx, rax; jmp rbx; 
0x000000000000b3e1: lea eax, [rip - 0x1dc7]; call rax; 
0x000000000000b471: lea eax, [rip - 0x1e57]; call rax; 
0x000000000000b53a: lea eax, [rip - 0x1f20]; call rax; 
0x000000000000b609: lea eax, [rip - 0x1fef]; call rax; 
0x000000000000b671: lea eax, [rip - 0x2057]; call rax; 
0x000000000000b709: lea eax, [rip - 0x20ef]; call rax; 
0x000000000000b759: lea eax, [rip - 0x213f]; call rax; 
0x000000000000b87a: lea eax, [rip - 0x2260]; call rax; 
0x000000000000b999: lea eax, [rip - 0x237f]; call rax; 
0x000000000000ba32: lea eax, [rip - 0x2418]; call rax; 
0x000000000000ba92: lea eax, [rip - 0x2478]; call rax; 
0x000000000000bc69: lea eax, [rip - 0x264f]; call rax; 
0x000000000000c2c4: lea eax, [rip - 0x2caa]; call rax; 
0x000000000000c401: lea eax, [rip - 0x2de7]; call rax; 
0x000000000000c747: lea eax, [rip - 0x312d]; call rax; 
0x000000000000c9c2: lea eax, [rip - 0x33a8]; call rax; 
0x000000000000ce99: lea eax, [rip - 0x368f]; lea rdx, [rsp + 0x37]; call rax; 
0x000000000000cf19: lea eax, [rip - 0x370f]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000000cfb1: lea eax, [rip - 0x37a7]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000000d06e: lea eax, [rip - 0x3864]; mov esi, 0x2b; lea rdx, [rsp + 0x20]; call rax; 
0x000000000000cd79: lea eax, [rip - 0x390f]; call rax; 
0x000000000000cf4c: lea eax, [rip - 0x3932]; call rax; 
0x000000000000cfe4: lea eax, [rip - 0x39ca]; call rax; 
0x000000000000d0a1: lea eax, [rip - 0x3a87]; call rax; 
0x000000000000d979: lea eax, [rip - 0x448f]; mov esi, 0x49; call rax; 
0x000000000000dbf6: lea eax, [rip - 0x45dc]; call rax; 
0x000000000000dd88: lea eax, [rip - 0x476e]; call rax; 
0x000000000000e16f: lea eax, [rip - 0x4bd5]; call rax; 
0x000000000000e1a0: lea eax, [rip - 0x4c06]; call rax; 
0x000000000000e316: lea eax, [rip - 0x4d7c]; call rax; 
0x000000000000e347: lea eax, [rip - 0x4dad]; call rax; 
0x000000000000f672: lea eax, [rip - 0x6228]; call rax; 
0x0000000000009b47: lea eax, [rip - 0x65d]; mov esi, 0x28; call rax; 
0x00000000000103c3: lea eax, [rip - 0x6e29]; mov esi, 0x100; call rax; 
0x00000000000103fd: lea eax, [rip - 0x6e63]; mov esi, 0x100; call rax; 
0x00000000000102c0: lea eax, [rip - 0x6e66]; call rax; 
0x00000000000102c0: lea eax, [rip - 0x6e66]; call rax; ud2; mov al, byte ptr [rsp + 0x27]; add rsp, 0x28; ret; 
0x0000000000010539: lea eax, [rip - 0x704f]; mov esi, 0x19; call rax; 
0x00000000000106df: lea eax, [rip - 0x71f5]; mov esi, 0x2b; call rax; 
0x0000000000010c3c: lea eax, [rip - 0x7752]; mov esi, 0x2b; call rax; 
0x00000000000111e6: lea eax, [rip - 0x77fc]; xor edx, edx; call rax; 
0x0000000000028af4: lea eax, [rsi - 0x20]; pop rbx; pop r14; pop r15; ret; 
0x0000000000007e5b: lea eax, [rsp + 0x18]; mov qword ptr [rsp + 0x10], rax; lea rdi, [rsp + 0x10]; call 0x8b30; add rsp, 0x28; ret; 
0x000000000002816a: lea eax, [rsp + 0xf]; mov qword ptr [rsp + 0x10], rax; lea rdi, [rsp + 0x10]; call 0x86c0; add rsp, 0x18; ret; 
0x000000000004c484: lea eax, [rsp + 4]; mov rdi, rsi; mov rsi, rax; call qword ptr [rip + 0x1aabc]; pop rcx; ret; 
0x000000000004b3d3: lea eax, [rsp + rsi]; cmp rax, -1; je 0x4b3ed; mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000001eb41: lea eax, [rsp - 0x2e]; lea rcx, [rip + 0x32928]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000035f47: lea ebp, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000001dfb6: lea ebp, [rip + 0x33340]; movsxd rsi, dword ptr [rbp + rsi*4]; add rsi, rbp; jmp rsi; 
0x000000000002ba94: lea ebp, [rsi - 1]; mov rdi, qword ptr [r14 - 1]; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x000000000003a224: lea ebx, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000002baaf: lea ebx, [rcx - 2]; push qword ptr [rdx + rcx + 0x48]; mov edx, dword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000003129e: lea ebx, [rdi - 1]; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x0000000000042e2d: lea ebx, [rip + 0x1128d]; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x0000000000021d50: lea ebx, [rip - 0x10916]; call rbx; 
0x0000000000025566: lea ebx, [rip - 0x1413c]; mov esi, 8; mov qword ptr [rsp + 0x1b0], rdi; call rbx; 
0x000000000002b3b8: lea ebx, [rip - 0x19f7e]; je 0x2b270; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [r12]; call rbx; 
0x000000000002baad: lea ebx, [rip - 0x1a673]; je 0x2babf; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x0000000000038ebc: lea ebx, [rip - 0x27a92]; call rbx; 
0x0000000000039640: lea ebx, [rip - 0x28206]; call rbx; 
0x000000000001fc36: lea ebx, [rip - 0xe80c]; mov esi, 8; mov qword ptr [rsp + 0x168], rdi; mov rbp, r9; call rbx; 
0x0000000000020348: lea ebx, [rip - 0xef0e]; call rbx; 
0x000000000001ab39: lea ecx, [rax - 1]; cmp ecx, 0x2b; ja 0x1abf9; movsxd rax, dword ptr [r9 + rcx*4]; add rax, r9; jmp rax; 
0x0000000000049b69: lea ecx, [rdx + rsi]; dec rcx; mov rax, rdx; neg rax; and rax, rcx; ret; 
0x0000000000043674: lea ecx, [rip + 0x10aa6]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003316a: lea ecx, [rip + 0x1e8dc]; movsxd rdx, dword ptr [rcx + rdi*4]; add rdx, rcx; jmp rdx; 
0x000000000003297e: lea ecx, [rip + 0x1f0b8]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002fb1d: lea ecx, [rip + 0x21eed]; movsxd rdi, dword ptr [rcx + rdx*4]; add rdi, rcx; jmp rdi; 
0x000000000002ccef: lea ecx, [rip + 0x24ccf]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002bc99: lea ecx, [rip + 0x25c6d]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002ba34: lea ecx, [rip + 0x25ec2]; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x00000000000299f8: lea ecx, [rip + 0x27e4a]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000296d5: lea ecx, [rip + 0x2815d]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029483: lea ecx, [rip + 0x2839f]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029455: lea ecx, [rip + 0x283cd]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002833e: lea ecx, [rip + 0x294d4]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000277ea: lea ecx, [rip + 0x2a010]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002778e: lea ecx, [rip + 0x2a054]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002529e: lea ecx, [rip + 0x2c3c8]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002510e: lea ecx, [rip + 0x2c518]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000022d52: lea ecx, [rip + 0x2e788]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000022cfe: lea ecx, [rip + 0x2e840]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000022612: lea ecx, [rip + 0x2eeb0]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor ebx, ebx; jmp rax; 
0x000000000001eb46: lea ecx, [rip + 0x32928]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001e364: lea ecx, [rip + 0x32ff2]; movsxd rdx, dword ptr [rcx + rax*4]; add rdx, rcx; jmp rdx; 
0x000000000001d81d: lea ecx, [rip + 0x33ab9]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001d19f: lea ecx, [rip + 0x34117]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cfcf: lea ecx, [rip + 0x342c7]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cc66: lea ecx, [rip + 0x34618]; movsxd rax, dword ptr [r9 + rax*4]; add rax, r9; jmp rax; 
0x000000000001cbfe: lea ecx, [rip + 0x34668]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cb8e: lea ecx, [rip + 0x346c0]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cb2e: lea ecx, [rip + 0x34708]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001c6f4: lea ecx, [rip + 0x348f6]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001c77e: lea ecx, [rip + 0x34a98]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001ac08: lea ecx, [rip + 0x3622a]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000009b29: lea ecx, [rip + 0x464d1]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000d067: lea ecx, [rip + 0x5686b]; lea rax, [rip - 0x3864]; mov esi, 0x2b; lea rdx, [rsp + 0x20]; call rax; 
0x000000000000cfaa: lea ecx, [rip + 0x56928]; lea rax, [rip - 0x37a7]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000000cf12: lea ecx, [rip + 0x569c0]; lea rax, [rip - 0x370f]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000000ce92: lea ecx, [rip + 0x56a20]; lea rax, [rip - 0x368f]; lea rdx, [rsp + 0x37]; call rax; 
0x000000000004df62: lea ecx, [rip + 0x78db]; mov edx, 0x28; mov r8d, 0x11f; call 0x4de00; pop rcx; ret; 
0x000000000004c0bf: lea ecx, [rip + 0x8fbf]; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x0000000000046b52: lea ecx, [rip + 0xde08]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003498c: lea ecx, [rip - 0x62d2]; cmovne rcx, rax; call rcx; 
0x000000000003d23b: lea ecx, [rsi + rdx]; inc rcx; inc rdx; cmp rcx, r8; jb 0x3d230; ret; 
0x0000000000049c64: lea ecx, [rsp + 0x10]; mov edx, 8; mov rdi, rax; call qword ptr [rip + 0x1d22a]; add rsp, 0x18; ret; 
0x000000000002da59: lea ecx, [rsp + 0x10]; mov qword ptr [rsp + 0x40], rcx; mov qword ptr [rsp + 0x48], 1; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x0000000000012d63: lea edi, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002bfe7: lea edi, [rip + 0x2592f]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x00000000000243ff: lea edi, [rip + 0x2d1ab]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x0000000000023433: lea edi, [rip + 0x2e1d3]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000001c1fc: lea edi, [rip + 0x34cba]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000010c2e: lea edi, [rip + 0x3fdb5]; lea rdx, [rip + 0x52df5]; lea rax, [rip - 0x7752]; mov esi, 0x2b; call rax; 
0x00000000000106d1: lea edi, [rip + 0x40312]; lea rdx, [rip + 0x5333a]; lea rax, [rip - 0x71f5]; mov esi, 0x2b; call rax; 
0x000000000000d96b: lea edi, [rip + 0x42e7f]; lea rdx, [rip + 0x55fb0]; lea rax, [rip - 0x448f]; mov esi, 0x49; call rax; 
0x000000000000d060: lea edi, [rip + 0x4374d]; lea rcx, [rip + 0x5686b]; lea rax, [rip - 0x3864]; mov esi, 0x2b; lea rdx, [rsp + 0x20]; call rax; 
0x000000000000cf0b: lea edi, [rip + 0x438a2]; lea rcx, [rip + 0x569c0]; lea rax, [rip - 0x370f]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x0000000000009b39: lea edi, [rip + 0x464d1]; lea rdx, [rip + 0x59a9a]; lea rax, [rip - 0x65d]; mov esi, 0x28; call rax; 
0x000000000000cc48: lea edi, [rip - 0x10e]; xor ecx, ecx; call 0xd1f0; pop rcx; ret; 
0x0000000000028174: lea edi, [rsp + 0x10]; call 0x86c0; add rsp, 0x18; ret; 
0x0000000000007e65: lea edi, [rsp + 0x10]; call 0x8b30; add rsp, 0x28; ret; 
0x0000000000007e15: lea edi, [rsp + 0x10]; call 0x8ff0; add rsp, 0x28; ret; 
0x000000000000c0b3: lea edi, [rsp + 0x188]; call qword ptr [rip + 0x5a920]; add rsp, 0x1b8; ret; 
0x000000000000c5d9: lea edi, [rsp + 0x208]; call rax; 
0x000000000000c72c: lea edi, [rsp + 0x228]; call rax; 
0x000000000000c68e: lea edi, [rsp + 0x268]; mov edx, 1; mov ecx, 0x4a; call rax; 
0x000000000000c780: lea edi, [rsp + 0x280]; call rax; 
0x000000000000c8ee: lea edi, [rsp + 0x28]; call qword ptr [rip + 0x5a0e8]; add rsp, 0x1a8; ret; 
0x000000000000c839: lea edi, [rsp + 0x2b0]; call rax; 
0x000000000000c79a: lea edi, [rsp + 0x2f0]; mov edx, 1; mov ecx, 0x4a; call rax; 
0x000000000000c3eb: lea edi, [rsp + 0x38]; call 0xb690; mov al, byte ptr [rsp + 3]; add rsp, 0x88; ret; 
0x000000000000c2b0: lea edi, [rsp + 0x38]; call 0xb690; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x78; ret; 
0x000000000000c1ef: lea edi, [rsp + 0x38]; call 0xd3e0; lea rax, [rip + 0x1e051]; call rax; 
0x000000000000b1e8: lea edi, [rsp + 0x38]; call rax; 
0x000000000000c239: lea edi, [rsp + 0x50]; lea rsi, [rsp + 0x60]; lea rdx, [rsp + 0x38]; call rax; 
0x000000000002859c: lea edi, [rsp + 0x60]; mov rsi, rax; call qword ptr [rip + 0x3e3cf]; mov rdi, qword ptr [rsp + 0x110]; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x000000000000c642: lea edi, [rsp + 0x88]; call qword ptr [rip + 0x5a391]; add rsp, 0x318; ret; 
0x000000000000c97d: lea edi, [rsp + 0x90]; call rax; 
0x000000000000c8a7: lea edi, [rsp + 0xc8]; mov edx, 7; call 0xb180; lea rax, [rip + 0x210e1]; call rax; 
0x000000000000c49f: lea edi, [rsp + 0xe8]; mov qword ptr [rsp + 0x28], rdi; call 0xcca0; mov rdi, qword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x0000000000007eb8: lea edi, [rsp + 8]; call 0x8da0; add rsp, 0x28; ret; 
0x0000000000009fb8: lea edi, [rsp + 8]; call 0x9af0; lea rdi, [rsp + 8]; call 0xb370; add rsp, 0x18; ret; 
0x0000000000009fc2: lea edi, [rsp + 8]; call 0xb370; add rsp, 0x18; ret; 
0x000000000002db6c: lea edi, [rsp - 1]; mov rdi, qword ptr [r12 - 1]; mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x000000000003d35c: lea edx, [rcx + rax]; add rdx, -0x10; mov eax, 1; ret; 
0x000000000003d3a1: lea edx, [rcx + rax]; add rdx, 0x10; mov eax, 1; ret; 
0x000000000003d3c3: lea edx, [rcx + rax]; add rdx, 0x20; mov eax, 1; ret; 
0x0000000000042e2f: lea edx, [rdx]; add dword ptr [rax], eax; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x000000000003f5be: lea edx, [rip + 0x142f8]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000003db43: lea edx, [rip + 0x16427]; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x000000000002fa3f: lea edx, [rip + 0x21f97]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002c744: lea edx, [rip + 0x2524a]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000025188: lea edx, [rip + 0x2c4be]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000024465: lea edx, [rip + 0x2d159]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002443f: lea edx, [rip + 0x2d197]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000024419: lea edx, [rip + 0x2d1d5]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000001ed61: lea edx, [rip + 0x326ed]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000001ea72: lea edx, [rip + 0x3299c]; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x000000000002f4d4: lea edx, [rip + 0x35606]; ret; 
0x000000000002f4a8: lea edx, [rip + 0x35632]; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002f457: lea edx, [rip + 0x35663]; mov rax, rbx; add rsp, 0x50; pop rbx; ret; 
0x000000000002f398: lea edx, [rip + 0x35722]; add rsp, 0x58; pop rbx; pop r14; ret; 
0x0000000000030c43: lea edx, [rip + 0x364cf]; lea rax, [rip + 0x364d1]; pop rcx; ret; 
0x0000000000010c35: lea edx, [rip + 0x52df5]; lea rax, [rip - 0x7752]; mov esi, 0x2b; call rax; 
0x00000000000106d8: lea edx, [rip + 0x5333a]; lea rax, [rip - 0x71f5]; mov esi, 0x2b; call rax; 
0x0000000000010532: lea edx, [rip + 0x534c8]; lea rax, [rip - 0x704f]; mov esi, 0x19; call rax; 
0x00000000000103f6: lea edx, [rip + 0x535ec]; lea rax, [rip - 0x6e63]; mov esi, 0x100; call rax; 
0x00000000000103bc: lea edx, [rip + 0x5360e]; lea rax, [rip - 0x6e29]; mov esi, 0x100; call rax; 
0x000000000000e340: lea edx, [rip + 0x55642]; lea rax, [rip - 0x4dad]; call rax; 
0x000000000000e30f: lea edx, [rip + 0x5565b]; lea rax, [rip - 0x4d7c]; call rax; 
0x000000000000e199: lea edx, [rip + 0x557b9]; lea rax, [rip - 0x4c06]; call rax; 
0x000000000000e168: lea edx, [rip + 0x557d2]; lea rax, [rip - 0x4bd5]; call rax; 
0x000000000000d972: lea edx, [rip + 0x55fb0]; lea rax, [rip - 0x448f]; mov esi, 0x49; call rax; 
0x0000000000009b40: lea edx, [rip + 0x59a9a]; lea rax, [rip - 0x65d]; mov esi, 0x28; call rax; 
0x000000000004bd63: lea edx, [rip + 0x9267]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000046ed3: lea edx, [rip + 0xdaeb]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004ad24: lea edx, [rip - 0x10aa]; ret; 
0x000000000004ad03: lea edx, [rsp + 0x10]; call qword ptr [rip + 0x1c20b]; add rsp, 0x48; ret; 
0x000000000003fe43: lea edx, [rsp + 0x10]; call qword ptr [rip + 0x270cb]; add rsp, 0x48; ret; 
0x0000000000015243: lea edx, [rsp + 0x10]; call qword ptr [rip + 0x51ccb]; add rsp, 0x48; ret; 
0x00000000000151f3: lea edx, [rsp + 0x10]; call qword ptr [rip + 0x51d1b]; add rsp, 0x48; ret; 
0x00000000000151a3: lea edx, [rsp + 0x10]; call qword ptr [rip + 0x51d6b]; add rsp, 0x48; ret; 
0x0000000000015153: lea edx, [rsp + 0x10]; call qword ptr [rip + 0x51dbb]; add rsp, 0x48; ret; 
0x0000000000011d80: lea edx, [rsp + 0x10]; call qword ptr [rip + 0x5518e]; add rsp, 0x48; ret; 
0x0000000000011d40: lea edx, [rsp + 0x10]; call qword ptr [rip + 0x551ce]; add rsp, 0x48; ret; 
0x0000000000011d00: lea edx, [rsp + 0x10]; call qword ptr [rip + 0x5520e]; add rsp, 0x48; ret; 
0x000000000000cf25: lea edx, [rsp + 0x10]; call rax; 
0x000000000000d07a: lea edx, [rsp + 0x20]; call rax; 
0x000000000000cea0: lea edx, [rsp + 0x37]; call rax; 
0x000000000004a181: lea edx, [rsp + 0x38]; call qword ptr [rip + 0x1cd8d]; add rsp, 0x68; ret; 
0x000000000000c243: lea edx, [rsp + 0x38]; call rax; 
0x000000000002f092: lea esi, [rbp - 1]; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000002b827: lea esi, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000002f6a5: lea esi, [rbx - 1]; add rbx, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x0000000000012177: lea esi, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000004211a: lea esi, [rip + 0x11f00]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000002c2e9: lea esi, [rip + 0x2565d]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000000c8a0: lea esi, [rip + 0x43da1]; lea rdi, [rsp + 0xc8]; mov edx, 7; call 0xb180; lea rax, [rip + 0x210e1]; call rax; 
0x000000000000c78c: lea esi, [rip + 0x43e27]; lea rax, [rip + 0x3cec7]; lea rdi, [rsp + 0x2f0]; mov edx, 1; mov ecx, 0x4a; call rax; 
0x000000000000cd72: lea esi, [rip + 0x56b28]; lea rax, [rip - 0x390f]; call rax; 
0x000000000000cb23: lea esi, [rip + 0x56d27]; call 0xced0; add rsp, 0x128; ret; 
0x000000000004e363: lea esi, [rip + 0x6e69]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004ed6c: lea esi, [rip + 0x6f4b]; mov edx, 5; jmp rax; 
0x000000000004e349: lea esi, [rip + 0x6fd3]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004effc: lea esi, [rip + 0x711d]; mov edx, 0xb; jmp rax; 
0x000000000004e0db: lea esi, [rip + 0x723b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e0db: lea esi, [rip + 0x723b]; mov edx, 1; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000004e0bf: lea esi, [rip + 0x7258]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004e2d7: lea esi, [rip + 0x79cf]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000004e055: lea esi, [rip + 0x7c22]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000004bbc2: lea esi, [rip + 0x960a]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bae8: lea esi, [rip + 0x96e4]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bc02: lea esi, [rip + 0x971c]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bba7: lea esi, [rip + 0x9775]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bace: lea esi, [rip + 0x984e]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004b9e7: lea esi, [rip + 0x992f]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a54c: lea esi, [rip + 0xa76e]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000004aaa8: lea esi, [rip + 0xa877]; mov edx, 1; jmp rax; 
0x000000000004a93a: lea esi, [rip + 0xa892]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004aa63: lea esi, [rip + 0xa8ac]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a9dc: lea esi, [rip + 0xa941]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a9ae: lea esi, [rip + 0xa963]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a91a: lea esi, [rip + 0xaa02]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a8c8: lea esi, [rip + 0xaa47]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a82c: lea esi, [rip + 0xaaed]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a77a: lea esi, [rip + 0xab9c]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a722: lea esi, [rip + 0xabed]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a660: lea esi, [rip + 0xacac]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000004a62a: lea esi, [rip + 0xace0]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000049fd9: lea esi, [rip + 0xafd9]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000049fad: lea esi, [rip + 0xaff5]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000049f7c: lea esi, [rip + 0xb2d3]; mov edx, 0xe; jmp rax; 
0x0000000000044ffc: lea esi, [rip + 0xf29e]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x00000000000106f3: lea esi, [rsp + 0x10]; mov edx, 0x30; call 0x7078; mov rax, qword ptr [rsp + 8]; add rsp, 0x58; ret; 
0x0000000000039fd4: lea esi, [rsp + 0x130]; call qword ptr [rcx + 0x20]; 
0x000000000000fc4e: lea esi, [rsp + 0x18]; mov edx, 0x28; call 0x7078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x0000000000030a3d: lea esi, [rsp + 0x20]; mov rbx, qword ptr [rip + 0x36170]; mov edx, 0x90; call rbx; 
0x000000000002da6c: lea esi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x000000000004a700: lea esi, [rsp + 0x28]; mov rdi, r15; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000000b1f6: lea esi, [rsp + 0x38]; mov edx, 0xd0; call 0x7078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x000000000002f823: lea esi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x0000000000039f2b: lea esi, [rsp + 0x420]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000000dcbd: lea esi, [rsp + 0x48]; call 0xd4a0; mov rdi, rsp; call 0xb410; add rsp, 0xa8; ret; 
0x000000000000c23e: lea esi, [rsp + 0x60]; lea rdx, [rsp + 0x38]; call rax; 
0x0000000000030a5e: lea esi, [rsp + 0xb0]; mov edx, 0xa8; call rbx; 
0x0000000000011b2d: lea esi, [rsp + 4]; call 0x2b6b0; pop rcx; ret; 
0x0000000000011a1c: lea esi, [rsp + 4]; call 0x2b760; pop rcx; ret; 
0x000000000004acc2: lea esi, [rsp + 4]; call qword ptr [rip + 0x1c22c]; pop rcx; ret; 
0x000000000004ac7e: lea esi, [rsp + 4]; call qword ptr [rip + 0x1c270]; pop rcx; ret; 
0x000000000004ac41: lea esi, [rsp + 4]; call qword ptr [rip + 0x1c2ad]; pop rcx; ret; 
0x000000000004ac0f: lea esi, [rsp + 4]; call qword ptr [rip + 0x1c2df]; pop rcx; ret; 
0x000000000004aadc: lea esi, [rsp + 4]; call qword ptr [rip + 0x1c412]; pop rcx; ret; 
0x000000000003fe04: lea esi, [rsp + 4]; call qword ptr [rip + 0x26c8a]; pop rcx; ret; 
0x0000000000034d6a: lea esi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000002b39f: lea esp, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b39e: lea r12, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002f091: lea r14, [r13 - 1]; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000002b826: lea r14, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000002f6a4: lea r14, [rbx - 1]; add rbx, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x0000000000012176: lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002db6b: lea r15, [r12 - 1]; mov rdi, qword ptr [r12 - 1]; mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x0000000000012d62: lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002a6ae: lea r15, ds:[rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002c1e5: lea r8, [rip + 0x25748]; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x000000000001ed3a: lea r8, [rip + 0x32703]; movsxd rcx, dword ptr [r8 + rbp*4]; add rcx, r8; jmp rcx; 
0x000000000001d987: lea r8, [rip + 0x339ae]; movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x000000000002c550: lea r8d, [rax]; add rax, r13; jmp rax; 
0x000000000001cc65: lea r9, [rip + 0x34618]; movsxd rax, dword ptr [r9 + rax*4]; add rax, r9; jmp rax; 
0x000000000004df61: lea r9, [rip + 0x78db]; mov edx, 0x28; mov r8d, 0x11f; call 0x4de00; pop rcx; ret; 
0x0000000000049c63: lea r9, [rsp + 0x10]; mov edx, 8; mov rdi, rax; call qword ptr [rip + 0x1d22a]; add rsp, 0x18; ret; 
0x000000000004b3d2: lea rax, [r12 + r14]; cmp rax, -1; je 0x4b3ed; mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000001eb40: lea rax, [r12 - 0x2e]; lea rcx, [rip + 0x32928]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000028af3: lea rax, [r14 - 0x20]; pop rbx; pop r14; pop r15; ret; 
0x0000000000028b00: lea rax, [rax - 0x20]; pop rbx; pop r14; pop r15; ret; 
0x000000000000c5c0: lea rax, [rip + 0x1de89]; call rax; 
0x000000000000c5d1: lea rax, [rip + 0x1dea8]; lea rdi, [rsp + 0x208]; call rax; 
0x000000000000c2f1: lea rax, [rip + 0x1df58]; call rax; 
0x000000000000c231: lea rax, [rip + 0x1e048]; lea rdi, [rsp + 0x50]; lea rsi, [rsp + 0x60]; lea rdx, [rsp + 0x38]; call rax; 
0x000000000000c1f8: lea rax, [rip + 0x1e051]; call rax; 
0x000000000000c831: lea rax, [rip + 0x1e468]; lea rdi, [rsp + 0x2b0]; call rax; 
0x000000000000c778: lea rax, [rip + 0x1e521]; lea rdi, [rsp + 0x280]; call rax; 
0x000000000000c724: lea rax, [rip + 0x1e575]; lea rdi, [rsp + 0x228]; call rax; 
0x000000000000c47a: lea rax, [rip + 0x1e81f]; mov qword ptr [rsp + 0x70], rax; call rax; 
0x000000000000c16e: lea rax, [rip + 0x1eb2b]; call rax; 
0x000000000000c975: lea rax, [rip + 0x20c14]; lea rdi, [rsp + 0x90]; call rax; 
0x000000000000c944: lea rax, [rip + 0x21055]; call rax; 
0x000000000000c8b8: lea rax, [rip + 0x210e1]; call rax; 
0x00000000000302e2: lea rax, [rip + 0x2173b]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000000c177: lea rax, [rip + 0x21832]; mov edi, 1; call rax; 
0x000000000002c6b9: lea rax, [rip + 0x252bc]; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x000000000000b1e0: lea rax, [rip + 0x26149]; lea rdi, [rsp + 0x38]; call rax; 
0x0000000000029b8a: lea rax, [rip + 0x27cc7]; movsxd rcx, dword ptr [rax + rdi*4]; add rcx, rax; jmp rcx; 
0x0000000000030c49: lea rax, [rip + 0x364d1]; pop rcx; ret; 
0x0000000000019e65: lea rax, [rip + 0x36e84]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000000f578: lea rax, [rip + 0x39d91]; call rax; 
0x000000000000f55a: lea rax, [rip + 0x39daf]; call rax; 
0x000000000002a46a: lea rax, [rip + 0x3cc0f]; pop rcx; ret; 
0x000000000002a45c: lea rax, [rip + 0x3cc1d]; pop rcx; ret; 
0x000000000002a26a: lea rax, [rip + 0x3cdd7]; pop rcx; ret; 
0x000000000002a25c: lea rax, [rip + 0x3cde5]; pop rcx; ret; 
0x000000000000c792: lea rax, [rip + 0x3cec7]; lea rdi, [rsp + 0x2f0]; mov edx, 1; mov ecx, 0x4a; call rax; 
0x000000000000c686: lea rax, [rip + 0x3cfd3]; lea rdi, [rsp + 0x268]; mov edx, 1; mov ecx, 0x4a; call rax; 
0x000000000004c2ac: lea rax, [rip + 0x8e71]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c24c: lea rax, [rip + 0x8ed1]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c213: lea rax, [rip + 0x8f0a]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c1d5: lea rax, [rip + 0x8f48]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c194: lea rax, [rip + 0x8f89]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; mov edx, r15d; jmp rcx; 
0x000000000004c13b: lea rax, [rip + 0x8fe2]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c0fc: lea rax, [rip + 0x9021]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x00000000000465b2: lea rax, [rip + 0xe397]; movsxd rbx, dword ptr [rax + r8*4]; add rbx, rax; jmp rbx; 
0x000000000000b3e0: lea rax, [rip - 0x1dc7]; call rax; 
0x000000000000b470: lea rax, [rip - 0x1e57]; call rax; 
0x000000000000b539: lea rax, [rip - 0x1f20]; call rax; 
0x000000000000b608: lea rax, [rip - 0x1fef]; call rax; 
0x000000000000b670: lea rax, [rip - 0x2057]; call rax; 
0x000000000000b708: lea rax, [rip - 0x20ef]; call rax; 
0x000000000000b758: lea rax, [rip - 0x213f]; call rax; 
0x000000000000b879: lea rax, [rip - 0x2260]; call rax; 
0x000000000000b998: lea rax, [rip - 0x237f]; call rax; 
0x000000000000ba31: lea rax, [rip - 0x2418]; call rax; 
0x000000000000ba91: lea rax, [rip - 0x2478]; call rax; 
0x000000000000bc68: lea rax, [rip - 0x264f]; call rax; 
0x000000000000c2c3: lea rax, [rip - 0x2caa]; call rax; 
0x000000000000c400: lea rax, [rip - 0x2de7]; call rax; 
0x000000000000c746: lea rax, [rip - 0x312d]; call rax; 
0x000000000000c9c1: lea rax, [rip - 0x33a8]; call rax; 
0x000000000000ce98: lea rax, [rip - 0x368f]; lea rdx, [rsp + 0x37]; call rax; 
0x000000000000cf18: lea rax, [rip - 0x370f]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000000cfb0: lea rax, [rip - 0x37a7]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000000d06d: lea rax, [rip - 0x3864]; mov esi, 0x2b; lea rdx, [rsp + 0x20]; call rax; 
0x000000000000cd78: lea rax, [rip - 0x390f]; call rax; 
0x000000000000cf4b: lea rax, [rip - 0x3932]; call rax; 
0x000000000000cfe3: lea rax, [rip - 0x39ca]; call rax; 
0x000000000000d0a0: lea rax, [rip - 0x3a87]; call rax; 
0x000000000000d978: lea rax, [rip - 0x448f]; mov esi, 0x49; call rax; 
0x000000000000dbf5: lea rax, [rip - 0x45dc]; call rax; 
0x000000000000dd87: lea rax, [rip - 0x476e]; call rax; 
0x000000000000e16e: lea rax, [rip - 0x4bd5]; call rax; 
0x000000000000e19f: lea rax, [rip - 0x4c06]; call rax; 
0x000000000000e315: lea rax, [rip - 0x4d7c]; call rax; 
0x000000000000e346: lea rax, [rip - 0x4dad]; call rax; 
0x000000000000f671: lea rax, [rip - 0x6228]; call rax; 
0x0000000000009b46: lea rax, [rip - 0x65d]; mov esi, 0x28; call rax; 
0x00000000000103c2: lea rax, [rip - 0x6e29]; mov esi, 0x100; call rax; 
0x00000000000103fc: lea rax, [rip - 0x6e63]; mov esi, 0x100; call rax; 
0x00000000000102bf: lea rax, [rip - 0x6e66]; call rax; 
0x00000000000102bf: lea rax, [rip - 0x6e66]; call rax; ud2; mov al, byte ptr [rsp + 0x27]; add rsp, 0x28; ret; 
0x0000000000010538: lea rax, [rip - 0x704f]; mov esi, 0x19; call rax; 
0x00000000000106de: lea rax, [rip - 0x71f5]; mov esi, 0x2b; call rax; 
0x0000000000010c3b: lea rax, [rip - 0x7752]; mov esi, 0x2b; call rax; 
0x00000000000111e5: lea rax, [rip - 0x77fc]; xor edx, edx; call rax; 
0x0000000000007e5a: lea rax, [rsp + 0x18]; mov qword ptr [rsp + 0x10], rax; lea rdi, [rsp + 0x10]; call 0x8b30; add rsp, 0x28; ret; 
0x0000000000028169: lea rax, [rsp + 0xf]; mov qword ptr [rsp + 0x10], rax; lea rdi, [rsp + 0x10]; call 0x86c0; add rsp, 0x18; ret; 
0x000000000004c483: lea rax, [rsp + 4]; mov rdi, rsi; mov rsi, rax; call qword ptr [rip + 0x1aabc]; pop rcx; ret; 
0x0000000000019e64: lea rax, cs:[rip + 0x36e84]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000002ba93: lea rbp, [r14 - 1]; mov rdi, qword ptr [r14 - 1]; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x0000000000035f46: lea rbp, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000001dfb5: lea rbp, [rip + 0x33340]; movsxd rsi, dword ptr [rbp + rsi*4]; add rsi, rbp; jmp rsi; 
0x000000000003129d: lea rbx, [r15 - 1]; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000003a223: lea rbx, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x0000000000042e2c: lea rbx, [rip + 0x1128d]; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x0000000000021d4f: lea rbx, [rip - 0x10916]; call rbx; 
0x0000000000025565: lea rbx, [rip - 0x1413c]; mov esi, 8; mov qword ptr [rsp + 0x1b0], rdi; call rbx; 
0x000000000002b3b7: lea rbx, [rip - 0x19f7e]; je 0x2b270; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [r12]; call rbx; 
0x000000000002baac: lea rbx, [rip - 0x1a673]; je 0x2babf; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x0000000000038ebb: lea rbx, [rip - 0x27a92]; call rbx; 
0x000000000003963f: lea rbx, [rip - 0x28206]; call rbx; 
0x000000000001fc35: lea rbx, [rip - 0xe80c]; mov esi, 8; mov qword ptr [rsp + 0x168], rdi; mov rbp, r9; call rbx; 
0x0000000000020347: lea rbx, [rip - 0xef0e]; call rbx; 
0x0000000000049b68: lea rcx, [rdx + rsi]; dec rcx; mov rax, rdx; neg rax; and rax, rcx; ret; 
0x0000000000043673: lea rcx, [rip + 0x10aa6]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000033169: lea rcx, [rip + 0x1e8dc]; movsxd rdx, dword ptr [rcx + rdi*4]; add rdx, rcx; jmp rdx; 
0x000000000003297d: lea rcx, [rip + 0x1f0b8]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002fb1c: lea rcx, [rip + 0x21eed]; movsxd rdi, dword ptr [rcx + rdx*4]; add rdi, rcx; jmp rdi; 
0x000000000002ccee: lea rcx, [rip + 0x24ccf]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002bc98: lea rcx, [rip + 0x25c6d]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002ba33: lea rcx, [rip + 0x25ec2]; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x00000000000299f7: lea rcx, [rip + 0x27e4a]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000296d4: lea rcx, [rip + 0x2815d]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029482: lea rcx, [rip + 0x2839f]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029454: lea rcx, [rip + 0x283cd]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002833d: lea rcx, [rip + 0x294d4]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000277e9: lea rcx, [rip + 0x2a010]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002778d: lea rcx, [rip + 0x2a054]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002529d: lea rcx, [rip + 0x2c3c8]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002510d: lea rcx, [rip + 0x2c518]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000022d51: lea rcx, [rip + 0x2e788]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000022cfd: lea rcx, [rip + 0x2e840]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000022611: lea rcx, [rip + 0x2eeb0]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor ebx, ebx; jmp rax; 
0x000000000001eb45: lea rcx, [rip + 0x32928]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001e363: lea rcx, [rip + 0x32ff2]; movsxd rdx, dword ptr [rcx + rax*4]; add rdx, rcx; jmp rdx; 
0x000000000001d81c: lea rcx, [rip + 0x33ab9]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001d19e: lea rcx, [rip + 0x34117]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cfce: lea rcx, [rip + 0x342c7]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cbfd: lea rcx, [rip + 0x34668]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cb8d: lea rcx, [rip + 0x346c0]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cb2d: lea rcx, [rip + 0x34708]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001c6f3: lea rcx, [rip + 0x348f6]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001c77d: lea rcx, [rip + 0x34a98]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001ac07: lea rcx, [rip + 0x3622a]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000009b28: lea rcx, [rip + 0x464d1]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000d066: lea rcx, [rip + 0x5686b]; lea rax, [rip - 0x3864]; mov esi, 0x2b; lea rdx, [rsp + 0x20]; call rax; 
0x000000000000cfa9: lea rcx, [rip + 0x56928]; lea rax, [rip - 0x37a7]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000000cf11: lea rcx, [rip + 0x569c0]; lea rax, [rip - 0x370f]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000000ce91: lea rcx, [rip + 0x56a20]; lea rax, [rip - 0x368f]; lea rdx, [rsp + 0x37]; call rax; 
0x000000000004c0be: lea rcx, [rip + 0x8fbf]; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x0000000000046b51: lea rcx, [rip + 0xde08]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003498b: lea rcx, [rip - 0x62d2]; cmovne rcx, rax; call rcx; 
0x000000000003d23a: lea rcx, [rsi + rdx]; inc rcx; inc rdx; cmp rcx, r8; jb 0x3d230; ret; 
0x000000000002da58: lea rcx, [rsp + 0x10]; mov qword ptr [rsp + 0x40], rcx; mov qword ptr [rsp + 0x48], 1; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x000000000002bfe6: lea rdi, [rip + 0x2592f]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x00000000000243fe: lea rdi, [rip + 0x2d1ab]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x0000000000023432: lea rdi, [rip + 0x2e1d3]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000001c1fb: lea rdi, [rip + 0x34cba]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000010c2d: lea rdi, [rip + 0x3fdb5]; lea rdx, [rip + 0x52df5]; lea rax, [rip - 0x7752]; mov esi, 0x2b; call rax; 
0x00000000000106d0: lea rdi, [rip + 0x40312]; lea rdx, [rip + 0x5333a]; lea rax, [rip - 0x71f5]; mov esi, 0x2b; call rax; 
0x000000000000d96a: lea rdi, [rip + 0x42e7f]; lea rdx, [rip + 0x55fb0]; lea rax, [rip - 0x448f]; mov esi, 0x49; call rax; 
0x000000000000d05f: lea rdi, [rip + 0x4374d]; lea rcx, [rip + 0x5686b]; lea rax, [rip - 0x3864]; mov esi, 0x2b; lea rdx, [rsp + 0x20]; call rax; 
0x000000000000cf0a: lea rdi, [rip + 0x438a2]; lea rcx, [rip + 0x569c0]; lea rax, [rip - 0x370f]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x0000000000009b38: lea rdi, [rip + 0x464d1]; lea rdx, [rip + 0x59a9a]; lea rax, [rip - 0x65d]; mov esi, 0x28; call rax; 
0x000000000000cc47: lea rdi, [rip - 0x10e]; xor ecx, ecx; call 0xd1f0; pop rcx; ret; 
0x0000000000028173: lea rdi, [rsp + 0x10]; call 0x86c0; add rsp, 0x18; ret; 
0x0000000000007e64: lea rdi, [rsp + 0x10]; call 0x8b30; add rsp, 0x28; ret; 
0x0000000000007e14: lea rdi, [rsp + 0x10]; call 0x8ff0; add rsp, 0x28; ret; 
0x000000000000c0b2: lea rdi, [rsp + 0x188]; call qword ptr [rip + 0x5a920]; add rsp, 0x1b8; ret; 
0x000000000000c5d8: lea rdi, [rsp + 0x208]; call rax; 
0x000000000000c72b: lea rdi, [rsp + 0x228]; call rax; 
0x000000000000c68d: lea rdi, [rsp + 0x268]; mov edx, 1; mov ecx, 0x4a; call rax; 
0x000000000000c77f: lea rdi, [rsp + 0x280]; call rax; 
0x000000000000c8ed: lea rdi, [rsp + 0x28]; call qword ptr [rip + 0x5a0e8]; add rsp, 0x1a8; ret; 
0x000000000000c838: lea rdi, [rsp + 0x2b0]; call rax; 
0x000000000000c799: lea rdi, [rsp + 0x2f0]; mov edx, 1; mov ecx, 0x4a; call rax; 
0x000000000000c3ea: lea rdi, [rsp + 0x38]; call 0xb690; mov al, byte ptr [rsp + 3]; add rsp, 0x88; ret; 
0x000000000000c2af: lea rdi, [rsp + 0x38]; call 0xb690; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x78; ret; 
0x000000000000c1ee: lea rdi, [rsp + 0x38]; call 0xd3e0; lea rax, [rip + 0x1e051]; call rax; 
0x000000000000b1e7: lea rdi, [rsp + 0x38]; call rax; 
0x000000000000c238: lea rdi, [rsp + 0x50]; lea rsi, [rsp + 0x60]; lea rdx, [rsp + 0x38]; call rax; 
0x000000000002859b: lea rdi, [rsp + 0x60]; mov rsi, rax; call qword ptr [rip + 0x3e3cf]; mov rdi, qword ptr [rsp + 0x110]; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x000000000000c641: lea rdi, [rsp + 0x88]; call qword ptr [rip + 0x5a391]; add rsp, 0x318; ret; 
0x000000000000c97c: lea rdi, [rsp + 0x90]; call rax; 
0x000000000000c8a6: lea rdi, [rsp + 0xc8]; mov edx, 7; call 0xb180; lea rax, [rip + 0x210e1]; call rax; 
0x000000000000c49e: lea rdi, [rsp + 0xe8]; mov qword ptr [rsp + 0x28], rdi; call 0xcca0; mov rdi, qword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x0000000000007eb7: lea rdi, [rsp + 8]; call 0x8da0; add rsp, 0x28; ret; 
0x0000000000009fb7: lea rdi, [rsp + 8]; call 0x9af0; lea rdi, [rsp + 8]; call 0xb370; add rsp, 0x18; ret; 
0x0000000000009fc1: lea rdi, [rsp + 8]; call 0xb370; add rsp, 0x18; ret; 
0x000000000003d35b: lea rdx, [rcx + rax]; add rdx, -0x10; mov eax, 1; ret; 
0x000000000003d3a0: lea rdx, [rcx + rax]; add rdx, 0x10; mov eax, 1; ret; 
0x000000000003d3c2: lea rdx, [rcx + rax]; add rdx, 0x20; mov eax, 1; ret; 
0x000000000003f5bd: lea rdx, [rip + 0x142f8]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000003db42: lea rdx, [rip + 0x16427]; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x000000000002fa3e: lea rdx, [rip + 0x21f97]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002c743: lea rdx, [rip + 0x2524a]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000025187: lea rdx, [rip + 0x2c4be]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000024464: lea rdx, [rip + 0x2d159]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002443e: lea rdx, [rip + 0x2d197]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000024418: lea rdx, [rip + 0x2d1d5]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000001ed60: lea rdx, [rip + 0x326ed]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000001ea71: lea rdx, [rip + 0x3299c]; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x000000000002f4d3: lea rdx, [rip + 0x35606]; ret; 
0x000000000002f4a7: lea rdx, [rip + 0x35632]; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002f456: lea rdx, [rip + 0x35663]; mov rax, rbx; add rsp, 0x50; pop rbx; ret; 
0x000000000002f397: lea rdx, [rip + 0x35722]; add rsp, 0x58; pop rbx; pop r14; ret; 
0x0000000000030c42: lea rdx, [rip + 0x364cf]; lea rax, [rip + 0x364d1]; pop rcx; ret; 
0x0000000000010c34: lea rdx, [rip + 0x52df5]; lea rax, [rip - 0x7752]; mov esi, 0x2b; call rax; 
0x00000000000106d7: lea rdx, [rip + 0x5333a]; lea rax, [rip - 0x71f5]; mov esi, 0x2b; call rax; 
0x0000000000010531: lea rdx, [rip + 0x534c8]; lea rax, [rip - 0x704f]; mov esi, 0x19; call rax; 
0x00000000000103f5: lea rdx, [rip + 0x535ec]; lea rax, [rip - 0x6e63]; mov esi, 0x100; call rax; 
0x00000000000103bb: lea rdx, [rip + 0x5360e]; lea rax, [rip - 0x6e29]; mov esi, 0x100; call rax; 
0x000000000000e33f: lea rdx, [rip + 0x55642]; lea rax, [rip - 0x4dad]; call rax; 
0x000000000000e30e: lea rdx, [rip + 0x5565b]; lea rax, [rip - 0x4d7c]; call rax; 
0x000000000000e198: lea rdx, [rip + 0x557b9]; lea rax, [rip - 0x4c06]; call rax; 
0x000000000000e167: lea rdx, [rip + 0x557d2]; lea rax, [rip - 0x4bd5]; call rax; 
0x000000000000d971: lea rdx, [rip + 0x55fb0]; lea rax, [rip - 0x448f]; mov esi, 0x49; call rax; 
0x0000000000009b3f: lea rdx, [rip + 0x59a9a]; lea rax, [rip - 0x65d]; mov esi, 0x28; call rax; 
0x000000000004bd62: lea rdx, [rip + 0x9267]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000046ed2: lea rdx, [rip + 0xdaeb]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004ad23: lea rdx, [rip - 0x10aa]; ret; 
0x000000000004ad02: lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x1c20b]; add rsp, 0x48; ret; 
0x000000000003fe42: lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x270cb]; add rsp, 0x48; ret; 
0x0000000000015242: lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x51ccb]; add rsp, 0x48; ret; 
0x00000000000151f2: lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x51d1b]; add rsp, 0x48; ret; 
0x00000000000151a2: lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x51d6b]; add rsp, 0x48; ret; 
0x0000000000015152: lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x51dbb]; add rsp, 0x48; ret; 
0x0000000000011d7f: lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x5518e]; add rsp, 0x48; ret; 
0x0000000000011d3f: lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x551ce]; add rsp, 0x48; ret; 
0x0000000000011cff: lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x5520e]; add rsp, 0x48; ret; 
0x000000000000cf24: lea rdx, [rsp + 0x10]; call rax; 
0x000000000000d079: lea rdx, [rsp + 0x20]; call rax; 
0x000000000000ce9f: lea rdx, [rsp + 0x37]; call rax; 
0x000000000004a180: lea rdx, [rsp + 0x38]; call qword ptr [rip + 0x1cd8d]; add rsp, 0x68; ret; 
0x000000000000c242: lea rdx, [rsp + 0x38]; call rax; 
0x0000000000042119: lea rsi, [rip + 0x11f00]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000002c2e8: lea rsi, [rip + 0x2565d]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000000c89f: lea rsi, [rip + 0x43da1]; lea rdi, [rsp + 0xc8]; mov edx, 7; call 0xb180; lea rax, [rip + 0x210e1]; call rax; 
0x000000000000c78b: lea rsi, [rip + 0x43e27]; lea rax, [rip + 0x3cec7]; lea rdi, [rsp + 0x2f0]; mov edx, 1; mov ecx, 0x4a; call rax; 
0x000000000000cd71: lea rsi, [rip + 0x56b28]; lea rax, [rip - 0x390f]; call rax; 
0x000000000000cb22: lea rsi, [rip + 0x56d27]; call 0xced0; add rsp, 0x128; ret; 
0x000000000004e362: lea rsi, [rip + 0x6e69]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004ed6b: lea rsi, [rip + 0x6f4b]; mov edx, 5; jmp rax; 
0x000000000004e348: lea rsi, [rip + 0x6fd3]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004effb: lea rsi, [rip + 0x711d]; mov edx, 0xb; jmp rax; 
0x000000000004e0da: lea rsi, [rip + 0x723b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e0da: lea rsi, [rip + 0x723b]; mov edx, 1; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000004e0be: lea rsi, [rip + 0x7258]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004e2d6: lea rsi, [rip + 0x79cf]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000004e054: lea rsi, [rip + 0x7c22]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000004bbc1: lea rsi, [rip + 0x960a]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bae7: lea rsi, [rip + 0x96e4]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bc01: lea rsi, [rip + 0x971c]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bba6: lea rsi, [rip + 0x9775]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bacd: lea rsi, [rip + 0x984e]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004b9e6: lea rsi, [rip + 0x992f]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a54b: lea rsi, [rip + 0xa76e]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000004aaa7: lea rsi, [rip + 0xa877]; mov edx, 1; jmp rax; 
0x000000000004a939: lea rsi, [rip + 0xa892]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004aa62: lea rsi, [rip + 0xa8ac]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a9db: lea rsi, [rip + 0xa941]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a9ad: lea rsi, [rip + 0xa963]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a919: lea rsi, [rip + 0xaa02]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a8c7: lea rsi, [rip + 0xaa47]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a82b: lea rsi, [rip + 0xaaed]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a779: lea rsi, [rip + 0xab9c]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a721: lea rsi, [rip + 0xabed]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a65f: lea rsi, [rip + 0xacac]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000004a629: lea rsi, [rip + 0xace0]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000049fd8: lea rsi, [rip + 0xafd9]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000049fac: lea rsi, [rip + 0xaff5]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000049f7b: lea rsi, [rip + 0xb2d3]; mov edx, 0xe; jmp rax; 
0x0000000000044ffb: lea rsi, [rip + 0xf29e]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x00000000000106f2: lea rsi, [rsp + 0x10]; mov edx, 0x30; call 0x7078; mov rax, qword ptr [rsp + 8]; add rsp, 0x58; ret; 
0x0000000000039fd3: lea rsi, [rsp + 0x130]; call qword ptr [rcx + 0x20]; 
0x000000000000fc4d: lea rsi, [rsp + 0x18]; mov edx, 0x28; call 0x7078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x0000000000030a3c: lea rsi, [rsp + 0x20]; mov rbx, qword ptr [rip + 0x36170]; mov edx, 0x90; call rbx; 
0x000000000002da6b: lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x000000000004a6ff: lea rsi, [rsp + 0x28]; mov rdi, r15; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000000b1f5: lea rsi, [rsp + 0x38]; mov edx, 0xd0; call 0x7078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x000000000002f822: lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x0000000000039f2a: lea rsi, [rsp + 0x420]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000000dcbc: lea rsi, [rsp + 0x48]; call 0xd4a0; mov rdi, rsp; call 0xb410; add rsp, 0xa8; ret; 
0x000000000000c23d: lea rsi, [rsp + 0x60]; lea rdx, [rsp + 0x38]; call rax; 
0x0000000000030a5d: lea rsi, [rsp + 0xb0]; mov edx, 0xa8; call rbx; 
0x0000000000011b2c: lea rsi, [rsp + 4]; call 0x2b6b0; pop rcx; ret; 
0x0000000000011a1b: lea rsi, [rsp + 4]; call 0x2b760; pop rcx; ret; 
0x000000000004acc1: lea rsi, [rsp + 4]; call qword ptr [rip + 0x1c22c]; pop rcx; ret; 
0x000000000004ac7d: lea rsi, [rsp + 4]; call qword ptr [rip + 0x1c270]; pop rcx; ret; 
0x000000000004ac40: lea rsi, [rsp + 4]; call qword ptr [rip + 0x1c2ad]; pop rcx; ret; 
0x000000000004ac0e: lea rsi, [rsp + 4]; call qword ptr [rip + 0x1c2df]; pop rcx; ret; 
0x000000000004aadb: lea rsi, [rsp + 4]; call qword ptr [rip + 0x1c412]; pop rcx; ret; 
0x000000000003fe03: lea rsi, [rsp + 4]; call qword ptr [rip + 0x26c8a]; pop rcx; ret; 
0x0000000000034d69: lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000000cc4f: leave; call 0xd1f0; pop rcx; ret; 
0x000000000000f0f2: leave; call 0xeb40; pop rcx; ret; 
0x000000000004ed47: leave; call qword ptr [rip + 0x17b4a]; add rsp, 0x28; ret; 
0x000000000004ec17: leave; call qword ptr [rip + 0x17c7a]; add rsp, 0x28; ret; 
0x000000000004eae9: leave; call qword ptr [rip + 0x17da8]; add rsp, 0x30; pop rbx; ret; 
0x000000000004e9b3: leave; call qword ptr [rip + 0x17ede]; add rsp, 0x28; ret; 
0x000000000004e905: leave; call qword ptr [rip + 0x17f8c]; add rsp, 0x88; ret; 
0x000000000001daab: leave; cmp byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000001cba4: leave; cmp rdx, 0x100; setb al; and al, cl; ret; 
0x0000000000016d02: leave; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000003fe7c: leave; je 0x3fe82; mov al, 1; ret; 
0x0000000000045df6: leave; je 0x45ea6; add rsp, 0x68; pop rbx; pop r14; ret; 
0x000000000002ec33: leave; jnp 0x2ec39; add byte ptr [rax - 0x77], cl; ret; 
0x000000000003d35a: leave; lea rdx, [rcx + rax]; add rdx, -0x10; mov eax, 1; ret; 
0x000000000003d39f: leave; lea rdx, [rcx + rax]; add rdx, 0x10; mov eax, 1; ret; 
0x000000000003d3c1: leave; lea rdx, [rcx + rax]; add rdx, 0x20; mov eax, 1; ret; 
0x000000000002fa3d: leave; lea rdx, [rip + 0x21f97]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000004c9f7: leave; mov qword ptr [rax], rcx; pop rbx; pop r14; pop rbp; ret; 
0x000000000003fe77: leave; mov qword ptr [rax], rcx; test cl, cl; je 0x3fe82; mov al, 1; ret; 
0x000000000004938f: leave; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x0000000000049b6e: leave; mov rax, rdx; neg rax; and rax, rcx; ret; 
0x00000000000493a9: leave; mov rdx, rsi; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000003d357: leave; movzx ecx, cx; lea rdx, [rcx + rax]; add rdx, -0x10; mov eax, 1; ret; 
0x000000000003d39c: leave; movzx ecx, cx; lea rdx, [rcx + rax]; add rdx, 0x10; mov eax, 1; ret; 
0x000000000003d384: leave; movzx edx, cx; add rdx, rax; mov eax, 1; ret; 
0x000000000004f1d8: leave; ret; 
0x00000000000156c3: leave; sbb edi, edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000041951: leave; shl rax, 0x20; or rax, rcx; ret; 
0x00000000000138b3: leave; xor dword ptr [rip + 0x5e415b00], eax; pop r15; ret; 
0x000000000000c79d: lock add al, byte ptr [rax]; add byte ptr [rdx + 1], bh; mov ecx, 0x4a; call rax; 
0x000000000001eae1: lock add dword ptr [rax], eax; add byte ptr [rcx + 0x39], cl; ret; 
0x0000000000032981: lock add dword ptr [rax], eax; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004aeb6: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000004a62d: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a663: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; mov edx, 3; call qword ptr [rax + 0x18]; 
0x00000000000122d7: lodsb al, byte ptr [rsi]; and al, 0x30; add al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret; 
0x000000000003dc39: lodsb al, byte ptr [rsi]; fsub st(0); add al, 0; add byte ptr [rdi], cl; xchg eax, ebp; ret 0xf41; 
0x000000000004a662: lodsb al, byte ptr [rsi]; lodsb al, byte ptr [rsi]; add byte ptr [rax], al; mov edx, 3; call qword ptr [rax + 0x18]; 
0x0000000000010f48: lodsb al, byte ptr [rsi]; mov eax, dword ptr [rsp + 0x18]; mov edx, dword ptr [rsp + 0x1c]; add rsp, 0x38; ret; 
0x00000000000116d6: lodsb al, byte ptr [rsi]; pop rbp; and al, 0; ret; 
0x000000000003e37d: lodsb al, byte ptr [rsi]; ret; 
0x000000000004aa65: lodsb al, byte ptr [rsi]; test al, 0; add byte ptr [rdx + 2], bh; call qword ptr [rax + 0x18]; 
0x000000000001c47a: lodsd eax, dword ptr [rsi]; add dword ptr [rax], eax; add byte ptr [rbp + rcx*4 + 0x79], cl; add cl, byte ptr [rcx - 0x7d]; ret 0x4cfe; 
0x000000000004ac47: lodsd eax, dword ptr [rsi]; ret 1; 
0x0000000000023436: loope 0x2343a; add byte ptr [rax + 0x63], cl; xor al, 0xb7; add rsi, rdi; jmp rsi; 
0x000000000002887a: loope 0x2887f; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x0000000000029b85: loope 0x29bcf; shr edi, 0x20; lea rax, [rip + 0x27cc7]; movsxd rcx, dword ptr [rax + rdi*4]; add rcx, rax; jmp rcx; 
0x000000000003bc08: loope 0x3bc7a; mov word ptr [rax - 0x77], cs; ret; 
0x0000000000049fe7: loope 0x49faf; or al, 0; mov eax, 0x7d; ret; 
0x000000000004e279: loope 0x4e28a; nop; ret 0xc783; 
0x000000000004f26b: loope 0x4f2ea; sti; inc dword ptr [rax]; sub rsp, 8; add rsp, 8; ret; 
0x000000000000b65d: loope 0xb6a7; mov edi, dword ptr [rsp]; add rdi, 0x18; call 0xb6d0; add rsp, 0x18; ret; 
0x000000000000c8bb: loope 0xc8cd; add al, byte ptr [rax]; call rax; 
0x0000000000046595: lsl ecx, dword ptr [rax - 0x7d]; rol dword ptr [rax + rcx*2], 0xff; ret 0xff49; 
0x0000000000046594: lsl r9d, dword ptr [rax - 0x7d]; rol dword ptr [rax + rcx*2], 0xff; ret 0xff49; 
0x000000000001ab41: mov ah, 0; add byte ptr [rax], al; movsxd rax, dword ptr [r9 + rcx*4]; add rax, r9; jmp rax; 
0x00000000000399d5: mov ah, 0x24; add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret; 
0x0000000000039f2c: mov ah, 0x24; and byte ptr [rax + rax], al; add byte ptr [rax - 0x75], cl; and al, 8; call qword ptr [rax + 0x20]; 
0x0000000000030a5f: mov ah, 0x24; mov al, 0; add byte ptr [rax], al; mov edx, 0xa8; call rbx; 
0x0000000000039fd5: mov ah, 0x24; xor byte ptr [rcx], al; add byte ptr [rax], al; call qword ptr [rcx + 0x20]; 
0x000000000002ca80: mov ah, 0x4c; add esi, esp; jmp rsi; 
0x00000000000243fa: mov al, 0; add byte ptr [rax], al; lea rdi, [rip + 0x2d1ab]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x0000000000030a61: mov al, 0; add byte ptr [rax], al; mov edx, 0xa8; call rbx; 
0x000000000003012b: mov al, 0; add byte ptr [rax], al; movups xmmword ptr [rsp + 0x10], xmm0; mov qword ptr [rsp], rsi; call qword ptr [rax + 0x20]; 
0x000000000002d493: mov al, 0; add byte ptr [rax], al; pop rbx; pop r14; pop r15; ret; 
0x000000000002ad6b: mov al, 0; add byte ptr [rax], al; pop rbx; ret; 
0x000000000000d864: mov al, 0; add byte ptr [rax], al; ret; 
0x00000000000331bb: mov al, 0x10; ret; 
0x00000000000331a9: mov al, 0x11; ret; 
0x00000000000331be: mov al, 0x12; ret; 
0x00000000000331df: mov al, 0x13; ret; 
0x000000000003319a: mov al, 0x14; ret; 
0x00000000000331d6: mov al, 0x16; ret; 
0x00000000000331a3: mov al, 0x18; ret; 
0x00000000000331a6: mov al, 0x19; ret; 
0x00000000000331e2: mov al, 0x1a; ret; 
0x00000000000331a0: mov al, 0x1b; ret; 
0x000000000003318b: mov al, 0x1c; ret; 
0x000000000003319d: mov al, 0x1d; ret; 
0x00000000000331b2: mov al, 0x1e; ret; 
0x0000000000033191: mov al, 0x1f; ret; 
0x00000000000331ac: mov al, 0x20; ret; 
0x00000000000331b5: mov al, 0x21; ret; 
0x0000000000033167: mov al, 0x22; lea rcx, [rip + 0x1e8dc]; movsxd rdx, dword ptr [rcx + rdi*4]; add rdx, rcx; jmp rdx; 
0x0000000000033182: mov al, 0x23; ret; 
0x00000000000331b8: mov al, 0x24; ret; 
0x0000000000033188: mov al, 0x26; ret; 
0x000000000003317f: mov al, 0x28; ret; 
0x00000000000331c7: mov al, 0xa; ret; 
0x00000000000331af: mov al, 0xb; ret; 
0x000000000003318e: mov al, 0xc; ret; 
0x0000000000033185: mov al, 0xd; ret; 
0x0000000000033194: mov al, 0xe; ret; 
0x0000000000022614: mov al, 0xee; add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor ebx, ebx; jmp rax; 
0x0000000000033197: mov al, 0xf; ret; 
0x0000000000025575: mov al, 1; add byte ptr [rax], al; call rbx; 
0x00000000000294ca: mov al, 1; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000049f3f: mov al, 1; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000045e97: mov al, 1; add rsp, 0x68; pop rbx; pop r14; ret; 
0x000000000000e8d0: mov al, 1; and al, 1; movzx eax, al; ret; 
0x000000000004ded7: mov al, 1; and al, 1; pop rbx; pop r14; pop r15; ret; 
0x000000000004df3a: mov al, 1; cmp edi, 0x7f; jae 0x4df43; pop rcx; ret; 
0x000000000004e0a2: mov al, 1; je 0x4e0ac; add rsp, 0x20; pop rbx; ret; 
0x000000000004e2ad: mov al, 1; mov byte ptr [r8], al; mov rax, r8; ret; 
0x0000000000041845: mov al, 1; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000002a120: mov al, 1; ret; 
0x000000000000c83c: mov al, 2; add byte ptr [rax], al; call rax; 
0x00000000000331d9: mov al, 2; ret; 
0x000000000002bc48: mov al, 3; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x00000000000331d0: mov al, 3; ret; 
0x00000000000331dc: mov al, 4; ret; 
0x00000000000331ca: mov al, 5; ret; 
0x00000000000331cd: mov al, 6; ret; 
0x00000000000331d3: mov al, 7; ret; 
0x00000000000331c1: mov al, 8; ret; 
0x00000000000331c4: mov al, 9; ret; 
0x000000000000fc9d: mov al, byte ptr [rsp + 0x17]; add rsp, 0x18; ret; 
0x000000000000fe83: mov al, byte ptr [rsp + 0x1f]; and al, 1; movzx eax, al; add rsp, 0x48; ret; 
0x000000000000ce89: mov al, byte ptr [rsp + 0x21]; mov byte ptr [rsp + 0x37], al; lea rcx, [rip + 0x56a20]; lea rax, [rip - 0x368f]; lea rdx, [rsp + 0x37]; call rax; 
0x00000000000102ca: mov al, byte ptr [rsp + 0x27]; add rsp, 0x28; ret; 
0x000000000001038a: mov al, byte ptr [rsp + 0x27]; and al, 1; movzx eax, al; add rsp, 0x28; ret; 
0x000000000000c3f4: mov al, byte ptr [rsp + 3]; add rsp, 0x88; ret; 
0x000000000000bdb7: mov al, byte ptr [rsp + 7]; and al, 1; movzx eax, al; pop rcx; ret; 
0x0000000000009ce7: mov al, byte ptr [rsp + 7]; pop rcx; ret; 
0x000000000002343c: mov bh, 0x48; add esi, edi; jmp rsi; 
0x000000000001cb55: mov bh, 0x57; or byte ptr [rax + 1], bh; ret; 
0x000000000002532b: mov bh, 0x65; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000000a5a7: mov bh, 0x80; sbb al, byte ptr [rdx]; add byte ptr [rax], al; pop rcx; ret; 
0x00000000000272a3: mov bh, 0x8f; xor al, byte ptr [rip + 0x6b490000]; sal dword ptr [rax + 0x48], 0xc7; ret; 
0x000000000002d995: mov bh, 0x90; add eax, dword ptr [rax]; ud2; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000026981: mov bh, 0x94; and al, 0xa4; add byte ptr [rax], al; add byte ptr [rcx], cl; ret 0xc148; 
0x000000000003d359: mov bh, 0xc9; lea rdx, [rcx + rax]; add rdx, -0x10; mov eax, 1; ret; 
0x000000000003d39e: mov bh, 0xc9; lea rdx, [rcx + rax]; add rdx, 0x10; mov eax, 1; ret; 
0x000000000003d36e: mov bh, 0xd0; add rdx, rcx; mov eax, 1; ret; 
0x000000000003d271: mov bh, 0xd0; mov eax, 1; ret; 
0x000000000003d386: mov bh, 0xd1; add rdx, rax; mov eax, 1; ret; 
0x0000000000014f45: mov bh, 0xd; add byte ptr [rax], al; xor eax, eax; pop rcx; ret; 
0x0000000000018fc5: mov bh, 0xda; add al, 0; pop rbx; ret; 
0x000000000000b874: mov bh, 0xff; dec dword ptr [rdi]; or ecx, dword ptr [rax - 0x73]; add eax, 0xffffdda0; call rax; 
0x0000000000022d54: mov bh, ah; add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000315e9: mov bl, 0x9c; add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x0000000000031629: mov bl, 0xa4; add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x0000000000032623: mov bl, 0xa8; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret; 
0x000000000002bce9: mov bl, 1; mov eax, ebx; add rsp, 0x20; pop rbx; ret; 
0x000000000002bcf3: mov bl, 2; mov eax, ebx; add rsp, 0x20; pop rbx; ret; 
0x0000000000031c7a: mov bl, byte ptr [rax]; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x3b66; 
0x000000000004a94a: mov byte ptr [r14 + 0x10], bl; mov eax, ebx; pop rbx; pop r14; pop r15; ret; 
0x0000000000041d41: mov byte ptr [r14 + 8], bl; xor eax, eax; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000001c999: mov byte ptr [r14 + 8], dl; mov qword ptr [r14], 0x20; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ca22: mov byte ptr [r14 + 8], dl; mov qword ptr [r14], 0x21; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ca45: mov byte ptr [r14 + 8], dl; mov qword ptr [r14], 0x22; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c8d1: mov byte ptr [r14 + 8], dl; mov qword ptr [r14], 0x23; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c88b: mov byte ptr [r14 + 8], dl; mov qword ptr [r14], 0x24; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c9ff: mov byte ptr [r14 + 8], dl; mov qword ptr [r14], 0x25; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c9bc: mov byte ptr [r14 + 8], dl; mov qword ptr [r14], 0x28; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c919: mov byte ptr [r14 + 8], dl; mov qword ptr [r14], 0x29; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c8ae: mov byte ptr [r14 + 8], dl; mov qword ptr [r14], 0x2a; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c822: mov byte ptr [r14 + 8], dl; mov qword ptr [r14], 0x2b; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004e2a8: mov byte ptr [r8 + 1], 2; mov al, 1; mov byte ptr [r8], al; mov rax, r8; ret; 
0x000000000004e2a1: mov byte ptr [r8], al; mov rax, r8; ret; 
0x000000000004e2a9: mov byte ptr [rax + 1], 2; mov al, 1; mov byte ptr [r8], al; mov rax, r8; ret; 
0x000000000002c6c3: mov byte ptr [rax + 1], cl; ret 0xe2ff; 
0x0000000000010c8c: mov byte ptr [rax], 0; pop rax; ret; 
0x000000000000c645: mov byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rip + 0x5a391]; add rsp, 0x318; ret; 
0x0000000000032906: mov byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop r14; ret; 
0x000000000000c3fb: mov byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000004e2a2: mov byte ptr [rax], al; mov rax, r8; ret; 
0x00000000000435eb: mov byte ptr [rbx + 8], 0; xor eax, eax; pop rbx; ret; 
0x000000000004a788: mov byte ptr [rbx + 8], al; pop rbx; ret; 
0x000000000004b930: mov byte ptr [rbx + 9], 0; mov rax, rbx; add rsp, 8; pop rbx; pop r14; ret; 
0x00000000000312ec: mov byte ptr [rbx], 1; add rsp, 0x10; pop rbx; pop r14; pop r15; ret; 
0x000000000000c0b6: mov byte ptr [rcx], al; add byte ptr [rax], al; call qword ptr [rip + 0x5a920]; add rsp, 0x1b8; ret; 
0x000000000004a42d: mov byte ptr [rcx], al; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000003f339: mov byte ptr [rdi + 0x6a], cl; mov rax, rdi; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000049fe8: mov byte ptr [rdi + 0xc], 0; mov eax, 0x7d; ret; 
0x000000000004a039: mov byte ptr [rdi + 0xc], 1; ret; 
0x000000000004a01b: mov byte ptr [rdi + 0xc], 2; mov eax, 0x7b; ret; 
0x000000000004a025: mov byte ptr [rdi + 0xc], 3; mov eax, 0x75; ret; 
0x000000000004a02f: mov byte ptr [rdi + 0xc], 4; mov eax, 0x5c; ret; 
0x0000000000041841: mov byte ptr [rdi + 1], 0; mov al, 1; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000001d16c: mov byte ptr [rdi + 1], 0; mov word ptr [rdi + 6], 0; mov dword ptr [rdi + 2], 0; mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x000000000001d03a: mov byte ptr [rdi + 1], dl; add rsp, 0x10; ret; 
0x000000000001cf51: mov byte ptr [rdi + 7], 0; mov word ptr [rdi + 5], 0; mov qword ptr [rdi + 8], rax; add rsp, 0x18; ret; 
0x0000000000041745: mov byte ptr [rdi + 8], 0; mov qword ptr [rdi], 0; pop rbx; ret; 
0x000000000001ce70: mov byte ptr [rdi + 8], 0x13; mov qword ptr [rdi + 0x10], rax; mov eax, 1; mov qword ptr [rdi], rax; add rsp, 0x30; ret; 
0x0000000000028116: mov byte ptr [rdi + 8], 0x37; mov qword ptr [rdi], 1; pop rbx; pop r14; pop rbp; ret; 
0x000000000001cd07: mov byte ptr [rdi + 8], 0x45; mov qword ptr [rdi], 1; add rsp, 0x30; ret; 
0x000000000001cd5e: mov byte ptr [rdi + 8], cl; mov qword ptr [rdi + 0x10], r9; mov qword ptr [rdi], 1; add rsp, 0x30; ret; 
0x000000000001e383: mov byte ptr [rdi + 8], cl; mov qword ptr [rdi], rax; ret; 
0x000000000004682f: mov byte ptr [rdi + r10], al; pop rax; ret; 
0x0000000000046696: mov byte ptr [rdi + rcx], al; pop rbx; ret; 
0x0000000000046830: mov byte ptr [rdi + rdx], al; pop rax; ret; 
0x000000000001d037: mov byte ptr [rdi], 0x17; mov byte ptr [rdi + 1], dl; add rsp, 0x10; ret; 
0x000000000001d011: mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000001cf88: mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000001d2db: mov byte ptr [rdi], 0x4b; add rsp, 0x20; ret; 
0x000000000000c514: mov byte ptr [rdi], al; add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000001d3c6: mov byte ptr [rdi], al; mov qword ptr [rdi + 1], rcx; add rsp, 0x18; ret; 
0x0000000000041847: mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000001d14f: mov byte ptr [rdi], cl; mov qword ptr [rdi + 1], rax; add rsp, 0x10; ret; 
0x0000000000009ac8: mov byte ptr [rip + 0x5d569], 1; pop rbp; ret; 
0x000000000003549c: mov byte ptr [rip - 0x76b7fffd], dl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x9ae8; 
0x000000000004a94b: mov byte ptr [rsi + 0x10], bl; mov eax, ebx; pop rbx; pop r14; pop r15; ret; 
0x0000000000041d42: mov byte ptr [rsi + 8], bl; xor eax, eax; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000001c99a: mov byte ptr [rsi + 8], dl; mov qword ptr [r14], 0x20; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ca23: mov byte ptr [rsi + 8], dl; mov qword ptr [r14], 0x21; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ca46: mov byte ptr [rsi + 8], dl; mov qword ptr [r14], 0x22; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c8d2: mov byte ptr [rsi + 8], dl; mov qword ptr [r14], 0x23; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c88c: mov byte ptr [rsi + 8], dl; mov qword ptr [r14], 0x24; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ca00: mov byte ptr [rsi + 8], dl; mov qword ptr [r14], 0x25; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c9bd: mov byte ptr [rsi + 8], dl; mov qword ptr [r14], 0x28; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c91a: mov byte ptr [rsi + 8], dl; mov qword ptr [r14], 0x29; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c8af: mov byte ptr [rsi + 8], dl; mov qword ptr [r14], 0x2a; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c823: mov byte ptr [rsi + 8], dl; mov qword ptr [r14], 0x2b; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000000fc98: mov byte ptr [rsp + 0x17], 0xff; mov al, byte ptr [rsp + 0x17]; add rsp, 0x18; ret; 
0x0000000000010386: mov byte ptr [rsp + 0x27], al; mov al, byte ptr [rsp + 0x27]; and al, 1; movzx eax, al; add rsp, 0x28; ret; 
0x000000000000ce8d: mov byte ptr [rsp + 0x37], al; lea rcx, [rip + 0x56a20]; lea rax, [rip - 0x368f]; lea rdx, [rsp + 0x37]; call rax; 
0x0000000000014f96: mov byte ptr [rsp + 5], dh; mov edx, 2; lea rsi, [rsp + 4]; call 0x2b6b0; pop rcx; ret; 
0x0000000000011a43: mov byte ptr [rsp + 5], dh; mov edx, 2; lea rsi, [rsp + 4]; call 0x2b760; pop rcx; ret; 
0x0000000000014f95: mov byte ptr [rsp + 5], sil; mov edx, 2; lea rsi, [rsp + 4]; call 0x2b6b0; pop rcx; ret; 
0x0000000000011a42: mov byte ptr [rsp + 5], sil; mov edx, 2; lea rsi, [rsp + 4]; call 0x2b760; pop rcx; ret; 
0x0000000000011a7f: mov byte ptr [rsp + 6], dh; mov edx, 3; lea rsi, [rsp + 4]; call 0x2b760; pop rcx; ret; 
0x0000000000011a7e: mov byte ptr [rsp + 6], sil; mov edx, 3; lea rsi, [rsp + 4]; call 0x2b760; pop rcx; ret; 
0x0000000000009ce2: mov byte ptr [rsp + 7], 0; mov al, byte ptr [rsp + 7]; pop rcx; ret; 
0x000000000000bef4: mov byte ptr [rsp + 7], 2; mov al, byte ptr [rsp + 7]; pop rcx; ret; 
0x000000000000d23e: mov byte ptr [rsp + 7], al; movzx eax, byte ptr [rsp + 7]; pop rcx; ret; 
0x0000000000011ba2: mov byte ptr [rsp + 7], dh; mov edx, 4; lea rsi, [rsp + 4]; call 0x2b6b0; pop rcx; ret; 
0x0000000000011ac2: mov byte ptr [rsp + 7], dh; mov edx, 4; lea rsi, [rsp + 4]; call 0x2b760; pop rcx; ret; 
0x0000000000011ba1: mov byte ptr [rsp + 7], sil; mov edx, 4; lea rsi, [rsp + 4]; call 0x2b6b0; pop rcx; ret; 
0x0000000000011ac1: mov byte ptr [rsp + 7], sil; mov edx, 4; lea rsi, [rsp + 4]; call 0x2b760; pop rcx; ret; 
0x000000000001dfbf: mov ch, 0; add rsi, rbp; jmp rsi; 
0x00000000000071ba: mov ch, 0x49; cmp ebx, 3; jne 0x7170; pop rbx; ret; 
0x0000000000010c30: mov ch, 0xfd; add eax, dword ptr [rax]; lea rdx, [rip + 0x52df5]; lea rax, [rip - 0x7752]; mov esi, 0x2b; call rax; 
0x000000000000b24d: mov ch, 5; add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x18; ret; 
0x000000000003fe0a: mov ch, byte ptr [rdx + rax]; pop rcx; ret; 
0x000000000002c264: mov cl, 0x2e; mov rax, rdi; cmp byte ptr [rax], cl; sete al; pop rcx; ret; 
0x000000000002c259: mov cl, 0x2f; cmp byte ptr [rdi], 0x2e; je 0x2c269; xor eax, eax; pop rcx; ret; 
0x0000000000028bfb: mov cl, 0xd; jmp rsp; 
0x000000000003db3e: mov cl, byte ptr [rax + 1]; ror byte ptr [rax - 0x73], 1; adc eax, 0x16427; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x0000000000049fb6: mov cs, word ptr [rax + 1]; int1; jmp rcx; 
0x0000000000046ece: mov cx, 1; lea rdx, [rip + 0xdaeb]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000002ccec: mov dh, 0; lea rcx, [rip + 0x24ccf]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002c2e1: mov dh, 0x11; mov eax, 6; lea rsi, [rip + 0x2565d]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000002ca76: mov dh, 0x32; mov edx, 6; movsxd rsi, dword ptr [r12 + rsi*4]; add rsi, r12; jmp rsi; 
0x0000000000012ac6: mov dh, 0x3f; add eax, 0x5c415b00; pop r13; pop r14; pop r15; ret; 
0x0000000000014cb2: mov dh, 0x42; dec byte ptr [rax - 0x7d]; ret 0x48fe; 
0x00000000000475d5: mov dh, 0x43; add dword ptr [rcx - 0x7d], ecx; ret; 
0x000000000000d243: mov dh, 0x44; and al, 7; pop rcx; ret; 
0x000000000004b8f1: mov dh, 0x47; xor byte ptr [rax + rdx], ah; shr al, 4; ret; 
0x000000000004b901: mov dh, 0x47; xor byte ptr [rax], ah; shr al, 5; ret; 
0x000000000004b8e1: mov dh, 0x47; xor byte ptr [rsp + rax], ah; shr al, 2; ret; 
0x0000000000049fd5: mov dh, 0x4f; or al, 0x48; lea esi, [rip + 0xafd9]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000001cb4b: mov dh, 0x57; or byte ptr [rax + 1], bh; ret; 
0x0000000000047ba5: mov dh, 0x73; add cl, byte ptr [rcx - 0x7d]; ret; 
0x0000000000048726: mov dh, 0x73; add dword ptr [rcx - 0x7d], ecx; ret; 
0x000000000004d638: mov dh, 0x7a; add ecx, dword ptr [rax - 0x7d]; ret 0x4804; 
0x00000000000148dd: mov dh, 0x7b; add dword ptr [rcx - 1], ecx; ret; 
0x000000000002c54c: mov dh, 0xa; movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x000000000000d464: mov dh, 0xc0; add rsp, 0x18; ret; 
0x0000000000010391: mov dh, 0xc0; add rsp, 0x28; ret; 
0x000000000000fe8a: mov dh, 0xc0; add rsp, 0x48; ret; 
0x000000000000d20f: mov dh, 0xc0; call qword ptr [rip + 0x59ac9]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000ce69: mov dh, 0xc0; cmp rax, 0; jne 0xce7a; mov eax, dword ptr [rsp + 0x24]; add rsp, 0x48; ret; 
0x0000000000034d74: mov dh, 0xc0; lea eax, [rax + rax*8]; add rsp, 0x28; ret; 
0x000000000002bd33: mov dh, 0xc0; mov qword ptr [rip + 0x3b384], rax; mov eax, ebx; add rsp, 0x20; pop rbx; ret; 
0x000000000000bdbe: mov dh, 0xc0; pop rcx; ret; 
0x000000000000e8d5: mov dh, 0xc0; ret; 
0x000000000001cc35: mov dh, 0xc1; ret; 
0x0000000000046b4f: mov dh, 0xc2; lea rcx, [rip + 0xde08]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002833b: mov dh, 0xc6; lea rcx, [rip + 0x294d4]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002fa3c: mov dh, 0xc9; lea rdx, [rip + 0x21f97]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000003fe76: mov dh, 0xc9; mov qword ptr [rax], rcx; test cl, cl; je 0x3fe82; mov al, 1; ret; 
0x0000000000046808: mov dh, 0xc; js 0xffffffff834c6f1c; ret 0x4c02; 
0x0000000000047d65: mov dh, 0xc; or byte ptr [rbp - 0x6bf0be37], al; ret 0x4c89; 
0x000000000002fb1a: mov dh, 0xd1; lea rcx, [rip + 0x21eed]; movsxd rdi, dword ptr [rcx + rdx*4]; add rdi, rcx; jmp rdi; 
0x0000000000013dc1: mov dh, 0xf8; call rbx; 
0x0000000000030c3c: mov dh, 5; fisub word ptr [rbx + rax]; lea rdx, [rip + 0x364cf]; lea rax, [rip + 0x364d1]; pop rcx; ret; 
0x0000000000049f7f: mov dl, 0; add byte ptr [rdx + 0xe], bh; jmp rax; 
0x000000000001c868: mov dword ptr [r14 + 8], edx; mov qword ptr [r14], 0x26; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004993e: mov dword ptr [r15 + rbx], 0x8348bfef; ret; 
0x000000000000f771: mov dword ptr [rax + 0x10], 0; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x68; ret; 
0x000000000004d96b: mov dword ptr [rax + 0x10], eax; mov qword ptr [rax + 0x18], rcx; pop rbx; pop rbp; ret; 
0x000000000000da0e: mov dword ptr [rax + 0x10], ecx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000001018f: mov dword ptr [rax + 0x10], ecx; test byte ptr [rsp + 0x57], 1; jne 0x101a3; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x0000000000049398: mov dword ptr [rax + 0x10], esi; ret; 
0x000000000004d96f: mov dword ptr [rax + 0x18], ecx; pop rbx; pop rbp; ret; 
0x000000000003d5e5: mov dword ptr [rax + 0x20], 2; pop rbx; pop r14; pop rbp; ret; 
0x000000000003d63a: mov dword ptr [rax + 0x28], ebp; mov dword ptr [rax + 0x2c], ecx; pop rbx; pop r14; pop rbp; ret; 
0x000000000003d63d: mov dword ptr [rax + 0x2c], ecx; pop rbx; pop r14; pop rbp; ret; 
0x000000000000d5ce: mov dword ptr [rax + 0x40], 0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x168; ret; 
0x0000000000010a2d: mov dword ptr [rax + 8], 0; mov rax, qword ptr [rsp + 8]; add rsp, 0x138; ret; 
0x000000000004e29c: mov dword ptr [rax + 8], eax; xor eax, eax; mov byte ptr [r8], al; mov rax, r8; ret; 
0x0000000000049394: mov dword ptr [rax + 8], ecx; mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000000da05: mov dword ptr [rax + 8], ecx; mov rcx, qword ptr [rsp + 0x30]; mov qword ptr [rax + 0x10], rcx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000004d967: mov dword ptr [rax + 8], edi; mov qword ptr [rax + 0x10], r8; mov qword ptr [rax + 0x18], rcx; pop rbx; pop rbp; ret; 
0x000000000002f4a4: mov dword ptr [rax + 8], esi; lea rdx, [rip + 0x35632]; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000000b9e4: mov dword ptr [rax + rbp*8], 0xfffffdb5; pop rax; ret; 
0x000000000004a620: mov dword ptr [rax - 0x75], ecx; jge 0x4a625; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xace0]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000000e43b: mov dword ptr [rax], 0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x48; ret; 
0x000000000000a319: mov dword ptr [rax], 0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000000a70f: mov dword ptr [rax], 0; mov rax, qword ptr [rsp + 0x20]; add rsp, 0xa8; ret; 
0x000000000004d976: mov dword ptr [rax], 0; pop rbx; pop rbp; ret; 
0x000000000004de31: mov dword ptr [rax], 0x394d0000; ret 0x870f; 
0x000000000000a8bb: mov dword ptr [rax], 1; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x40; ret; 
0x000000000000a3ed: mov dword ptr [rax], 1; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x000000000000de4a: mov dword ptr [rax], 2; mov rax, qword ptr [rsp + 0x30]; add rsp, 0x58; ret; 
0x000000000004c9f9: mov dword ptr [rax], ecx; pop rbx; pop r14; pop rbp; ret; 
0x000000000003fe79: mov dword ptr [rax], ecx; test cl, cl; je 0x3fe82; mov al, 1; ret; 
0x0000000000049391: mov dword ptr [rax], edx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000003c6e9: mov dword ptr [rbp + 0x31], 0x8515ffc0; movsd dword ptr [rdi], dword ptr [rsi]; add al, byte ptr [rax]; pop rbx; ret; 
0x000000000003313b: mov dword ptr [rbx + 0x10], esi; pop rbx; pop r14; pop r15; ret; 
0x000000000003f411: mov dword ptr [rbx + 0x18], esi; add rsp, 0x18; pop rbx; pop r14; ret; 
0x0000000000041b7f: mov dword ptr [rbx + 0x20], esi; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004c552: mov dword ptr [rbx + 0x30], ebp; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x00000000000333df: mov dword ptr [rbx + 0x90], eax; add rsp, 0x108; pop rbx; pop r14; ret; 
0x00000000000315e8: mov dword ptr [rbx + 0x9c], esi; pop rbx; pop r14; pop rbp; ret; 
0x00000000000315e7: mov dword ptr [rbx + 0x9c], r14d; pop rbx; pop r14; pop rbp; ret; 
0x0000000000031628: mov dword ptr [rbx + 0xa4], esi; pop rbx; pop r14; pop rbp; ret; 
0x0000000000031627: mov dword ptr [rbx + 0xa4], r14d; pop rbx; pop r14; pop rbp; ret; 
0x0000000000032a70: mov dword ptr [rbx + 0xc], 0xffffffff; mov dword ptr [rbx], 0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000003298d: mov dword ptr [rbx + 0xc], 0xffffffff; mov qword ptr [rbx], 0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000030f14: mov dword ptr [rbx + 8], eax; mov dword ptr [rbx], 0; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000032ab7: mov dword ptr [rbx + 8], eax; mov dword ptr [rbx], 1; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000030f35: mov dword ptr [rbx + 8], eax; mov dword ptr [rbx], 1; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000032feb: mov dword ptr [rbx + 8], eax; mov eax, 1; mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000031005: mov dword ptr [rbx + 8], eax; mov eax, 1; mov qword ptr [rbx], rax; pop rbx; ret; 
0x0000000000032fcd: mov dword ptr [rbx + 8], eax; xor eax, eax; mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000030fea: mov dword ptr [rbx + 8], eax; xor eax, eax; mov qword ptr [rbx], rax; pop rbx; ret; 
0x0000000000033436: mov dword ptr [rbx + 8], esi; add rsp, 0x108; pop rbx; pop r14; ret; 
0x0000000000032995: mov dword ptr [rbx], 0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000030f17: mov dword ptr [rbx], 0; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000003f4be: mov dword ptr [rbx], 1; add rsp, 0x18; pop rbx; pop r14; ret; 
0x0000000000032aba: mov dword ptr [rbx], 1; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000030f38: mov dword ptr [rbx], 1; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000045d43: mov dword ptr [rbx], 2; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x0000000000033219: mov dword ptr [rbx], 3; add rsp, 0x108; pop rbx; pop r14; ret; 
0x0000000000032a9d: mov dword ptr [rbx], eax; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000003d450: mov dword ptr [rbx], eax; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000032fd3: mov dword ptr [rbx], eax; mov rax, rbx; pop rbx; ret; 
0x0000000000019085: mov dword ptr [rbx], eax; pop rbx; pop r14; pop r15; ret; 
0x0000000000030ff0: mov dword ptr [rbx], eax; pop rbx; ret; 
0x000000000000dbd2: mov dword ptr [rcx + 0x10], edx; add rsp, 0x138; ret; 
0x000000000000d1b6: mov dword ptr [rcx + 0x10], edx; add rsp, 0x98; ret; 
0x000000000000d85e: mov dword ptr [rcx + 0x18], edx; add rsp, 0xb0; ret; 
0x000000000000e9f5: mov dword ptr [rcx + 0x20], edx; add rsp, 0x88; ret; 
0x000000000000cd36: mov dword ptr [rcx + 0x20], esi; mov qword ptr [rcx + 0x28], rdx; add rsp, 0x88; ret; 
0x000000000000cd3a: mov dword ptr [rcx + 0x28], edx; add rsp, 0x88; ret; 
0x000000000004ee73: mov dword ptr [rcx + 0xf21ff83], 0xc808c092; ret; 
0x000000000000cd32: mov dword ptr [rcx + 8], edi; mov qword ptr [rcx + 0x20], rsi; mov qword ptr [rcx + 0x28], rdx; add rsp, 0x88; ret; 
0x000000000000dbc6: mov dword ptr [rcx + 8], edx; mov rdx, qword ptr [rsp + 0xd0]; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x138; ret; 
0x000000000001ab48: mov dword ptr [rcx + rax - 0x38], ecx; jmp rax; 
0x000000000000cd2f: mov dword ptr [rcx], eax; mov qword ptr [rcx + 8], rdi; mov qword ptr [rcx + 0x20], rsi; mov qword ptr [rcx + 0x28], rdx; add rsp, 0x88; ret; 
0x000000000000d918: mov dword ptr [rcx], edx; add rsp, 0x38; ret; 
0x000000000001ce75: mov dword ptr [rdi + 0x10], eax; mov eax, 1; mov qword ptr [rdi], rax; add rsp, 0x30; ret; 
0x000000000001166b: mov dword ptr [rdi + 0x10], ebx; mov qword ptr [rdi + 0x18], rsi; add rsp, 0x10; pop rbx; ret; 
0x000000000000d41d: mov dword ptr [rdi + 0x10], ecx; add rsp, 0x18; ret; 
0x000000000000a780: mov dword ptr [rdi + 0x10], ecx; add rsp, 0x28; ret; 
0x000000000000d2bb: mov dword ptr [rdi + 0x10], ecx; add rsp, 0x58; ret; 
0x000000000001aac9: mov dword ptr [rdi + 0x10], ecx; mov qword ptr [rdi], 0x2e; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000001cd62: mov dword ptr [rdi + 0x10], ecx; mov qword ptr [rdi], 1; add rsp, 0x30; ret; 
0x000000000000a22b: mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000001a867: mov dword ptr [rdi + 0x10], edx; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000000e8e8: mov dword ptr [rdi + 0x10], edx; mov qword ptr [rdi], 0; ret; 
0x000000000000e908: mov dword ptr [rdi + 0x10], edx; mov qword ptr [rdi], 1; ret; 
0x000000000001ce8a: mov dword ptr [rdi + 0x10], edx; xor eax, eax; mov qword ptr [rdi], rax; add rsp, 0x30; ret; 
0x000000000003f59a: mov dword ptr [rdi + 0x18], 0; ret; 
0x000000000003f5a6: mov dword ptr [rdi + 0x18], eax; ret; 
0x000000000001166f: mov dword ptr [rdi + 0x18], esi; add rsp, 0x10; pop rbx; ret; 
0x0000000000010892: mov dword ptr [rdi + 0x30], ecx; mov rcx, qword ptr [rsp + 0x38]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x0000000000010669: mov dword ptr [rdi + 0x30], ecx; mov rcx, qword ptr [rsp + 0x58]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x80; ret; 
0x000000000001089b: mov dword ptr [rdi + 0x38], ecx; add rsp, 0x40; ret; 
0x0000000000010672: mov dword ptr [rdi + 0x38], ecx; add rsp, 0x80; ret; 
0x000000000004c197: mov dword ptr [rdi + 0x63480000], ecx; or al, 0x88; add rcx, rax; mov edx, r15d; jmp rcx; 
0x000000000001cf27: mov dword ptr [rdi + 0xc], ecx; add rsp, 0x18; ret; 
0x000000000001d3c0: mov dword ptr [rdi + 0xc], esi; mov dword ptr [rdi + 9], edx; mov byte ptr [rdi], al; mov qword ptr [rdi + 1], rcx; add rsp, 0x18; ret; 
0x000000000001d149: mov dword ptr [rdi + 0xc], esi; mov dword ptr [rdi + 9], edx; mov byte ptr [rdi], cl; mov qword ptr [rdi + 1], rax; add rsp, 0x10; ret; 
0x000000000001d152: mov dword ptr [rdi + 1], eax; add rsp, 0x10; ret; 
0x000000000001d361: mov dword ptr [rdi + 1], eax; mov qword ptr [rdi + 8], rcx; add rsp, 0x20; ret; 
0x000000000001d3c9: mov dword ptr [rdi + 1], ecx; add rsp, 0x18; ret; 
0x000000000001d0f1: mov dword ptr [rdi + 1], ecx; mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x000000000001d176: mov dword ptr [rdi + 2], 0; mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x000000000001d0ee: mov dword ptr [rdi + 4], edx; mov dword ptr [rdi + 1], ecx; mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x0000000000041899: mov dword ptr [rdi + 8], 0; xor eax, eax; mov byte ptr [rdi], al; pop rbx; ret; 
0x0000000000049fcc: mov dword ptr [rdi + 8], 0x110000; ret; 
0x0000000000049fbd: mov dword ptr [rdi + 8], 0x110001; mov eax, 0x5c; ret; 
0x000000000001d0f5: mov dword ptr [rdi + 8], eax; add rsp, 0x10; ret; 
0x000000000001cf5c: mov dword ptr [rdi + 8], eax; add rsp, 0x18; ret; 
0x000000000001a863: mov dword ptr [rdi + 8], eax; mov qword ptr [rdi + 0x10], r10; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000001ce86: mov dword ptr [rdi + 8], eax; mov qword ptr [rdi + 0x10], rdx; xor eax, eax; mov qword ptr [rdi], rax; add rsp, 0x30; ret; 
0x0000000000041793: mov dword ptr [rdi + 8], eax; pop rbx; ret; 
0x000000000004184c: mov dword ptr [rdi + 8], eax; xor eax, eax; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000001d365: mov dword ptr [rdi + 8], ecx; add rsp, 0x20; ret; 
0x000000000001d00e: mov dword ptr [rdi + 8], ecx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000001cfac: mov dword ptr [rdi + 8], ecx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000001d2d8: mov dword ptr [rdi + 8], ecx; mov byte ptr [rdi], 0x4b; add rsp, 0x20; ret; 
0x000000000001e378: mov dword ptr [rdi + 8], ecx; mov qword ptr [rdi], rax; ret; 
0x000000000000d414: mov dword ptr [rdi + 8], ecx; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000000d2b2: mov dword ptr [rdi + 8], ecx; mov rcx, qword ptr [rsp + 0x40]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x58; ret; 
0x000000000001d11a: mov dword ptr [rdi + 8], edx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000001cf85: mov dword ptr [rdi + 8], edx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000000a77c: mov dword ptr [rdi + 8], edx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x28; ret; 
0x000000000000a227: mov dword ptr [rdi + 8], edx; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000000e8e4: mov dword ptr [rdi + 8], esi; mov qword ptr [rdi + 0x10], rdx; mov qword ptr [rdi], 0; ret; 
0x000000000000e904: mov dword ptr [rdi + 8], esi; mov qword ptr [rdi + 0x10], rdx; mov qword ptr [rdi], 1; ret; 
0x000000000001cd5b: mov dword ptr [rdi + 9], eax; mov byte ptr [rdi + 8], cl; mov qword ptr [rdi + 0x10], r9; mov qword ptr [rdi], 1; add rsp, 0x30; ret; 
0x000000000001cf24: mov dword ptr [rdi + 9], eax; mov dword ptr [rdi + 0xc], ecx; add rsp, 0x18; ret; 
0x000000000001d3c3: mov dword ptr [rdi + 9], edx; mov byte ptr [rdi], al; mov qword ptr [rdi + 1], rcx; add rsp, 0x18; ret; 
0x000000000001d14c: mov dword ptr [rdi + 9], edx; mov byte ptr [rdi], cl; mov qword ptr [rdi + 1], rax; add rsp, 0x10; ret; 
0x000000000000739e: mov dword ptr [rdi + rax*8 + 0x10], ecx; movaps xmm0, xmmword ptr [rsp]; movups xmmword ptr [rdi + rax*8], xmm0; add rsp, 0x20; pop rbx; ret; 
0x000000000004993f: mov dword ptr [rdi + rbx], 0x8348bfef; ret; 
0x000000000001cdc1: mov dword ptr [rdi], 0; add rsp, 0x30; ret; 
0x000000000004174a: mov dword ptr [rdi], 0; pop rbx; ret; 
0x000000000000e8ec: mov dword ptr [rdi], 0; ret; 
0x000000000001aacd: mov dword ptr [rdi], 0x2e; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000001cd0c: mov dword ptr [rdi], 1; add rsp, 0x30; ret; 
0x000000000002811b: mov dword ptr [rdi], 1; pop rbx; pop r14; pop rbp; ret; 
0x000000000000e90c: mov dword ptr [rdi], 1; ret; 
0x000000000001ce7e: mov dword ptr [rdi], eax; add rsp, 0x30; ret; 
0x000000000001e37c: mov dword ptr [rdi], eax; ret; 
0x0000000000041790: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 8], r8; pop rbx; ret; 
0x000000000000a779: mov dword ptr [rdi], esi; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x28; ret; 
0x000000000000a224: mov dword ptr [rdi], esi; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000004a018: mov dword ptr [rdi], esi; ret; 
0x00000000000303a4: mov dword ptr [rip + 0x36d5e], eax; mov qword ptr [rip + 0x36d5f], rsi; ret; 
0x00000000000303ab: mov dword ptr [rip + 0x36d5f], esi; ret; 
0x000000000002bd36: mov dword ptr [rip + 0x3b384], eax; mov eax, ebx; add rsp, 0x20; pop rbx; ret; 
0x0000000000012085: mov dword ptr [rsi + 0x10], eax; movups xmm0, xmmword ptr [rdi]; movups xmmword ptr [rsi], xmm0; ret; 
0x0000000000013b49: mov dword ptr [rsi + 0x10], ebx; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000012c51: mov dword ptr [rsi + 0x10], edi; ret; 
0x000000000001c843: mov dword ptr [rsi + 8], eax; mov qword ptr [r14], 0x10; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c977: mov dword ptr [rsi + 8], eax; mov qword ptr [r14], 0x11; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001caa2: mov dword ptr [rsi + 8], eax; mov qword ptr [r14], 0x12; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c9dd: mov dword ptr [rsi + 8], eax; mov qword ptr [r14], 0x14; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ca86: mov dword ptr [rsi + 8], eax; mov qword ptr [r14], 0x15; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c7a4: mov dword ptr [rsi + 8], eax; mov qword ptr [r14], 0x16; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c800: mov dword ptr [rsi + 8], eax; mov qword ptr [r14], 0x17; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ca66: mov dword ptr [rsi + 8], eax; mov qword ptr [r14], 0x1c; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c75b: mov dword ptr [rsi + 8], eax; mov qword ptr [r14], 0xb; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001caf0: mov dword ptr [rsi + 8], eax; mov qword ptr [r14], 7; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000007a98: mov dword ptr [rsi + 8], edi; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001c869: mov dword ptr [rsi + 8], edx; mov qword ptr [r14], 0x26; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c8f7: mov dword ptr [rsi + 8], edx; mov qword ptr [r14], 0x27; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c7e0: mov dword ptr [rsi + 8], edx; mov qword ptr [r14], 0x2c; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001cac3: mov dword ptr [rsi + 8], edx; mov qword ptr [r14], 0x2d; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c847: mov dword ptr [rsi], 0x10; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c97b: mov dword ptr [rsi], 0x11; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001caa6: mov dword ptr [rsi], 0x12; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c9e1: mov dword ptr [rsi], 0x14; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ca8a: mov dword ptr [rsi], 0x15; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c7a8: mov dword ptr [rsi], 0x16; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c804: mov dword ptr [rsi], 0x17; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ca6a: mov dword ptr [rsi], 0x1c; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c99e: mov dword ptr [rsi], 0x20; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ca27: mov dword ptr [rsi], 0x21; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ca4a: mov dword ptr [rsi], 0x22; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c8d6: mov dword ptr [rsi], 0x23; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c890: mov dword ptr [rsi], 0x24; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ca04: mov dword ptr [rsi], 0x25; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c86d: mov dword ptr [rsi], 0x26; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c8fb: mov dword ptr [rsi], 0x27; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c9c1: mov dword ptr [rsi], 0x28; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c91e: mov dword ptr [rsi], 0x29; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c8b3: mov dword ptr [rsi], 0x2a; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c827: mov dword ptr [rsi], 0x2b; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c7e4: mov dword ptr [rsi], 0x2c; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001cac7: mov dword ptr [rsi], 0x2d; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c75f: mov dword ptr [rsi], 0xb; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001caf4: mov dword ptr [rsi], 7; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c964: mov dword ptr [rsi], 8; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004a0cb: mov dword ptr [rsi], eax; mov rax, r14; pop rbx; pop r14; pop r15; ret; 
0x0000000000007a9c: mov dword ptr [rsi], ebx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000000b063: mov dword ptr [rsp + 0x10], eax; add rsp, 0x30; ret; 
0x000000000000e590: mov dword ptr [rsp + 0x10], eax; call qword ptr [rip + 0x586fe]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000002816f: mov dword ptr [rsp + 0x10], eax; lea rdi, [rsp + 0x10]; call 0x86c0; add rsp, 0x18; ret; 
0x0000000000007e60: mov dword ptr [rsp + 0x10], eax; lea rdi, [rsp + 0x10]; call 0x8b30; add rsp, 0x28; ret; 
0x0000000000010cd4: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x20; ret; 
0x000000000000d3c9: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000001000b: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000d306: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000f24d: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000000a520: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000000b133: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x30; ret; 
0x000000000002ba8f: mov dword ptr [rsp + 0x10], ebx; lea rbp, [r14 - 1]; mov rdi, qword ptr [r14 - 1]; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x000000000000b167: mov dword ptr [rsp + 0x10], ecx; mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x0000000000034d5e: mov dword ptr [rsp + 0x10], edi; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000000d47f: mov dword ptr [rsp + 0x10], edx; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000ffe3: mov dword ptr [rsp + 0x10], edx; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000000b2fa: mov dword ptr [rsp + 0x10], esi; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [rsp + 0x10]; call 0xfc70; add rsp, 0x18; ret; 
0x000000000001fc42: mov dword ptr [rsp + 0x168], edi; mov rbp, r9; call rbx; 
0x000000000002557c: mov dword ptr [rsp + 0x18], eax; mov edi, 0x100; mov esi, 8; call rbx; 
0x000000000000b16c: mov dword ptr [rsp + 0x18], eax; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x0000000000010cca: mov dword ptr [rsp + 0x18], eax; mov rax, qword ptr [rsp + 0x18]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x20; ret; 
0x000000000000f248: mov dword ptr [rsp + 0x18], ecx; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000004e049: mov dword ptr [rsp + 0x18], edi; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x7c22]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000000d90e: mov dword ptr [rsp + 0x18], edx; mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rcx], rdx; add rsp, 0x38; ret; 
0x0000000000025572: mov dword ptr [rsp + 0x1b0], edi; call rbx; 
0x000000000000c5ca: mov dword ptr [rsp + 0x208], eax; lea rax, [rip + 0x1dea8]; lea rdi, [rsp + 0x208]; call rax; 
0x000000000001ea67: mov dword ptr [rsp + 0x20], eax; mov r12d, 0x2f; lea rdx, [rip + 0x3299c]; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x000000000000d95c: mov dword ptr [rsp + 0x20], eax; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x28; ret; 
0x000000000000a44c: mov dword ptr [rsp + 0x20], eax; mov rdi, qword ptr [rsp + 0x20]; call 0xb2c0; add rsp, 0x28; ret; 
0x0000000000011338: mov dword ptr [rsp + 0x20], ecx; mov dword ptr [rsp + 0x28], eax; mov rax, qword ptr [rsp + 0x20]; mov edx, dword ptr [rsp + 0x28]; add rsp, 0x48; ret; 
0x000000000004e2cb: mov dword ptr [rsp + 0x20], edi; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x79cf]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x00000000000110a0: mov dword ptr [rsp + 0x28], eax; mov dword ptr [rsp + 0x30], edx; mov rax, qword ptr [rsp + 0x28]; mov edx, dword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x000000000004bc5f: mov dword ptr [rsp + 0x28], eax; mov rax, qword ptr [rax + 0x20]; mov rdi, rbx; mov esi, 0x22; mov qword ptr [rsp + 0x38], rax; call rax; 
0x000000000001133c: mov dword ptr [rsp + 0x28], eax; mov rax, qword ptr [rsp + 0x20]; mov edx, dword ptr [rsp + 0x28]; add rsp, 0x48; ret; 
0x000000000002ec2a: mov dword ptr [rsp + 0x28], eax; mov rdi, r15; call qword ptr [rip + 0x37bc9]; mov rbx, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000000f2df: mov dword ptr [rsp + 0x28], ecx; mov qword ptr [rsp + 0x30], rax; mov rax, qword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x58; ret; 
0x000000000000c4a7: mov dword ptr [rsp + 0x28], edi; call 0xcca0; mov rdi, qword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000f2e4: mov dword ptr [rsp + 0x30], eax; mov rax, qword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x58; ret; 
0x000000000000f0c1: mov dword ptr [rsp + 0x30], eax; mov rdx, qword ptr [rsp + 0x30]; call qword ptr [rip + 0x579b0]; add rsp, 0x38; ret; 
0x000000000000c4db: mov dword ptr [rsp + 0x30], edi; call 0xcca0; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x00000000000110a4: mov dword ptr [rsp + 0x30], edx; mov rax, qword ptr [rsp + 0x28]; mov edx, dword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x000000000000d8c5: mov dword ptr [rsp + 0x30], esi; movups xmm0, xmmword ptr [rsp + 0x28]; movups xmmword ptr [rcx], xmm0; add rsp, 0x58; ret; 
0x000000000004bc70: mov dword ptr [rsp + 0x38], eax; call rax; 
0x000000000002f811: mov dword ptr [rsp + 0x40], eax; mov qword ptr [rsp + 0x48], rdx; mov rdi, qword ptr [rbx + 0x10]; mov rax, qword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x000000000002da5e: mov dword ptr [rsp + 0x40], ecx; mov qword ptr [rsp + 0x48], 1; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x000000000000c543: mov dword ptr [rsp + 0x40], edi; call 0xcca0; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000002da63: mov dword ptr [rsp + 0x48], 1; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x000000000000c577: mov dword ptr [rsp + 0x48], edi; call 0xcca0; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000002f816: mov dword ptr [rsp + 0x48], edx; mov rdi, qword ptr [rbx + 0x10]; mov rax, qword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x0000000000038eb4: mov dword ptr [rsp + 0x550], edi; lea rbx, [rip - 0x27a92]; call rbx; 
0x0000000000038ec5: mov dword ptr [rsp + 0x58], eax; mov edi, 0x100; mov esi, 8; call rbx; 
0x000000000000c22d: mov dword ptr [rsp + 0x60], eax; lea rax, [rip + 0x1e048]; lea rdi, [rsp + 0x50]; lea rsi, [rsp + 0x60]; lea rdx, [rsp + 0x38]; call rax; 
0x000000000000c5ab: mov dword ptr [rsp + 0x68], edi; call 0xcca0; mov rdi, qword ptr [rsp + 0x68]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c482: mov dword ptr [rsp + 0x70], eax; call rax; 
0x000000000000d1ac: mov dword ptr [rsp + 0x78], edx; mov rdx, qword ptr [rsp + 0x78]; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x98; ret; 
0x00000000000100e9: mov dword ptr [rsp + 0xc], eax; test byte ptr [rsp + 0x17], 1; jne 0x100fd; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x0000000000010269: mov dword ptr [rsp + 0xc], eax; test byte ptr [rsp + 0x17], 1; jne 0x1027d; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x000000000000f151: mov dword ptr [rsp + 8], 0; mov rax, qword ptr [rsp + 8]; add rsp, 0x58; ret; 
0x000000000000f351: mov dword ptr [rsp + 8], 0; mov rax, qword ptr [rsp + 8]; add rsp, 0x60; ret; 
0x000000000000bdee: mov dword ptr [rsp + 8], 1; mov rax, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000000afc8: mov dword ptr [rsp + 8], eax; call 0xda20; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000003ce8c: mov dword ptr [rsp + 8], eax; lea rbx, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000000d218: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000d310: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000010823: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp + 8]; add rsp, 0x78; ret; 
0x0000000000009fdf: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000000a813: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000cc84: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000110ed: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000d351: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000000b05e: mov dword ptr [rsp + 8], ecx; mov qword ptr [rsp + 0x10], rax; add rsp, 0x30; ret; 
0x000000000000a51b: mov dword ptr [rsp + 8], ecx; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000000b12e: mov dword ptr [rsp + 8], ecx; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x30; ret; 
0x0000000000030123: mov dword ptr [rsp + 8], ecx; movaps xmm0, xmmword ptr [rsp + 0xb0]; movups xmmword ptr [rsp + 0x10], xmm0; mov qword ptr [rsp], rsi; call qword ptr [rax + 0x20]; 
0x000000000000a7a9: mov dword ptr [rsp + 8], esi; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x0000000000010435: mov dword ptr [rsp], eax; call 0xd0c0; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000deb5: mov dword ptr [rsp], eax; call 0xe450; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000009fe9: mov dword ptr [rsp], eax; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000010c85: mov dword ptr [rsp], eax; mov rax, qword ptr [rsp]; mov byte ptr [rax], 0; pop rax; ret; 
0x000000000000b398: mov dword ptr [rsp], eax; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax]; call rax; 
0x000000000000cc80: mov dword ptr [rsp], ecx; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000110e9: mov dword ptr [rsp], ecx; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000d34d: mov dword ptr [rsp], ecx; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x0000000000011244: mov dword ptr [rsp], edi; mov eax, dword ptr [rsp]; add rsp, 4; ret; 
0x000000000000a7a5: mov dword ptr [rsp], edi; mov qword ptr [rsp + 8], rsi; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000000b2a5: mov dword ptr [rsp], edi; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000002a482: mov dword ptr [rsp], edi; mov rdi, rsp; call qword ptr [rip + 0x3c7a2]; pop rcx; ret; 
0x0000000000030135: mov dword ptr [rsp], esi; call qword ptr [rax + 0x20]; 
0x000000000003f6af: mov eax, 0x110000; add rsp, 0x98; pop rbx; pop r14; ret; 
0x0000000000041974: mov eax, 0x110000; cmovae rax, rdx; shl rax, 0x20; or rax, rcx; ret; 
0x0000000000049fa7: mov eax, 0x110000; lea rsi, [rip + 0xaff5]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000003f5f7: mov eax, 0x110001; add rsp, 0x98; pop rbx; pop r14; ret; 
0x000000000004df6e: mov eax, 0x11f; call 0x4de00; pop rcx; ret; 
0x000000000004c0b9: mov eax, 0x30; lea rcx, [rip + 0x8fbf]; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x000000000000b934: mov eax, 0x48000033; add esp, 0x18; ret; 
0x000000000004ad5c: mov eax, 0x480001c1; add esp, 0x38; ret; 
0x0000000000032980: mov eax, 0x480001f0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000136c4: mov eax, 0x5b000533; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000049fc4: mov eax, 0x5c; ret; 
0x000000000004a029: mov eax, 0x75; ret; 
0x000000000004a01f: mov eax, 0x7b; ret; 
0x00000000000116f1: mov eax, 0x7d05a67e; and al, 0xb; insd dword ptr [rdi], dx; ret; 
0x0000000000049fec: mov eax, 0x7d; ret; 
0x00000000000116d1: mov eax, 0x89066f9f; lodsb al, byte ptr [rsi]; pop rbp; and al, 0; ret; 
0x000000000000b28d: mov eax, 0x8b480005; and al, 0x10; add rsp, 0x18; ret; 
0x000000000000b76a: mov eax, 0xb0fffff; nop; push rax; call 0xb790; pop rax; ret; 
0x000000000004dfa5: mov eax, 0xc4; call 0x4de00; pop rcx; ret; 
0x0000000000032fee: mov eax, 1; mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000031008: mov eax, 1; mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000001ce78: mov eax, 1; mov qword ptr [rdi], rax; add rsp, 0x30; ret; 
0x000000000001cb41: mov eax, 1; ret; 
0x000000000002c73e: mov eax, 6; lea rdx, [rip + 0x2524a]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002c2e3: mov eax, 6; lea rsi, [rip + 0x2565d]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000001187b: mov eax, dword ptr [rax + 0x18]; jmp rax; 
0x000000000004ed68: mov eax, dword ptr [rax + 0x18]; lea rsi, [rip + 0x6f4b]; mov edx, 5; jmp rax; 
0x000000000004eff8: mov eax, dword ptr [rax + 0x18]; lea rsi, [rip + 0x711d]; mov edx, 0xb; jmp rax; 
0x000000000004aaa4: mov eax, dword ptr [rax + 0x18]; lea rsi, [rip + 0xa877]; mov edx, 1; jmp rax; 
0x0000000000049f78: mov eax, dword ptr [rax + 0x18]; lea rsi, [rip + 0xb2d3]; mov edx, 0xe; jmp rax; 
0x000000000004bc64: mov eax, dword ptr [rax + 0x20]; mov rdi, rbx; mov esi, 0x22; mov qword ptr [rsp + 0x38], rax; call rax; 
0x000000000004c086: mov eax, dword ptr [rax + 0x20]; mov rdi, rbx; mov esi, 0x27; mov r13, rax; call rax; 
0x000000000002f09e: mov eax, dword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000000cf88: mov eax, dword ptr [rax + 8]; add rsp, 0x28; ret; 
0x000000000004e0d7: mov eax, dword ptr [rax + 8]; lea rsi, [rip + 0x723b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e0bb: mov eax, dword ptr [rax + 8]; lea rsi, [rip + 0x7258]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004b9e3: mov eax, dword ptr [rax + 8]; lea rsi, [rip + 0x992f]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a776: mov eax, dword ptr [rax + 8]; lea rsi, [rip + 0xab9c]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000011877: mov eax, dword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x000000000004aaa0: mov eax, dword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xa877]; mov edx, 1; jmp rax; 
0x000000000000b39f: mov eax, dword ptr [rax + 8]; mov rax, qword ptr [rax]; call rax; 
0x000000000000b3a3: mov eax, dword ptr [rax]; call rax; 
0x000000000002ab6c: mov eax, dword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000004a602: mov eax, dword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x00000000000345ae: mov eax, dword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x000000000004bbbe: mov eax, dword ptr [rbp + 8]; lea rsi, [rip + 0x960a]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bba3: mov eax, dword ptr [rbp + 8]; lea rsi, [rip + 0x9775]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a9d8: mov eax, dword ptr [rbp + 8]; lea rsi, [rip + 0xa941]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a9aa: mov eax, dword ptr [rbp + 8]; lea rsi, [rip + 0xa963]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a65c: mov eax, dword ptr [rbp + 8]; lea rsi, [rip + 0xacac]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000004a626: mov eax, dword ptr [rbp + 8]; lea rsi, [rip + 0xace0]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a611: mov eax, dword ptr [rbp + 8]; mov rsi, r14; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000002f81f: mov eax, dword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x000000000003cf3c: mov eax, dword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000001217f: mov eax, dword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000004b963: mov eax, dword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000002e641: mov eax, dword ptr [rbx + rbp + 8]; test rax, rax; je 0x2e659; mov rdi, qword ptr [rbx + r13]; call rax; 
0x000000000004edc9: mov eax, dword ptr [rcx + rax*8]; mov rdi, qword ptr [rsi]; mov rcx, qword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rsi, rax; jmp rcx; 
0x0000000000012081: mov eax, dword ptr [rdi + 0x10]; mov qword ptr [rsi + 0x10], rax; movups xmm0, xmmword ptr [rdi]; movups xmmword ptr [rsi], xmm0; ret; 
0x000000000004d7b1: mov eax, dword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi + 0x18]; ret; 
0x0000000000049021: mov eax, dword ptr [rdi + 0x10]; ret; 
0x000000000003f591: mov eax, dword ptr [rdi + 0x18]; cmp rax, rcx; jae 0x3f5a2; mov qword ptr [rdi + 0x18], 0; ret; 
0x000000000004a1b1: mov eax, dword ptr [rdi + 0x18]; ret; 
0x0000000000045d61: mov eax, dword ptr [rdi + 0x20]; mov rdx, qword ptr [rdi + 0x28]; ret; 
0x0000000000013c57: mov eax, dword ptr [rdi + 7]; call qword ptr [rax]; 
0x000000000004a936: mov eax, dword ptr [rdi + 8]; lea rsi, [rip + 0xa892]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a916: mov eax, dword ptr [rdi + 8]; lea rsi, [rip + 0xaa02]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a229: mov eax, dword ptr [rdi + 8]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000000a591: mov eax, dword ptr [rdi + 8]; ret; 
0x000000000000fcc1: mov eax, dword ptr [rdi]; cmp rax, qword ptr [rsi]; setb al; and al, 1; movzx eax, al; ret; 
0x0000000000049fca: mov eax, dword ptr [rdi]; mov dword ptr [rdi + 8], 0x110000; ret; 
0x0000000000010c82: mov eax, dword ptr [rdi]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; mov byte ptr [rax], 0; pop rax; ret; 
0x000000000004b891: mov eax, dword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rdi, rax; jmp rcx; 
0x000000000004bc31: mov eax, dword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov rdi, rax; jmp rcx; 
0x000000000003d096: mov eax, dword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rdi, rax; call qword ptr [rcx + 0x18]; 
0x0000000000011871: mov eax, dword ptr [rdi]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x000000000000a541: mov eax, dword ptr [rdi]; mov rdx, qword ptr [rdi + 8]; ret; 
0x0000000000034982: mov eax, dword ptr [rip + 0x32748]; test rax, rax; lea rcx, [rip - 0x62d2]; cmovne rcx, rax; call rcx; 
0x000000000002a451: mov eax, dword ptr [rip + 0x3cc61]; cmp eax, 4; jne 0x2a465; lea rax, [rip + 0x3cc1d]; pop rcx; ret; 
0x0000000000028154: mov eax, dword ptr [rip + 0x3eee2]; cmp eax, 4; jne 0x28164; add rsp, 0x18; ret; 
0x0000000000009a44: mov eax, dword ptr [rip + 0x5ce56]; test rax, rax; je 0x9a58; jmp rax; 
0x0000000000009a85: mov eax, dword ptr [rip + 0x5d485]; test rax, rax; je 0x9a98; jmp rax; 
0x0000000000007e84: mov eax, dword ptr [rip + 0x5f22e]; cmp eax, 4; jne 0x7e94; add rsp, 0x28; ret; 
0x0000000000007e34: mov eax, dword ptr [rip + 0x5f27e]; cmp eax, 4; jne 0x7e44; add rsp, 0x28; ret; 
0x0000000000007de4: mov eax, dword ptr [rip + 0x5f28e]; cmp eax, 4; jne 0x7df4; add rsp, 0x28; ret; 
0x0000000000007005: mov eax, dword ptr [rip + 0x5fb95]; test rax, rax; je 0x7012; call rax; 
0x000000000002fb3f: mov eax, dword ptr [rsi + 0x18]; call qword ptr [rax + 0x28]; 
0x000000000002f7ea: mov eax, dword ptr [rsi + 0x20]; jne 0x2f80b; mov rdi, r15; call rax; 
0x000000000002ba9c: mov eax, dword ptr [rsi + 7]; call qword ptr [rax]; 
0x000000000004e35f: mov eax, dword ptr [rsi + 8]; lea rsi, [rip + 0x6e69]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e345: mov eax, dword ptr [rsi + 8]; lea rsi, [rip + 0x6fd3]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e2d3: mov eax, dword ptr [rsi + 8]; lea rsi, [rip + 0x79cf]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000004e051: mov eax, dword ptr [rsi + 8]; lea rsi, [rip + 0x7c22]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000004bae4: mov eax, dword ptr [rsi + 8]; lea rsi, [rip + 0x96e4]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bbfe: mov eax, dword ptr [rsi + 8]; lea rsi, [rip + 0x971c]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004baca: mov eax, dword ptr [rsi + 8]; lea rsi, [rip + 0x984e]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000034d66: mov eax, dword ptr [rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000004ed64: mov eax, dword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x6f4b]; mov edx, 5; jmp rax; 
0x000000000004eff4: mov eax, dword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x711d]; mov edx, 0xb; jmp rax; 
0x0000000000049f74: mov eax, dword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xb2d3]; mov edx, 0xe; jmp rax; 
0x000000000004c082: mov eax, dword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x20]; mov rdi, rbx; mov esi, 0x27; mov r13, rax; call rax; 
0x000000000004b91e: mov eax, dword ptr [rsi + 8]; mov rsi, rdx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x000000000001e361: mov eax, dword ptr [rsi]; lea rcx, [rip + 0x32ff2]; movsxd rdx, dword ptr [rcx + rax*4]; add rdx, rcx; jmp rdx; 
0x000000000000b205: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x000000000000a494: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x0000000000010cd9: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x20; ret; 
0x000000000000d3ce: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000000fc5d: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x000000000000a919: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x000000000000fdd1: mov eax, dword ptr [rsp + 0x10]; add rsp, 0xb8; ret; 
0x000000000000ff81: mov eax, dword ptr [rsp + 0x10]; add rsp, 0xe8; ret; 
0x000000000000d5c9: mov eax, dword ptr [rsp + 0x10]; mov qword ptr [rax + 0x40], 0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x168; ret; 
0x0000000000010010: mov eax, dword ptr [rsp + 0x10]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000d30b: mov eax, dword ptr [rsp + 0x10]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000a80e: mov eax, dword ptr [rsp + 0x10]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000b171: mov eax, dword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x000000000000f252: mov eax, dword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000004af00: mov eax, dword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000004adee: mov eax, dword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x00000000000285b2: mov eax, dword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x000000000000d5d6: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x168; ret; 
0x000000000000d045: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000000a8c2: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x40; ret; 
0x000000000000e442: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x48; ret; 
0x000000000000a320: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000000a3f4: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x000000000004aa5e: mov eax, dword ptr [rsp + 0x18]; lea rsi, [rip + 0xa8ac]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a8c3: mov eax, dword ptr [rsp + 0x18]; lea rsi, [rip + 0xaa47]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000010dc8: mov eax, dword ptr [rsp + 0x18]; mov edx, dword ptr [rsp + 0x1c]; add rsp, 0x38; ret; 
0x0000000000010ccf: mov eax, dword ptr [rsp + 0x18]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x20; ret; 
0x00000000000113ad: mov eax, dword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x38; ret; 
0x000000000000d961: mov eax, dword ptr [rsp + 0x20]; add rsp, 0x28; ret; 
0x000000000000d735: mov eax, dword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x000000000000a716: mov eax, dword ptr [rsp + 0x20]; add rsp, 0xa8; ret; 
0x0000000000009b24: mov eax, dword ptr [rsp + 0x20]; lea rcx, [rip + 0x464d1]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001021b: mov eax, dword ptr [rsp + 0x20]; mov edx, dword ptr [rsp + 0x28]; add rsp, 0x38; ret; 
0x0000000000011341: mov eax, dword ptr [rsp + 0x20]; mov edx, dword ptr [rsp + 0x28]; add rsp, 0x48; ret; 
0x000000000000b059: mov eax, dword ptr [rsp + 0x20]; mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; add rsp, 0x30; ret; 
0x000000000000ecd2: mov eax, dword ptr [rsp + 0x20]; mov rdx, qword ptr [rsp + 0x28]; add rsp, 0x98; ret; 
0x000000000000ce71: mov eax, dword ptr [rsp + 0x24]; add rsp, 0x48; ret; 
0x000000000000aea3: mov eax, dword ptr [rsp + 0x28]; add rsp, 0x238; ret; 
0x000000000000f779: mov eax, dword ptr [rsp + 0x28]; add rsp, 0x68; ret; 
0x000000000000c2ba: mov eax, dword ptr [rsp + 0x28]; add rsp, 0x78; ret; 
0x000000000004be49: mov eax, dword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x00000000000110a9: mov eax, dword ptr [rsp + 0x28]; mov edx, dword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x000000000000f0bc: mov eax, dword ptr [rsp + 0x28]; mov qword ptr [rsp + 0x30], rax; mov rdx, qword ptr [rsp + 0x30]; call qword ptr [rip + 0x579b0]; add rsp, 0x38; ret; 
0x00000000000111f3: mov eax, dword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x000000000000f2e9: mov eax, dword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x58; ret; 
0x00000000000105a0: mov eax, dword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x68; ret; 
0x000000000000de51: mov eax, dword ptr [rsp + 0x30]; add rsp, 0x58; ret; 
0x000000000004a71d: mov eax, dword ptr [rsp + 0x30]; lea rsi, [rip + 0xabed]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000009ca7: mov eax, dword ptr [rsp + 0x38]; add rsp, 0x98; ret; 
0x000000000000e787: mov eax, dword ptr [rsp + 0x48]; add rsp, 0xd8; ret; 
0x000000000000a1af: mov eax, dword ptr [rsp + 0x50]; add rsp, 0xe8; ret; 
0x000000000000e001: mov eax, dword ptr [rsp + 0x60]; mov rsi, qword ptr [rax + 0x28]; call 0xe900; mov rax, qword ptr [rsp + 0x70]; add rsp, 0x108; ret; 
0x00000000000333da: mov eax, dword ptr [rsp + 0x68]; mov qword ptr [rbx + 0x90], rax; add rsp, 0x108; pop rbx; pop r14; ret; 
0x000000000000e00f: mov eax, dword ptr [rsp + 0x70]; add rsp, 0x108; ret; 
0x000000000000c4b6: mov eax, dword ptr [rsp + 0x70]; call rax; 
0x000000000000f4a1: mov eax, dword ptr [rsp + 0x78]; mov rdx, qword ptr [rsp + 0x80]; add rsp, 0xf8; ret; 
0x00000000000100f4: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x000000000000b355: mov eax, dword ptr [rsp + 4]; add rsp, 0x28; ret; 
0x000000000002db76: mov eax, dword ptr [rsp + 7]; call qword ptr [rax]; 
0x000000000000bdf7: mov eax, dword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x0000000000010a35: mov eax, dword ptr [rsp + 8]; add rsp, 0x138; ret; 
0x000000000000afd2: mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000d315: mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000ce32: mov eax, dword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x000000000000f15a: mov eax, dword ptr [rsp + 8]; add rsp, 0x58; ret; 
0x000000000000f35a: mov eax, dword ptr [rsp + 8]; add rsp, 0x60; ret; 
0x0000000000010828: mov eax, dword ptr [rsp + 8]; add rsp, 0x78; ret; 
0x000000000000aae0: mov eax, dword ptr [rsp + 8]; add rsp, 0xd8; ret; 
0x000000000004a435: mov eax, dword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000039f33: mov eax, dword ptr [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000004a827: mov eax, dword ptr [rsp + 8]; lea rsi, [rip + 0xaaed]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000009fe4: mov eax, dword ptr [rsp + 8]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000000a486: mov eax, dword ptr [rsp + 8]; mov rcx, qword ptr [rax + 0x10]; call 0xa240; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000d484: mov eax, dword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000a525: mov eax, dword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000000b138: mov eax, dword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x30; ret; 
0x000000000000facd: mov eax, dword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x000000000002cce7: mov eax, dword ptr [rsp + 8]; movzx eax, byte ptr [rax]; lea rcx, [rip + 0x24ccf]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001081b: mov eax, dword ptr [rsp]; add rax, 8; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x78; ret; 
0x0000000000009fed: mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000000a993: mov eax, dword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000011247: mov eax, dword ptr [rsp]; add rsp, 4; ret; 
0x0000000000010c89: mov eax, dword ptr [rsp]; mov byte ptr [rax], 0; pop rax; ret; 
0x000000000001cf1d: mov eax, dword ptr [rsp]; mov ecx, dword ptr [rsp + 3]; mov dword ptr [rdi + 9], eax; mov dword ptr [rdi + 0xc], ecx; add rsp, 0x18; ret; 
0x0000000000010a29: mov eax, dword ptr [rsp]; mov qword ptr [rax + 8], 0; mov rax, qword ptr [rsp + 8]; add rsp, 0x138; ret; 
0x000000000000cf84: mov eax, dword ptr [rsp]; mov rax, qword ptr [rax + 8]; add rsp, 0x28; ret; 
0x000000000001d358: mov eax, dword ptr [rsp]; mov rcx, qword ptr [rsp + 7]; mov qword ptr [rdi + 1], rax; mov qword ptr [rdi + 8], rcx; add rsp, 0x20; ret; 
0x000000000000ba21: mov eax, dword ptr [rsp]; mov rdi, qword ptr [rax]; call 0xeda0; add rsp, 0x18; ret; 
0x000000000000b929: mov eax, dword ptr [rsp]; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xecf0; add rsp, 0x18; ret; 
0x000000000000b949: mov eax, dword ptr [rsp]; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xee50; add rsp, 0x18; ret; 
0x000000000000b45c: mov eax, dword ptr [rsp]; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xef00; add rsp, 0x18; ret; 
0x000000000000b3cc: mov eax, dword ptr [rsp]; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xefc0; add rsp, 0x18; ret; 
0x000000000000a7ae: mov eax, dword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000000a818: mov eax, dword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000cc89: mov eax, dword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000110f2: mov eax, dword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000d356: mov eax, dword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000000a1e0: mov eax, dword ptr [rsp]; pop rcx; ret; 
0x000000000000c63a: mov eax, eax; call 0xcca0; lea rdi, [rsp + 0x88]; call qword ptr [rip + 0x5a391]; add rsp, 0x318; ret; 
0x000000000000871f: mov eax, eax; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000004e2a5: mov eax, eax; ret; 
0x0000000000011e28: mov eax, ebp; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000002f08f: mov eax, ebp; lea r14, [r13 - 1]; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x0000000000029e90: mov eax, ebx; add rsp, 0x100; pop rbx; pop r14; pop r15; ret; 
0x0000000000029969: mov eax, ebx; add rsp, 0x110; pop rbx; pop r14; pop r15; ret; 
0x00000000000294c5: mov eax, ebx; add rsp, 0x1b0; pop rbx; ret; 
0x000000000002bceb: mov eax, ebx; add rsp, 0x20; pop rbx; ret; 
0x000000000004e373: mov eax, ebx; add rsp, 0x28; pop rbx; pop r14; ret; 
0x0000000000045d3a: mov eax, ebx; add rsp, 0x40; pop rbx; ret; 
0x000000000002f45e: mov eax, ebx; add rsp, 0x50; pop rbx; ret; 
0x0000000000032e7d: mov eax, ebx; add rsp, 0x70; pop rbx; ret; 
0x000000000003d1eb: mov eax, ebx; add rsp, 8; pop rbx; pop r14; ret; 
0x00000000000296cf: mov eax, ebx; and eax, 3; lea rcx, [rip + 0x2815d]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002f6a2: mov eax, ebx; lea r14, [rbx - 1]; add rbx, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x00000000000082ff: mov eax, ebx; mov rdx, r14; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000003d069: mov eax, ebx; mov rdx, r14; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004f15c: mov eax, ebx; mov rdx, rsi; ret; 
0x000000000002a211: mov eax, ebx; pop rbx; pop r14; pop r15; ret; 
0x0000000000032fd6: mov eax, ebx; pop rbx; ret; 
0x000000000001d439: mov eax, ecx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004ef9d: mov eax, ecx; and al, 1; pop rcx; ret; 
0x0000000000030aa7: mov eax, edi; add rsp, 0x2e0; pop rbx; pop r14; pop r15; ret; 
0x000000000003f33d: mov eax, edi; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000348ac: mov eax, edi; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x00000000000299f2: mov eax, edi; and eax, 3; lea rcx, [rip + 0x27e4a]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002947d: mov eax, edi; and eax, 3; lea rcx, [rip + 0x2839f]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002944f: mov eax, edi; and eax, 3; lea rcx, [rip + 0x283cd]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002c267: mov eax, edi; cmp byte ptr [rax], cl; sete al; pop rcx; ret; 
0x000000000004f0c8: mov eax, edi; div r8; mov r10, rax; mov rax, r10; mov rdx, r11; ret; 
0x000000000002f4d1: mov eax, edi; lea rdx, [rip + 0x35606]; ret; 
0x000000000004bd60: mov eax, edi; lea rdx, [rip + 0x9267]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004ad21: mov eax, edi; lea rdx, [rip - 0x10aa]; ret; 
0x000000000000e8e1: mov eax, edi; mov qword ptr [rdi + 8], rsi; mov qword ptr [rdi + 0x10], rdx; mov qword ptr [rdi], 0; ret; 
0x000000000000e901: mov eax, edi; mov qword ptr [rdi + 8], rsi; mov qword ptr [rdi + 0x10], rdx; mov qword ptr [rdi], 1; ret; 
0x000000000000a221: mov eax, edi; mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000000e58d: mov eax, edi; mov qword ptr [rsp + 0x10], rax; call qword ptr [rip + 0x586fe]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000afc5: mov eax, edi; mov qword ptr [rsp + 8], rax; call 0xda20; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000010432: mov eax, edi; mov qword ptr [rsp], rax; call 0xd0c0; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000deb2: mov eax, edi; mov qword ptr [rsp], rax; call 0xe450; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000b395: mov eax, edi; mov qword ptr [rsp], rax; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax]; call rax; 
0x000000000000be92: mov eax, edi; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xb150; pop rcx; ret; 
0x0000000000018e92: mov eax, edi; mov rdx, r14; pop rbx; pop r14; pop r15; ret; 
0x000000000003f540: mov eax, edi; pop rcx; ret; 
0x000000000000be62: mov eax, edi; ret; 
0x000000000004efa4: mov eax, edx; and al, 1; pop rcx; ret; 
0x000000000004f083: mov eax, edx; mov rdx, r11; ret; 
0x0000000000049b70: mov eax, edx; neg rax; and rax, rcx; ret; 
0x000000000001cb6c: mov eax, edx; not rax; shr rax, 0x3f; ret; 
0x000000000001eae0: mov eax, esi; add dword ptr [rax], eax; add byte ptr [rcx + 0x39], cl; ret; 
0x000000000002a547: mov eax, esi; add rsp, 0x10; pop rbx; pop r14; pop r15; ret; 
0x000000000002e98b: mov eax, esi; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001358b: mov eax, esi; and eax, 0xbfffffff; cmp eax, 0x80000000; je 0x1359a; ret; 
0x0000000000028af1: mov eax, esi; lea rax, [r14 - 0x20]; pop rbx; pop r14; pop r15; ret; 
0x000000000003297b: mov eax, esi; lea rcx, [rip + 0x1f0b8]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000328fe: mov eax, esi; mov rdx, rbx; add rsp, 0x88; pop rbx; pop r14; ret; 
0x000000000003fc5a: mov eax, esi; mov rdx, rcx; pop rcx; ret; 
0x000000000004a0ce: mov eax, esi; pop rbx; pop r14; pop r15; ret; 
0x000000000004c2f7: mov ebp, 0x110001; jmp rcx; 
0x000000000004be9d: mov ebp, 0x110001; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; mov esi, 0x5c; jmp rax; 
0x000000000000ffae: mov ebp, 0x124ffff; movzx eax, al; pop rcx; ret; 
0x0000000000010053: mov ebp, 0x34ebffff; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000000b6ff: mov ebp, 0x48000000; add esp, 0x18; ret; 
0x000000000002f727: mov ebp, 0x8548ffff; sal byte ptr [rsp + rcx*2 + 0x48], 0x89; ret; 
0x000000000004a226: mov ebp, dword ptr [rdi]; mov rax, qword ptr [r15 + 8]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000034ca9: mov ebp, dword ptr [rsp + 0x40]; mov rdi, rbp; xor esi, esi; mov rdx, qword ptr [rsp + 0x38]; call rbx; 
0x000000000004b95b: mov ebp, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000004c092: mov ebp, eax; call rax; 
0x000000000001fc4a: mov ebp, ecx; call rbx; 
0x000000000004c344: mov ebp, edx; jmp rax; 
0x000000000004bb28: mov ebp, edx; mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000002ba2e: mov ebp, esi; and ebp, 3; lea rcx, [rip + 0x25ec2]; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x000000000004becb: mov ebp, esi; jmp rax; 
0x000000000002ba2d: mov ebp, r14d; and ebp, 3; lea rcx, [rip + 0x25ec2]; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x0000000000015159: mov ebx, 0x4800051d; add esp, 0x48; ret; 
0x000000000000b534: mov ebx, 0xb0fffff; lea rax, [rip - 0x1f20]; call rax; 
0x00000000000474b6: mov ebx, 0xb70f0b01; ret; 
0x000000000003cf99: mov ebx, dword ptr [rdi]; mov rdi, qword ptr [rbx + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x0000000000030a42: mov ebx, dword ptr [rip + 0x36170]; mov edx, 0x90; call rbx; 
0x0000000000032e78: mov ebx, dword ptr [rsp + 0x10]; mov rax, rbx; add rsp, 0x70; pop rbx; ret; 
0x00000000000287ed: mov ebx, eax; dec qword ptr [rax - 8]; mov rdi, r14; call qword ptr [rbp]; 
0x000000000002ec38: mov ebx, eax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000004aa82: mov ebx, edi; call 0x4a960; mov rax, rbx; pop rbx; ret; 
0x000000000004a0f2: mov ebx, edi; dec rdx; call qword ptr [rip + 0x1ce73]; mov rax, rbx; pop rbx; ret; 
0x0000000000032979: mov ebx, edi; mov eax, esi; lea rcx, [rip + 0x1f0b8]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004b958: mov ebx, edi; mov r13, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000003cf35: mov ebx, edi; mov rdi, qword ptr [rdi + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000004ba65: mov ebx, edi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000004bbf8: mov ebx, edi; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x971c]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004b918: mov ebx, edi; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rsi, rdx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x000000000004f198: mov ebx, edx; mov rax, r11; mov rdx, rsi; ret; 
0x000000000001d81f: mov ecx, 0x4800033a; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000e19b: mov ecx, 0x48000557; lea eax, [rip - 0x4c06]; call rax; 
0x000000000000c69a: mov ecx, 0x4a; call rax; 
0x0000000000046ecf: mov ecx, 0x8d480001; adc eax, 0xdaeb; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000f0e1: mov ecx, 1; call 0xeb40; pop rcx; ret; 
0x000000000004195a: mov ecx, 1; xor eax, eax; shl rax, 0x20; or rax, rcx; ret; 
0x000000000000a48b: mov ecx, dword ptr [rax + 0x10]; call 0xa240; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000004b898: mov ecx, dword ptr [rcx + 0x18]; mov rdi, rax; jmp rcx; 
0x000000000004edd4: mov ecx, dword ptr [rcx + 0x18]; mov rsi, rax; jmp rcx; 
0x000000000004c3d8: mov ecx, dword ptr [rcx + 0x20]; mov esi, eax; pop rax; jmp rcx; 
0x000000000004bc38: mov ecx, dword ptr [rcx + 0x20]; mov rdi, rax; jmp rcx; 
0x000000000003c6e4: mov ecx, dword ptr [rdi + 0x18]; mov rdi, rax; xor r8d, r8d; call qword ptr [rip + 0x2a585]; pop rbx; ret; 
0x000000000004b894: mov ecx, dword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rdi, rax; jmp rcx; 
0x000000000004bc34: mov ecx, dword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov rdi, rax; jmp rcx; 
0x000000000003d099: mov ecx, dword ptr [rdi + 8]; mov rdi, rax; call qword ptr [rcx + 0x18]; 
0x000000000001e3a2: mov ecx, dword ptr [rsi + 8]; mov dword ptr [rdi + 8], ecx; mov qword ptr [rdi], rax; ret; 
0x000000000001e374: mov ecx, dword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; mov qword ptr [rdi], rax; ret; 
0x000000000004edd0: mov ecx, dword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rsi, rax; jmp rcx; 
0x000000000004c3d4: mov ecx, dword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov esi, eax; pop rax; jmp rcx; 
0x000000000000d418: mov ecx, dword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000004af52: mov ecx, dword ptr [rsp + 0x10]; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000004a429: mov ecx, dword ptr [rsp + 0x18]; mov byte ptr [rcx], al; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000000b054: mov ecx, dword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x20]; mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; add rsp, 0x30; ret; 
0x000000000000fb1d: mov ecx, dword ptr [rsp + 0x20]; call 0xf080; add rsp, 0x28; ret; 
0x000000000000da09: mov ecx, dword ptr [rsp + 0x30]; mov qword ptr [rax + 0x10], rcx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000001088d: mov ecx, dword ptr [rsp + 0x30]; mov qword ptr [rdi + 0x30], rcx; mov rcx, qword ptr [rsp + 0x38]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x0000000000010896: mov ecx, dword ptr [rsp + 0x38]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x000000000000d2ad: mov ecx, dword ptr [rsp + 0x38]; mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsp + 0x40]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x58; ret; 
0x000000000000d2b6: mov ecx, dword ptr [rsp + 0x40]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x58; ret; 
0x0000000000010664: mov ecx, dword ptr [rsp + 0x50]; mov qword ptr [rdi + 0x30], rcx; mov rcx, qword ptr [rsp + 0x58]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x80; ret; 
0x000000000001066d: mov ecx, dword ptr [rsp + 0x58]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x80; ret; 
0x000000000001cf20: mov ecx, dword ptr [rsp + 3]; mov dword ptr [rdi + 9], eax; mov dword ptr [rdi + 0xc], ecx; add rsp, 0x18; ret; 
0x000000000001d35c: mov ecx, dword ptr [rsp + 7]; mov qword ptr [rdi + 1], rax; mov qword ptr [rdi + 8], rcx; add rsp, 0x20; ret; 
0x000000000000d40f: mov ecx, dword ptr [rsp + 8]; mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000000a55a: mov ecx, eax; call 0xa230; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000a57a: mov ecx, eax; call 0xa250; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000008b8f: mov ecx, eax; movsxd rcx, dword ptr [r12 + rcx*4]; add rcx, r12; jmp rcx; 
0x000000000001d86a: mov ecx, ebx; add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret; 
0x000000000003d3c0: mov ecx, ecx; lea rdx, [rcx + rax]; add rdx, 0x20; mov eax, 1; ret; 
0x000000000004d240: mov ecx, esi; cmp rsi, rdi; jne 0x4d230; ret; 
0x000000000001fc51: mov edi, 0x100; mov esi, 8; call rbx; 
0x000000000000ffad: mov edi, 0x24ffffbd; add dword ptr [rdi], ecx; mov dh, 0xc0; pop rcx; ret; 
0x000000000004c0c1: mov edi, 0x4a00008f; movsxd rsi, dword ptr [rcx + rdi*4]; add rsi, rcx; jmp rsi; 
0x000000000004556d: mov edi, 0x7306f983; sbb eax, 0xffff78e9; dec dword ptr [rax - 0x7d]; ret 0xc103; 
0x000000000004194a: mov edi, 0x731af980; sbb dword ptr [rcx], esi; leave; shl rax, 0x20; or rax, rcx; ret; 
0x000000000002ad60: mov edi, 0x85480003; sal byte ptr [rbp + 0x10], 0x48; add esp, 0xb0; pop rbx; ret; 
0x000000000004dc60: mov edi, 0x8948107f; ret 0x8948; 
0x000000000000c17e: mov edi, 1; call rax; 
0x000000000002c6b4: mov edi, 6; lea rax, [rip + 0x252bc]; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x000000000002f09a: mov edi, dword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000000ba25: mov edi, dword ptr [rax]; call 0xeda0; add rsp, 0x18; ret; 
0x000000000004e0d4: mov edi, dword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x723b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e0b8: mov edi, dword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x7258]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004b9e0: mov edi, dword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x992f]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a773: mov edi, dword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0xab9c]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000011874: mov edi, dword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x000000000004aa9d: mov edi, dword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xa877]; mov edx, 1; jmp rax; 
0x000000000000b39c: mov edi, dword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax]; call rax; 
0x000000000000be95: mov edi, dword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xb150; pop rcx; ret; 
0x000000000000b92d: mov edi, dword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xecf0; add rsp, 0x18; ret; 
0x000000000000b94d: mov edi, dword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xee50; add rsp, 0x18; ret; 
0x000000000000b460: mov edi, dword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xef00; add rsp, 0x18; ret; 
0x000000000000b3d0: mov edi, dword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xefc0; add rsp, 0x18; ret; 
0x000000000002ab68: mov edi, dword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000002baba: mov edi, dword ptr [rbp]; call rbx; 
0x000000000004a5fe: mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x00000000000345aa: mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x000000000004bbba: mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x960a]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bb9f: mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x9775]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a9d4: mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xa941]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a9a6: mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xa963]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a658: mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xacac]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000004a622: mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xace0]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a60d: mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; mov rsi, r14; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000002f81b: mov edi, dword ptr [rbx + 0x10]; mov rax, qword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x000000000003cf9c: mov edi, dword ptr [rbx + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000002e64b: mov edi, dword ptr [rbx + rbp]; call rax; 
0x000000000001217b: mov edi, dword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003fe00: mov edi, dword ptr [rdi + 0x10]; lea rsi, [rsp + 4]; call qword ptr [rip + 0x26c8a]; pop rcx; ret; 
0x000000000003f53c: mov edi, dword ptr [rdi + 0x10]; mov rax, rdi; pop rcx; ret; 
0x000000000003cf38: mov edi, dword ptr [rdi + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x0000000000013c53: mov edi, dword ptr [rdi - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x0000000000015032: mov edi, dword ptr [rdi]; call 0x11bc0; xor eax, eax; pop rcx; ret; 
0x0000000000014f42: mov edi, dword ptr [rdi]; call 0x15d00; xor eax, eax; pop rcx; ret; 
0x000000000000b2e2: mov edi, dword ptr [rdi]; call 0xb320; pop rcx; ret; 
0x000000000000beb1: mov edi, dword ptr [rdi]; call qword ptr [rip + 0x5ac1f]; pop rax; ret; 
0x000000000004a933: mov edi, dword ptr [rdi]; mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xa892]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a913: mov edi, dword ptr [rdi]; mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xaa02]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004b960: mov edi, dword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x0000000000009ab8: mov edi, dword ptr [rip + 0x5d542]; call 0x7080; call 0x9a30; mov byte ptr [rip + 0x5d569], 1; pop rbp; ret; 
0x000000000002fb3b: mov edi, dword ptr [rsi + 0x10]; mov rax, qword ptr [rsi + 0x18]; call qword ptr [rax + 0x28]; 
0x000000000004a92f: mov edi, dword ptr [rsi + 8]; mov rdi, qword ptr [r15]; mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xa892]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000002ba98: mov edi, dword ptr [rsi - 1]; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x000000000004e35c: mov edi, dword ptr [rsi]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x6e69]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e342: mov edi, dword ptr [rsi]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x6fd3]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bae1: mov edi, dword ptr [rsi]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x96e4]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bac7: mov edi, dword ptr [rsi]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x984e]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e2d0: mov edi, dword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x79cf]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000004e04e: mov edi, dword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x7c22]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000004bbfb: mov edi, dword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x971c]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000034d63: mov edi, dword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000004ed61: mov edi, dword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x6f4b]; mov edx, 5; jmp rax; 
0x000000000004eff1: mov edi, dword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x711d]; mov edx, 0xb; jmp rax; 
0x0000000000049f71: mov edi, dword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xb2d3]; mov edx, 0xe; jmp rax; 
0x000000000004b91b: mov edi, dword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rsi, rdx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x000000000004edcd: mov edi, dword ptr [rsi]; mov rcx, qword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rsi, rax; jmp rcx; 
0x000000000004c3d1: mov edi, dword ptr [rsi]; mov rcx, qword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov esi, eax; pop rax; jmp rcx; 
0x00000000000111e1: mov edi, dword ptr [rsp + 0x10]; lea rax, [rip - 0x77fc]; xor edx, edx; call rax; 
0x00000000000103f1: mov edi, dword ptr [rsp + 0x10]; lea rdx, [rip + 0x535ec]; lea rax, [rip - 0x6e63]; mov esi, 0x100; call rax; 
0x000000000000e30a: mov edi, dword ptr [rsp + 0x10]; lea rdx, [rip + 0x5565b]; lea rax, [rip - 0x4d7c]; call rax; 
0x000000000004a547: mov edi, dword ptr [rsp + 0x10]; lea rsi, [rip + 0xa76e]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000000d036: mov edi, dword ptr [rsp + 0x10]; mov edx, 0x38; call 0x7078; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000000b284: mov edi, dword ptr [rsp + 0x10]; mov esi, eax; call qword ptr [rip + 0x5b8a0]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000004aa59: mov edi, dword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; lea rsi, [rip + 0xa8ac]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a8be: mov edi, dword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; lea rsi, [rip + 0xaa47]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a430: mov edi, dword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x00000000000285aa: mov edi, dword ptr [rsp + 0x110]; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x00000000000102bb: mov edi, dword ptr [rsp + 0x18]; lea rax, [rip - 0x6e66]; call rax; 
0x000000000000a451: mov edi, dword ptr [rsp + 0x20]; call 0xb2c0; add rsp, 0x28; ret; 
0x000000000000c476: mov edi, dword ptr [rsp + 0x20]; lea rax, [rip + 0x1e81f]; mov qword ptr [rsp + 0x70], rax; call rax; 
0x000000000000b52e: mov edi, dword ptr [rsp + 0x28]; call 0x7060; ud2; lea rax, [rip - 0x1f20]; call rax; 
0x000000000000b86e: mov edi, dword ptr [rsp + 0x28]; call 0x7060; ud2; lea rax, [rip - 0x2260]; call rax; 
0x000000000000f66d: mov edi, dword ptr [rsp + 0x28]; lea rax, [rip - 0x6228]; call rax; 
0x000000000000e194: mov edi, dword ptr [rsp + 0x28]; lea rdx, [rip + 0x557b9]; lea rax, [rip - 0x4c06]; call rax; 
0x000000000004a718: mov edi, dword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x30]; lea rsi, [rip + 0xabed]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000000c4b1: mov edi, dword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000e163: mov edi, dword ptr [rsp + 0x30]; lea rdx, [rip + 0x557d2]; lea rax, [rip - 0x4bd5]; call rax; 
0x000000000000c4e5: mov edi, dword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c519: mov edi, dword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c54d: mov edi, dword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c581: mov edi, dword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c5b5: mov edi, dword ptr [rsp + 0x68]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x00000000000103b7: mov edi, dword ptr [rsp + 8]; lea rdx, [rip + 0x5360e]; lea rax, [rip - 0x6e29]; mov esi, 0x100; call rax; 
0x000000000000e33b: mov edi, dword ptr [rsp + 8]; lea rdx, [rip + 0x55642]; lea rax, [rip - 0x4dad]; call rax; 
0x000000000000cd6d: mov edi, dword ptr [rsp + 8]; lea rsi, [rip + 0x56b28]; lea rax, [rip - 0x390f]; call rax; 
0x000000000004aefb: mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000004ade9: mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000004af4d: mov edi, dword ptr [rsp + 8]; mov rcx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000000b2ff: mov edi, dword ptr [rsp + 8]; mov rsi, qword ptr [rsp + 0x10]; call 0xfc70; add rsp, 0x18; ret; 
0x000000000002db71: mov edi, dword ptr [rsp - 1]; mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x000000000000b65f: mov edi, dword ptr [rsp]; add rdi, 0x18; call 0xb6d0; add rsp, 0x18; ret; 
0x000000000000bc05: mov edi, dword ptr [rsp]; add rdi, 0xa8; call 0xbd40; add rsp, 0x18; ret; 
0x000000000000b9df: mov edi, dword ptr [rsp]; add rdi, 4; call 0xb7a0; pop rax; ret; 
0x000000000000b37e: mov edi, dword ptr [rsp]; add rdi, 8; call 0xb9f0; pop rax; ret; 
0x000000000000b5fb: mov edi, dword ptr [rsp]; call 0xb620; add rsp, 0x18; ret; 
0x000000000000b6fb: mov edi, dword ptr [rsp]; call 0xb7c0; add rsp, 0x18; ret; 
0x000000000000b74b: mov edi, dword ptr [rsp]; call 0xb920; add rsp, 0x18; ret; 
0x000000000000b98b: mov edi, dword ptr [rsp]; call 0xb9c0; add rsp, 0x18; ret; 
0x000000000000bc5b: mov edi, dword ptr [rsp]; call 0xbcf0; add rsp, 0x18; ret; 
0x000000000002b3c9: mov edi, dword ptr [rsp]; call rbx; 
0x000000000000c16b: mov edi, dword ptr [rsp]; lea rax, [rip + 0x1eb2b]; call rax; 
0x000000000004a7fe: mov edi, dword ptr [rsp]; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x000000000004a823: mov edi, dword ptr [rsp]; mov rax, qword ptr [r12 + 8]; lea rsi, [rip + 0xaaed]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000000aad4: mov edi, dword ptr [rsp]; mov rsi, rax; call 0xa8d0; mov rax, qword ptr [rsp + 8]; add rsp, 0xd8; ret; 
0x000000000002ddc9: mov edi, eax; call 0x2e160; add rsp, 0x18; ret; 
0x000000000003d09d: mov edi, eax; call qword ptr [rcx + 0x18]; 
0x000000000002ec3b: mov edi, eax; call qword ptr [rdx + 0x18]; 
0x000000000004ad58: mov edi, eax; call qword ptr [rip + 0x1c1b8]; add rsp, 0x38; ret; 
0x0000000000049c6e: mov edi, eax; call qword ptr [rip + 0x1d22a]; add rsp, 0x18; ret; 
0x000000000003038f: mov edi, eax; call qword ptr [rip + 0x36541]; pop rcx; ret; 
0x000000000001e34a: mov edi, eax; call qword ptr [rip + 0x48586]; pop rcx; ret; 
0x000000000001e325: mov edi, eax; call qword ptr [rip + 0x485ab]; pop rcx; ret; 
0x000000000004b89c: mov edi, eax; jmp rcx; 
0x000000000000cb20: mov edi, eax; lea rsi, [rip + 0x56d27]; call 0xced0; add rsp, 0x128; ret; 
0x0000000000011226: mov edi, eax; mov esi, edx; call 0x10230; pop rcx; ret; 
0x000000000002ec67: mov edi, eax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000004b8c8: mov edi, eax; mov rsi, rcx; call qword ptr [rip + 0x1b645]; add rsp, 0x38; ret; 
0x000000000002555f: mov edi, eax; shl rdi, 5; lea rbx, [rip - 0x1413c]; mov esi, 8; mov qword ptr [rsp + 0x1b0], rdi; call rbx; 
0x0000000000038ea8: mov edi, eax; shl rdi, 5; mov esi, 8; mov qword ptr [rsp + 0x550], rdi; lea rbx, [rip - 0x27a92]; call rbx; 
0x000000000003c6e8: mov edi, eax; xor r8d, r8d; call qword ptr [rip + 0x2a585]; pop rbx; ret; 
0x000000000004a22d: mov edi, ebp; call qword ptr [rax + 0x18]; 
0x000000000002baca: mov edi, ebp; call rbx; 
0x000000000004b11a: mov edi, ebp; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x0000000000034cba: mov edi, ebp; mov esi, 1; xor edx, edx; call rbx; 
0x000000000004b385: mov edi, ebp; mov rsi, qword ptr [rsp + 0x10]; mov rdx, r15; call qword ptr [rbx + 0x18]; 
0x0000000000021d5e: mov edi, ebp; mov rsi, qword ptr [rsp + 0x1b8]; call rbx; 
0x0000000000034cae: mov edi, ebp; xor esi, esi; mov rdx, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000028a0e: mov edi, ebx; call qword ptr [rip + 0x3e582]; add rsp, 0x10; pop rbx; ret; 
0x00000000000348aa: mov edi, ebx; mov eax, edi; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x000000000004bc68: mov edi, ebx; mov esi, 0x22; mov qword ptr [rsp + 0x38], rax; call rax; 
0x000000000004c08a: mov edi, ebx; mov esi, 0x27; mov r13, rax; call rax; 
0x000000000004bffa: mov edi, ebx; mov rdx, r13; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x000000000004be43: mov edi, ebx; mov rsi, rbp; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x000000000004ba5f: mov edi, ecx; mov r12, rdx; mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x0000000000030a57: mov edi, edi; add rdi, 8; lea rsi, [rsp + 0xb0]; mov edx, 0xa8; call rbx; 
0x000000000002ec5e: mov edi, edi; call qword ptr [rip + 0x37b9a]; mov r15, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000002ec2f: mov edi, edi; call qword ptr [rip + 0x37bc9]; mov rbx, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000002f7f0: mov edi, edi; call rax; 
0x0000000000021d4d: mov edi, edi; lea rbx, [rip - 0x10916]; call rbx; 
0x000000000004b196: mov edi, edi; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000004a705: mov edi, edi; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000003cf96: mov edi, edi; mov rbx, qword ptr [rdi]; mov rdi, qword ptr [rbx + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000004b3ad: mov edi, edi; mov rsi, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x20]; call qword ptr [rbp + 0x18]; 
0x000000000003964e: mov edi, edi; mov rsi, qword ptr [rsp + 0x550]; call rbx; 
0x000000000004a641: mov edi, edi; mov rsi, rbp; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x00000000000281e6: mov edi, edi; xor edx, edx; call rbp; cmp eax, -1; jne 0x282b8; call rbx; 
0x000000000004ed3f: mov edi, edx; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x17b4a]; add rsp, 0x28; ret; 
0x000000000004ec0f: mov edi, edx; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x17c7a]; add rsp, 0x28; ret; 
0x000000000004eae6: mov edi, edx; xor ecx, ecx; call qword ptr [rip + 0x17da8]; add rsp, 0x30; pop rbx; ret; 
0x00000000000287f7: mov edi, esi; call qword ptr [rbp]; 
0x0000000000045eaf: mov edi, esi; call qword ptr [rip + 0x209f9]; add rsp, 0x68; pop rbx; pop r14; ret; 
0x000000000002da71: mov edi, esi; call rax; 
0x00000000000343c7: mov edi, esi; call rbx; 
0x000000000003963d: mov edi, esi; lea rbx, [rip - 0x28206]; call rbx; 
0x0000000000020345: mov edi, esi; lea rbx, [rip - 0xef0e]; call rbx; 
0x000000000004e8a9: mov edi, esi; mov esi, 1; call qword ptr [rip + 0x17fe2]; add rsp, 0x88; ret; 
0x000000000004e6c9: mov edi, esi; mov esi, 1; call qword ptr [rip + 0x181c2]; add rsp, 0x88; ret; 
0x000000000004e629: mov edi, esi; mov esi, 1; call qword ptr [rip + 0x18262]; add rsp, 0x88; ret; 
0x000000000004e596: mov edi, esi; mov esi, 1; call qword ptr [rip + 0x182f5]; add rsp, 0x88; ret; 
0x000000000004e506: mov edi, esi; mov esi, 1; call qword ptr [rip + 0x18385]; add rsp, 0x88; ret; 
0x000000000004e474: mov edi, esi; mov esi, 1; call qword ptr [rip + 0x18417]; add rsp, 0x88; ret; 
0x000000000004e3e4: mov edi, esi; mov esi, 1; call qword ptr [rip + 0x184a7]; add rsp, 0x88; ret; 
0x000000000004e9ab: mov edi, esi; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x17ede]; add rsp, 0x28; ret; 
0x000000000004e8fd: mov edi, esi; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x17f8c]; add rsp, 0x88; ret; 
0x000000000004c489: mov edi, esi; mov rsi, rax; call qword ptr [rip + 0x1aabc]; pop rcx; ret; 
0x00000000000294e9: mov edi, esp; call 0x13b70; mov rax, rbx; add rsp, 0x1b0; pop rbx; ret; 
0x000000000000dcc7: mov edi, esp; call 0xb410; add rsp, 0xa8; ret; 
0x000000000002a486: mov edi, esp; call qword ptr [rip + 0x3c7a2]; pop rcx; ret; 
0x000000000002b27b: mov edi, esp; call rbx; 
0x0000000000020356: mov edi, esp; mov rsi, qword ptr [rsp + 0x168]; call rbx; 
0x00000000000343c6: mov edi, r14d; call rbx; 
0x000000000004e1df: mov edx, 0x100; or rax, r8; or rax, rdx; pop rbx; ret; 
0x0000000000030389: mov edx, 0x10; mov rdi, rax; call qword ptr [rip + 0x36541]; pop rcx; ret; 
0x000000000004e2dd: mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000000fc52: mov edx, 0x28; call 0x7078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x000000000004df68: mov edx, 0x28; mov r8d, 0x11f; call 0x4de00; pop rcx; ret; 
0x000000000004df9f: mov edx, 0x2c; mov r8d, 0xc4; call 0x4de00; pop rcx; ret; 
0x00000000000106f7: mov edx, 0x30; call 0x7078; mov rax, qword ptr [rsp + 8]; add rsp, 0x58; ret; 
0x000000000000d03a: mov edx, 0x38; call 0x7078; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000001c1fe: mov edx, 0x4800034c; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000000fbc2: mov edx, 0x48fffff4; add esp, 0x28; ret; 
0x0000000000030a48: mov edx, 0x90; call rbx; 
0x0000000000030a65: mov edx, 0xa8; call rbx; 
0x000000000000b61a: mov edx, 0xb0fffff; nop; push rax; call 0xfb80; pop rax; ret; 
0x000000000004f002: mov edx, 0xb; jmp rax; 
0x000000000000b1fa: mov edx, 0xd0; call 0x7078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x00000000000070f3: mov edx, 0xd366fffe; ret 0x2166; 
0x000000000004e05b: mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x00000000000227c4: mov edx, 0xe8; add byte ptr [rdi], cl; xchg eax, ebp; ret 0x8366; 
0x0000000000049f82: mov edx, 0xe; jmp rax; 
0x000000000004a780: mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e0e1: mov edx, 1; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000004a780: mov edx, 1; call qword ptr [rax + 0x18]; mov byte ptr [rbx + 8], al; pop rbx; ret; 
0x000000000004aaae: mov edx, 1; jmp rax; 
0x0000000000014f69: mov edx, 1; lea rsi, [rsp + 4]; call 0x2b6b0; pop rcx; ret; 
0x0000000000011a16: mov edx, 1; lea rsi, [rsp + 4]; call 0x2b760; pop rcx; ret; 
0x000000000000c695: mov edx, 1; mov ecx, 0x4a; call rax; 
0x000000000004a630: mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004e0c5: mov edx, 2; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x0000000000014f9a: mov edx, 2; lea rsi, [rsp + 4]; call 0x2b6b0; pop rcx; ret; 
0x0000000000011a47: mov edx, 2; lea rsi, [rsp + 4]; call 0x2b760; pop rcx; ret; 
0x000000000001e344: mov edx, 2; mov rdi, rax; call qword ptr [rip + 0x48586]; pop rcx; ret; 
0x000000000004a7f5: mov edx, 2; sub rdx, rax; mov rdi, qword ptr [r12]; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x000000000004a666: mov edx, 3; call qword ptr [rax + 0x18]; 
0x0000000000011a83: mov edx, 3; lea rsi, [rsp + 4]; call 0x2b760; pop rcx; ret; 
0x000000000001e31f: mov edx, 3; mov rdi, rax; call qword ptr [rip + 0x485ab]; pop rcx; ret; 
0x0000000000011ba6: mov edx, 4; lea rsi, [rsp + 4]; call 0x2b6b0; pop rcx; ret; 
0x0000000000011ac6: mov edx, 4; lea rsi, [rsp + 4]; call 0x2b760; pop rcx; ret; 
0x000000000004ed72: mov edx, 5; jmp rax; 
0x00000000000493be: mov edx, 5; xor esi, esi; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x00000000000493da: mov edx, 6; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000002ca78: mov edx, 6; movsxd rsi, dword ptr [r12 + rsi*4]; add rsi, r12; jmp rsi; 
0x000000000000c8ae: mov edx, 7; call 0xb180; lea rax, [rip + 0x210e1]; call rax; 
0x000000000002b275: mov edx, 8; mov rdi, r12; call rbx; 
0x0000000000020350: mov edx, 8; mov rdi, r12; mov rsi, qword ptr [rsp + 0x168]; call rbx; 
0x0000000000021d58: mov edx, 8; mov rdi, r13; mov rsi, qword ptr [rsp + 0x1b8]; call rbx; 
0x0000000000039637: mov edx, 8; mov rdi, r14; lea rbx, [rip - 0x28206]; call rbx; 
0x000000000002033f: mov edx, 8; mov rdi, r14; lea rbx, [rip - 0xef0e]; call rbx; 
0x0000000000021d47: mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x10916]; call rbx; 
0x0000000000039648: mov edx, 8; mov rdi, r15; mov rsi, qword ptr [rsp + 0x550]; call rbx; 
0x0000000000049c68: mov edx, 8; mov rdi, rax; call qword ptr [rip + 0x1d22a]; add rsp, 0x18; ret; 
0x000000000002bac4: mov edx, 8; mov rdi, rbp; call rbx; 
0x000000000002b3c5: mov edx, dword ptr [rax + 0x10]; mov rdi, qword ptr [r12]; call rbx; 
0x000000000002bab6: mov edx, dword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000004af5b: mov edx, dword ptr [rax + rbp + 8]; call qword ptr [rcx + 0x18]; 
0x000000000003f538: mov edx, dword ptr [rdi + 0x18]; mov rdi, qword ptr [rdi + 0x10]; mov rax, rdi; pop rcx; ret; 
0x000000000004d7b5: mov edx, dword ptr [rdi + 0x18]; ret; 
0x0000000000045d65: mov edx, dword ptr [rdi + 0x28]; ret; 
0x000000000001cb3e: mov edx, dword ptr [rdi + 8]; mov eax, 1; ret; 
0x000000000001cb68: mov edx, dword ptr [rdi + 8]; mov rax, rdx; not rax; shr rax, 0x3f; ret; 
0x000000000000a544: mov edx, dword ptr [rdi + 8]; ret; 
0x000000000003db4a: mov edx, dword ptr [rdx + rcx*8]; ret; 
0x000000000000d489: mov edx, dword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000a52a: mov edx, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000000b13d: mov edx, dword ptr [rsp + 0x10]; add rsp, 0x30; ret; 
0x000000000000fad2: mov edx, dword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x0000000000011043: mov edx, dword ptr [rsp + 0x10]; call 0x101b0; add rsp, 0x18; ret; 
0x000000000000a989: mov edx, dword ptr [rsp + 0x10]; call 0x105b0; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000000ce2d: mov edx, dword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x000000000000b176: mov edx, dword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x000000000000f257: mov edx, dword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000000d913: mov edx, dword ptr [rsp + 0x18]; mov qword ptr [rcx], rdx; add rsp, 0x38; ret; 
0x000000000000fb18: mov edx, dword ptr [rsp + 0x18]; mov rcx, qword ptr [rsp + 0x20]; call 0xf080; add rsp, 0x28; ret; 
0x000000000000b1d7: mov edx, dword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x26149]; lea rdi, [rsp + 0x38]; call rax; 
0x0000000000010dcc: mov edx, dword ptr [rsp + 0x1c]; add rsp, 0x38; ret; 
0x00000000000113b2: mov edx, dword ptr [rsp + 0x20]; add rsp, 0x38; ret; 
0x000000000004b3b5: mov edx, dword ptr [rsp + 0x20]; call qword ptr [rbp + 0x18]; 
0x000000000001021f: mov edx, dword ptr [rsp + 0x28]; add rsp, 0x38; ret; 
0x0000000000011345: mov edx, dword ptr [rsp + 0x28]; add rsp, 0x48; ret; 
0x000000000000ecd7: mov edx, dword ptr [rsp + 0x28]; add rsp, 0x98; ret; 
0x00000000000110ad: mov edx, dword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x000000000000f2ee: mov edx, dword ptr [rsp + 0x30]; add rsp, 0x58; ret; 
0x00000000000105a5: mov edx, dword ptr [rsp + 0x30]; add rsp, 0x68; ret; 
0x000000000000f0c6: mov edx, dword ptr [rsp + 0x30]; call qword ptr [rip + 0x579b0]; add rsp, 0x38; ret; 
0x000000000000a90f: mov edx, dword ptr [rsp + 0x38]; call 0xa570; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x0000000000034cb3: mov edx, dword ptr [rsp + 0x38]; call rbx; 
0x000000000000d859: mov edx, dword ptr [rsp + 0x38]; mov qword ptr [rcx + 0x18], rdx; add rsp, 0xb0; ret; 
0x000000000000e9f0: mov edx, dword ptr [rsp + 0x50]; mov qword ptr [rcx + 0x20], rdx; add rsp, 0x88; ret; 
0x000000000000d1b1: mov edx, dword ptr [rsp + 0x78]; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x98; ret; 
0x000000000000f4a6: mov edx, dword ptr [rsp + 0x80]; add rsp, 0xf8; ret; 
0x000000000000dbbe: mov edx, dword ptr [rsp + 0xc8]; mov qword ptr [rcx + 8], rdx; mov rdx, qword ptr [rsp + 0xd0]; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x138; ret; 
0x000000000000dbca: mov edx, dword ptr [rsp + 0xd0]; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x138; ret; 
0x000000000000a7b2: mov edx, dword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000000a81c: mov edx, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000cc8d: mov edx, dword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000110f6: mov edx, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000d35a: mov edx, dword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000000fdcc: mov edx, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0xb8; ret; 
0x000000000000ff7c: mov edx, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0xe8; ret; 
0x000000000004f0ce: mov edx, eax; mov rax, r10; mov rdx, r11; ret; 
0x000000000004f098: mov edx, eax; xor r11d, r11d; mov rax, r10; mov rdx, r11; ret; 
0x000000000004a618: mov edx, ebp; call qword ptr [rax + 0x18]; 
0x000000000004c2f5: mov edx, ebp; mov ebp, 0x110001; jmp rcx; 
0x000000000004bffd: mov edx, ebp; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x0000000000032901: mov edx, ebx; add rsp, 0x88; pop rbx; pop r14; ret; 
0x00000000000465ac: mov edx, ebx; and r8d, 3; lea rax, [rip + 0xe397]; movsxd rbx, dword ptr [rax + r8*4]; add rbx, rax; jmp rbx; 
0x0000000000044ff9: mov edx, ebx; lea rsi, [rip + 0xf29e]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000004f086: mov edx, ebx; ret; 
0x000000000004c673: mov edx, ecx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004b925: mov edx, ecx; call qword ptr [rax + 0x18]; 
0x000000000003fc5d: mov edx, ecx; pop rcx; ret; 
0x000000000003d19b: mov edx, ecx; ret; 
0x000000000004b38d: mov edx, edi; call qword ptr [rbx + 0x18]; 
0x000000000004c1a3: mov edx, edi; jmp rcx; 
0x0000000000042117: mov edx, edi; lea rsi, [rip + 0x11f00]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x0000000000008302: mov edx, esi; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000003d06c: mov edx, esi; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000000be60: mov edx, esi; mov eax, edi; ret; 
0x00000000000493ab: mov edx, esi; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x0000000000011211: mov edx, esi; mov rax, rdi; ret; 
0x0000000000018e95: mov edx, esi; pop rbx; pop r14; pop r15; ret; 
0x000000000004f15f: mov edx, esi; ret; 
0x000000000004ee08: mov edx, esp; call qword ptr [rip + 0x18108]; add rsp, 0x38; ret; 
0x000000000004ad55: mov edx, esp; mov rdi, rax; call qword ptr [rip + 0x1c1b8]; add rsp, 0x38; ret; 
0x000000000004b8c5: mov edx, esp; mov rdi, rax; mov rsi, rcx; call qword ptr [rip + 0x1b645]; add rsp, 0x38; ret; 
0x000000000004c1a2: mov edx, r15d; jmp rcx; 
0x0000000000042116: mov edx, r15d; lea rsi, [rip + 0x11f00]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000004c250: mov es, word ptr [rax]; add byte ptr [rax + 0x63], cl; or al, 0x88; add rcx, rax; jmp rcx; 
0x000000000001211e: mov es, word ptr [rdi]; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x00000000000103c9: mov esi, 0x100; call rax; 
0x000000000002b270: mov esi, 0x18; mov edx, 8; mov rdi, r12; call rbx; 
0x000000000002babf: mov esi, 0x18; mov edx, 8; mov rdi, rbp; call rbx; 
0x000000000001053f: mov esi, 0x19; call rax; 
0x000000000004bc6a: mov esi, 0x22; mov qword ptr [rsp + 0x38], rax; call rax; 
0x000000000004c08c: mov esi, 0x27; mov r13, rax; call rax; 
0x0000000000009b4d: mov esi, 0x28; call rax; 
0x00000000000106e5: mov esi, 0x2b; call rax; 
0x000000000000cf1f: mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000000d074: mov esi, 0x2b; lea rdx, [rsp + 0x20]; call rax; 
0x000000000004b11c: mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x000000000002518a: mov esi, 0x480002c4; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000000d97f: mov esi, 0x49; call rax; 
0x000000000004bea9: mov esi, 0x5c; jmp rax; 
0x000000000000b201: mov esi, 0x8b48ffff; and al, 0x10; add rsp, 0x118; ret; 
0x0000000000046ecb: mov esi, 0xb9660400; add dword ptr [rax], eax; lea rdx, [rip + 0xdaeb]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000042e22: mov esi, 0xf17ff83; xchg dword ptr [rip + 0x48000005], ebx; lea ebx, [rip + 0x1128d]; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x000000000004e8ab: mov esi, 1; call qword ptr [rip + 0x17fe2]; add rsp, 0x88; ret; 
0x000000000004e6cb: mov esi, 1; call qword ptr [rip + 0x181c2]; add rsp, 0x88; ret; 
0x000000000004e62b: mov esi, 1; call qword ptr [rip + 0x18262]; add rsp, 0x88; ret; 
0x000000000004e598: mov esi, 1; call qword ptr [rip + 0x182f5]; add rsp, 0x88; ret; 
0x000000000004e508: mov esi, 1; call qword ptr [rip + 0x18385]; add rsp, 0x88; ret; 
0x000000000004e476: mov esi, 1; call qword ptr [rip + 0x18417]; add rsp, 0x88; ret; 
0x000000000004e3e6: mov esi, 1; call qword ptr [rip + 0x184a7]; add rsp, 0x88; ret; 
0x000000000004ed41: mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x17b4a]; add rsp, 0x28; ret; 
0x000000000004ec11: mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x17c7a]; add rsp, 0x28; ret; 
0x000000000004e9ad: mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x17ede]; add rsp, 0x28; ret; 
0x000000000004e8ff: mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x17f8c]; add rsp, 0x88; ret; 
0x0000000000034cbc: mov esi, 1; xor edx, edx; call rbx; 
0x000000000001fc56: mov esi, 8; call rbx; 
0x000000000001fc3c: mov esi, 8; mov qword ptr [rsp + 0x168], rdi; mov rbp, r9; call rbx; 
0x000000000002556c: mov esi, 8; mov qword ptr [rsp + 0x1b0], rdi; call rbx; 
0x0000000000038eae: mov esi, 8; mov qword ptr [rsp + 0x550], rdi; lea rbx, [rip - 0x27a92]; call rbx; 
0x000000000000e006: mov esi, dword ptr [rax + 0x28]; call 0xe900; mov rax, qword ptr [rsp + 0x70]; add rsp, 0x108; ret; 
0x000000000000be98: mov esi, dword ptr [rax + 8]; call 0xb150; pop rcx; ret; 
0x000000000000b930: mov esi, dword ptr [rax + 8]; call 0xecf0; add rsp, 0x18; ret; 
0x000000000000b950: mov esi, dword ptr [rax + 8]; call 0xee50; add rsp, 0x18; ret; 
0x000000000000b463: mov esi, dword ptr [rax + 8]; call 0xef00; add rsp, 0x18; ret; 
0x000000000000b3d3: mov esi, dword ptr [rax + 8]; call 0xefc0; add rsp, 0x18; ret; 
0x000000000004af57: mov esi, dword ptr [rax + rbp]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x00000000000343c4: mov esi, dword ptr [rax]; mov edi, r14d; call rbx; 
0x000000000002c6b1: mov esi, dword ptr [rbx + 8]; mov edi, 6; lea rax, [rip + 0x252bc]; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x000000000004af05: mov esi, dword ptr [rbx + rsi]; call qword ptr [rax + 0x18]; 
0x000000000004adf3: mov esi, dword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000000b304: mov esi, dword ptr [rsp + 0x10]; call 0xfc70; add rsp, 0x18; ret; 
0x00000000000102b6: mov esi, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; lea rax, [rip - 0x6e66]; call rax; 
0x000000000004b3b0: mov esi, dword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x20]; call qword ptr [rbp + 0x18]; 
0x000000000004b388: mov esi, dword ptr [rsp + 0x10]; mov rdx, r15; call qword ptr [rbx + 0x18]; 
0x0000000000020359: mov esi, dword ptr [rsp + 0x168]; call rbx; 
0x000000000000b01f: mov esi, dword ptr [rsp + 0x18]; call 0xb490; add rsp, 0x38; ret; 
0x000000000000b0af: mov esi, dword ptr [rsp + 0x18]; call 0xb7d0; add rsp, 0x38; ret; 
0x0000000000021d61: mov esi, dword ptr [rsp + 0x1b8]; call rbx; 
0x0000000000011278: mov esi, dword ptr [rsp + 0x20]; call 0xd370; add rsp, 0x28; ret; 
0x000000000000b1dc: mov esi, dword ptr [rsp + 0x20]; lea rax, [rip + 0x26149]; lea rdi, [rsp + 0x38]; call rax; 
0x000000000000f668: mov esi, dword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip - 0x6228]; call rax; 
0x000000000000e305: mov esi, dword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x10]; lea rdx, [rip + 0x5565b]; lea rax, [rip - 0x4d7c]; call rax; 
0x000000000000e15e: mov esi, dword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x30]; lea rdx, [rip + 0x557d2]; lea rax, [rip - 0x4bd5]; call rax; 
0x000000000000e18f: mov esi, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x28]; lea rdx, [rip + 0x557b9]; lea rax, [rip - 0x4c06]; call rax; 
0x000000000000e336: mov esi, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 8]; lea rdx, [rip + 0x55642]; lea rax, [rip - 0x4dad]; call rax; 
0x0000000000039651: mov esi, dword ptr [rsp + 0x550]; call rbx; 
0x0000000000010415: mov esi, dword ptr [rsp + 4]; call 0xffa0; and al, 1; movzx eax, al; pop rcx; ret; 
0x000000000000c971: mov esi, dword ptr [rsp + 8]; lea rax, [rip + 0x20c14]; lea rdi, [rsp + 0x90]; call rax; 
0x000000000000aad8: mov esi, eax; call 0xa8d0; mov rax, qword ptr [rsp + 8]; add rsp, 0xd8; ret; 
0x000000000004c48c: mov esi, eax; call qword ptr [rip + 0x1aabc]; pop rcx; ret; 
0x00000000000285a1: mov esi, eax; call qword ptr [rip + 0x3e3cf]; mov rdi, qword ptr [rsp + 0x110]; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x000000000000b248: mov esi, eax; call qword ptr [rip + 0x5b5a0]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000b288: mov esi, eax; call qword ptr [rip + 0x5b8a0]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000004edd8: mov esi, eax; jmp rcx; 
0x000000000004c3db: mov esi, eax; pop rax; jmp rcx; 
0x000000000004be46: mov esi, ebp; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x000000000004a644: mov esi, ebp; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000000c5c3: mov esi, ebx; add dword ptr [rax], eax; call rax; 
0x000000000004b198: mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000002e743: mov esi, ebx; dec r14; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000004b8cb: mov esi, ecx; call qword ptr [rip + 0x1b645]; add rsp, 0x38; ret; 
0x0000000000013c4d: mov esi, edi; dec r14; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x0000000000011228: mov esi, edx; call 0x10230; pop rcx; ret; 
0x000000000004b922: mov esi, edx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x000000000004a615: mov esi, esi; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000002ddc6: mov esi, esp; mov rdi, rax; call 0x2e160; add rsp, 0x18; ret; 
0x000000000001fc43: mov esp, 0x16824; add byte ptr [rcx + rcx*4 - 0x33], cl; call rbx; 
0x000000000000c0b4: mov esp, 0x18824; add bh, bh; adc eax, 0x5a920; add rsp, 0x1b8; ret; 
0x000000000000c68f: mov esp, 0x26824; add byte ptr [rdx + 1], bh; mov ecx, 0x4a; call rax; 
0x000000000003bad3: mov esp, 0x28024; add al, ch; ret 0xfd6e; 
0x000000000000c79b: mov esp, 0x2f024; add byte ptr [rdx + 1], bh; mov ecx, 0x4a; call rax; 
0x000000000001ea6c: mov esp, 0x2f; lea rdx, [rip + 0x3299c]; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x00000000000271c8: mov esp, 0x41000007; call rdx; 
0x000000000000c4e0: mov esp, 0x48000007; mov edi, dword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000002c6bc: mov esp, 0x48000252; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x0000000000038eb5: mov esp, 0x55024; add byte ptr [rax - 0x73], cl; sbb eax, 0xfffd856e; call rbx; 
0x000000000004c490: mov esp, 0x590001aa; ret; 
0x000000000000c643: mov esp, 0x8824; add bh, bh; adc eax, 0x5a391; add rsp, 0x318; ret; 
0x0000000000008136: mov esp, 0x8948cbeb; ret; 
0x0000000000035623: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x1ce8; 
0x0000000000035805: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x3ae8; 
0x0000000000035701: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x3ee8; 
0x00000000000354f2: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x4de8; 
0x00000000000355d6: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x69e8; 
0x00000000000357cc: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x73e8; 
0x00000000000356b7: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x88e8; 
0x00000000000354a5: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x9ae8; 
0x0000000000035793: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xace8; 
0x000000000003558c: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xb3e8; 
0x000000000003566d: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xd2e8; 
0x000000000003553f: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xe8; 
0x000000000003574e: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xf1e8; 
0x000000000000c8a8: mov esp, 0xc824; add byte ptr [rdx + 7], bh; call 0xb180; lea rax, [rip + 0x210e1]; call rax; 
0x000000000003d356: mov esp, 0xc9b70fc9; lea rdx, [rcx + rax]; add rdx, -0x10; mov eax, 1; ret; 
0x000000000003d39b: mov esp, 0xc9b70fc9; lea rdx, [rcx + rax]; add rdx, 0x10; mov eax, 1; ret; 
0x0000000000015743: mov esp, 0xd024; add al, ch; sbb edi, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000003d26e: mov esp, 0xd0b70fc0; mov eax, 1; ret; 
0x000000000003d36b: mov esp, 0xd0b70fc2; add rdx, rcx; mov eax, 1; ret; 
0x000000000003d383: mov esp, 0xd1b70fc9; add rdx, rax; mov eax, 1; ret; 
0x000000000002989d: mov esp, 0xe024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x15ff; 
0x0000000000030e39: mov esp, dword ptr [rcx + 3]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000001fc4f: mov esp, eax; mov edi, 0x100; mov esi, 8; call rbx; 
0x000000000002ab62: mov esp, ebp; dec r12; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000004bb25: mov esp, ecx; mov r13, rdx; mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000004b955: mov esp, ecx; mov rbx, rdi; mov r13, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000004ba62: mov esp, edx; mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x0000000000013b48: mov qword ptr [r14 + 0x10], rbx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c842: mov qword ptr [r14 + 8], rax; mov qword ptr [r14], 0x10; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c976: mov qword ptr [r14 + 8], rax; mov qword ptr [r14], 0x11; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001caa1: mov qword ptr [r14 + 8], rax; mov qword ptr [r14], 0x12; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c9dc: mov qword ptr [r14 + 8], rax; mov qword ptr [r14], 0x14; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ca85: mov qword ptr [r14 + 8], rax; mov qword ptr [r14], 0x15; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c7a3: mov qword ptr [r14 + 8], rax; mov qword ptr [r14], 0x16; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c7ff: mov qword ptr [r14 + 8], rax; mov qword ptr [r14], 0x17; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ca65: mov qword ptr [r14 + 8], rax; mov qword ptr [r14], 0x1c; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c75a: mov qword ptr [r14 + 8], rax; mov qword ptr [r14], 0xb; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001caef: mov qword ptr [r14 + 8], rax; mov qword ptr [r14], 7; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000007a97: mov qword ptr [r14 + 8], rdi; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001c8f6: mov qword ptr [r14 + 8], rdx; mov qword ptr [r14], 0x27; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c7df: mov qword ptr [r14 + 8], rdx; mov qword ptr [r14], 0x2c; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001cac2: mov qword ptr [r14 + 8], rdx; mov qword ptr [r14], 0x2d; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c846: mov qword ptr [r14], 0x10; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c97a: mov qword ptr [r14], 0x11; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001caa5: mov qword ptr [r14], 0x12; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c9e0: mov qword ptr [r14], 0x14; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ca89: mov qword ptr [r14], 0x15; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c7a7: mov qword ptr [r14], 0x16; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c803: mov qword ptr [r14], 0x17; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ca69: mov qword ptr [r14], 0x1c; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c99d: mov qword ptr [r14], 0x20; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ca26: mov qword ptr [r14], 0x21; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ca49: mov qword ptr [r14], 0x22; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c8d5: mov qword ptr [r14], 0x23; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c88f: mov qword ptr [r14], 0x24; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001ca03: mov qword ptr [r14], 0x25; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c86c: mov qword ptr [r14], 0x26; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c8fa: mov qword ptr [r14], 0x27; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c9c0: mov qword ptr [r14], 0x28; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c91d: mov qword ptr [r14], 0x29; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c8b2: mov qword ptr [r14], 0x2a; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c826: mov qword ptr [r14], 0x2b; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c7e3: mov qword ptr [r14], 0x2c; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001cac6: mov qword ptr [r14], 0x2d; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c75e: mov qword ptr [r14], 0xb; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001caf3: mov qword ptr [r14], 7; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001c963: mov qword ptr [r14], 8; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004a0ca: mov qword ptr [r14], rax; mov rax, r14; pop rbx; pop r14; pop r15; ret; 
0x0000000000007a9b: mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004e29b: mov qword ptr [r8 + 8], rax; xor eax, eax; mov byte ptr [r8], al; mov rax, r8; ret; 
0x000000000000f770: mov qword ptr [rax + 0x10], 0; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x68; ret; 
0x000000000004d96a: mov qword ptr [rax + 0x10], r8; mov qword ptr [rax + 0x18], rcx; pop rbx; pop rbp; ret; 
0x000000000000da0d: mov qword ptr [rax + 0x10], rcx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000001018e: mov qword ptr [rax + 0x10], rcx; test byte ptr [rsp + 0x57], 1; jne 0x101a3; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x0000000000049397: mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000004d96e: mov qword ptr [rax + 0x18], rcx; pop rbx; pop rbp; ret; 
0x000000000000d5cd: mov qword ptr [rax + 0x40], 0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x168; ret; 
0x0000000000010a2c: mov qword ptr [rax + 8], 0; mov rax, qword ptr [rsp + 8]; add rsp, 0x138; ret; 
0x000000000002f4a3: mov qword ptr [rax + 8], r14; lea rdx, [rip + 0x35632]; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000049393: mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000000da04: mov qword ptr [rax + 8], rcx; mov rcx, qword ptr [rsp + 0x30]; mov qword ptr [rax + 0x10], rcx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000004d966: mov qword ptr [rax + 8], rdi; mov qword ptr [rax + 0x10], r8; mov qword ptr [rax + 0x18], rcx; pop rbx; pop rbp; ret; 
0x000000000000e43a: mov qword ptr [rax], 0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x48; ret; 
0x000000000000a318: mov qword ptr [rax], 0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000000a70e: mov qword ptr [rax], 0; mov rax, qword ptr [rsp + 0x20]; add rsp, 0xa8; ret; 
0x000000000004d975: mov qword ptr [rax], 0; pop rbx; pop rbp; ret; 
0x000000000000a8ba: mov qword ptr [rax], 1; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x40; ret; 
0x000000000000a3ec: mov qword ptr [rax], 1; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x000000000000de49: mov qword ptr [rax], 2; mov rax, qword ptr [rsp + 0x30]; add rsp, 0x58; ret; 
0x000000000004c9f8: mov qword ptr [rax], rcx; pop rbx; pop r14; pop rbp; ret; 
0x000000000003fe78: mov qword ptr [rax], rcx; test cl, cl; je 0x3fe82; mov al, 1; ret; 
0x0000000000049390: mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000003313a: mov qword ptr [rbx + 0x10], rsi; pop rbx; pop r14; pop r15; ret; 
0x000000000003f410: mov qword ptr [rbx + 0x18], rsi; add rsp, 0x18; pop rbx; pop r14; ret; 
0x0000000000041b7e: mov qword ptr [rbx + 0x20], r14; add rsp, 8; pop rbx; pop r14; ret; 
0x00000000000333de: mov qword ptr [rbx + 0x90], rax; add rsp, 0x108; pop rbx; pop r14; ret; 
0x0000000000033435: mov qword ptr [rbx + 8], r14; add rsp, 0x108; pop rbx; pop r14; ret; 
0x0000000000032ab6: mov qword ptr [rbx + 8], rax; mov dword ptr [rbx], 1; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000030f34: mov qword ptr [rbx + 8], rax; mov dword ptr [rbx], 1; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000032fea: mov qword ptr [rbx + 8], rax; mov eax, 1; mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000031004: mov qword ptr [rbx + 8], rax; mov eax, 1; mov qword ptr [rbx], rax; pop rbx; ret; 
0x0000000000032fcc: mov qword ptr [rbx + 8], rax; xor eax, eax; mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000030fe9: mov qword ptr [rbx + 8], rax; xor eax, eax; mov qword ptr [rbx], rax; pop rbx; ret; 
0x0000000000032994: mov qword ptr [rbx], 0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000003f4bd: mov qword ptr [rbx], 1; add rsp, 0x18; pop rbx; pop r14; ret; 
0x0000000000045d42: mov qword ptr [rbx], 2; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x0000000000033218: mov qword ptr [rbx], 3; add rsp, 0x108; pop rbx; pop r14; ret; 
0x0000000000032a9c: mov qword ptr [rbx], rax; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000003d44f: mov qword ptr [rbx], rax; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000032fd2: mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000019084: mov qword ptr [rbx], rax; pop rbx; pop r14; pop r15; ret; 
0x0000000000030fef: mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000000dbd1: mov qword ptr [rcx + 0x10], rdx; add rsp, 0x138; ret; 
0x000000000000d1b5: mov qword ptr [rcx + 0x10], rdx; add rsp, 0x98; ret; 
0x000000000000d85d: mov qword ptr [rcx + 0x18], rdx; add rsp, 0xb0; ret; 
0x000000000000e9f4: mov qword ptr [rcx + 0x20], rdx; add rsp, 0x88; ret; 
0x000000000000cd35: mov qword ptr [rcx + 0x20], rsi; mov qword ptr [rcx + 0x28], rdx; add rsp, 0x88; ret; 
0x000000000000cd39: mov qword ptr [rcx + 0x28], rdx; add rsp, 0x88; ret; 
0x000000000000cd31: mov qword ptr [rcx + 8], rdi; mov qword ptr [rcx + 0x20], rsi; mov qword ptr [rcx + 0x28], rdx; add rsp, 0x88; ret; 
0x000000000000dbc5: mov qword ptr [rcx + 8], rdx; mov rdx, qword ptr [rsp + 0xd0]; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x138; ret; 
0x000000000000cd2e: mov qword ptr [rcx], r8; mov qword ptr [rcx + 8], rdi; mov qword ptr [rcx + 0x20], rsi; mov qword ptr [rcx + 0x28], rdx; add rsp, 0x88; ret; 
0x000000000000d917: mov qword ptr [rcx], rdx; add rsp, 0x38; ret; 
0x000000000001a866: mov qword ptr [rdi + 0x10], r10; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000001cd61: mov qword ptr [rdi + 0x10], r9; mov qword ptr [rdi], 1; add rsp, 0x30; ret; 
0x000000000001ce74: mov qword ptr [rdi + 0x10], rax; mov eax, 1; mov qword ptr [rdi], rax; add rsp, 0x30; ret; 
0x000000000001166a: mov qword ptr [rdi + 0x10], rbx; mov qword ptr [rdi + 0x18], rsi; add rsp, 0x10; pop rbx; ret; 
0x000000000000d41c: mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000000a77f: mov qword ptr [rdi + 0x10], rcx; add rsp, 0x28; ret; 
0x000000000000d2ba: mov qword ptr [rdi + 0x10], rcx; add rsp, 0x58; ret; 
0x000000000001aac8: mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 0x2e; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000000a22a: mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000000e8e7: mov qword ptr [rdi + 0x10], rdx; mov qword ptr [rdi], 0; ret; 
0x000000000000e907: mov qword ptr [rdi + 0x10], rdx; mov qword ptr [rdi], 1; ret; 
0x000000000001ce89: mov qword ptr [rdi + 0x10], rdx; xor eax, eax; mov qword ptr [rdi], rax; add rsp, 0x30; ret; 
0x000000000003f599: mov qword ptr [rdi + 0x18], 0; ret; 
0x000000000003f5a5: mov qword ptr [rdi + 0x18], rax; ret; 
0x000000000001166e: mov qword ptr [rdi + 0x18], rsi; add rsp, 0x10; pop rbx; ret; 
0x0000000000010891: mov qword ptr [rdi + 0x30], rcx; mov rcx, qword ptr [rsp + 0x38]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x0000000000010668: mov qword ptr [rdi + 0x30], rcx; mov rcx, qword ptr [rsp + 0x58]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x80; ret; 
0x000000000001089a: mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x0000000000010671: mov qword ptr [rdi + 0x38], rcx; add rsp, 0x80; ret; 
0x000000000001d151: mov qword ptr [rdi + 1], rax; add rsp, 0x10; ret; 
0x000000000001d360: mov qword ptr [rdi + 1], rax; mov qword ptr [rdi + 8], rcx; add rsp, 0x20; ret; 
0x000000000001d3c8: mov qword ptr [rdi + 1], rcx; add rsp, 0x18; ret; 
0x0000000000041898: mov qword ptr [rdi + 8], 0; xor eax, eax; mov byte ptr [rdi], al; pop rbx; ret; 
0x0000000000041792: mov qword ptr [rdi + 8], r8; pop rbx; ret; 
0x000000000001d0f4: mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x000000000001cf5b: mov qword ptr [rdi + 8], rax; add rsp, 0x18; ret; 
0x000000000001a862: mov qword ptr [rdi + 8], rax; mov qword ptr [rdi + 0x10], r10; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000001ce85: mov qword ptr [rdi + 8], rax; mov qword ptr [rdi + 0x10], rdx; xor eax, eax; mov qword ptr [rdi], rax; add rsp, 0x30; ret; 
0x000000000004184b: mov qword ptr [rdi + 8], rax; xor eax, eax; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000001d364: mov qword ptr [rdi + 8], rcx; add rsp, 0x20; ret; 
0x000000000001d00d: mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000001cfab: mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000001d2d7: mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x20; ret; 
0x000000000001e377: mov qword ptr [rdi + 8], rcx; mov qword ptr [rdi], rax; ret; 
0x000000000000d413: mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000000d2b1: mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsp + 0x40]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x58; ret; 
0x000000000001d119: mov qword ptr [rdi + 8], rdx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000001cf84: mov qword ptr [rdi + 8], rdx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000000a77b: mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x28; ret; 
0x000000000000a226: mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000000e8e3: mov qword ptr [rdi + 8], rsi; mov qword ptr [rdi + 0x10], rdx; mov qword ptr [rdi], 0; ret; 
0x000000000000e903: mov qword ptr [rdi + 8], rsi; mov qword ptr [rdi + 0x10], rdx; mov qword ptr [rdi], 1; ret; 
0x000000000000739d: mov qword ptr [rdi + rax*8 + 0x10], rcx; movaps xmm0, xmmword ptr [rsp]; movups xmmword ptr [rdi + rax*8], xmm0; add rsp, 0x20; pop rbx; ret; 
0x000000000001cdc0: mov qword ptr [rdi], 0; add rsp, 0x30; ret; 
0x0000000000041749: mov qword ptr [rdi], 0; pop rbx; ret; 
0x000000000000e8eb: mov qword ptr [rdi], 0; ret; 
0x000000000001aacc: mov qword ptr [rdi], 0x2e; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000001cd0b: mov qword ptr [rdi], 1; add rsp, 0x30; ret; 
0x000000000002811a: mov qword ptr [rdi], 1; pop rbx; pop r14; pop rbp; ret; 
0x000000000000e90b: mov qword ptr [rdi], 1; ret; 
0x000000000004178f: mov qword ptr [rdi], r9; mov qword ptr [rdi + 8], r8; pop rbx; ret; 
0x000000000001ce7d: mov qword ptr [rdi], rax; add rsp, 0x30; ret; 
0x000000000001e37b: mov qword ptr [rdi], rax; ret; 
0x000000000000a778: mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x28; ret; 
0x000000000000a223: mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000004a017: mov qword ptr [rdi], rsi; ret; 
0x00000000000303a3: mov qword ptr [rip + 0x36d5e], rax; mov qword ptr [rip + 0x36d5f], rsi; ret; 
0x00000000000303aa: mov qword ptr [rip + 0x36d5f], rsi; ret; 
0x000000000002bd35: mov qword ptr [rip + 0x3b384], rax; mov eax, ebx; add rsp, 0x20; pop rbx; ret; 
0x0000000000012084: mov qword ptr [rsi + 0x10], rax; movups xmm0, xmmword ptr [rdi]; movups xmmword ptr [rsi], xmm0; ret; 
0x0000000000012c50: mov qword ptr [rsi + 0x10], rdi; ret; 
0x000000000000b062: mov qword ptr [rsp + 0x10], rax; add rsp, 0x30; ret; 
0x000000000000e58f: mov qword ptr [rsp + 0x10], rax; call qword ptr [rip + 0x586fe]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000002816e: mov qword ptr [rsp + 0x10], rax; lea rdi, [rsp + 0x10]; call 0x86c0; add rsp, 0x18; ret; 
0x0000000000007e5f: mov qword ptr [rsp + 0x10], rax; lea rdi, [rsp + 0x10]; call 0x8b30; add rsp, 0x28; ret; 
0x0000000000010cd3: mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x20; ret; 
0x000000000000d3c8: mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000001000a: mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000d305: mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000f24c: mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000000a51f: mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000000b132: mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x30; ret; 
0x000000000002ba8e: mov qword ptr [rsp + 0x10], rbx; lea rbp, [r14 - 1]; mov rdi, qword ptr [r14 - 1]; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x000000000000b166: mov qword ptr [rsp + 0x10], rcx; mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x0000000000034d5d: mov qword ptr [rsp + 0x10], rdi; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000000d47e: mov qword ptr [rsp + 0x10], rdx; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000ffe2: mov qword ptr [rsp + 0x10], rdx; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000000b2f9: mov qword ptr [rsp + 0x10], rsi; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [rsp + 0x10]; call 0xfc70; add rsp, 0x18; ret; 
0x000000000001fc41: mov qword ptr [rsp + 0x168], rdi; mov rbp, r9; call rbx; 
0x000000000002557b: mov qword ptr [rsp + 0x18], rax; mov edi, 0x100; mov esi, 8; call rbx; 
0x000000000000b16b: mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x0000000000010cc9: mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rsp + 0x18]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x20; ret; 
0x000000000000f247: mov qword ptr [rsp + 0x18], rcx; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000004e048: mov qword ptr [rsp + 0x18], rdi; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x7c22]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000000d90d: mov qword ptr [rsp + 0x18], rdx; mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rcx], rdx; add rsp, 0x38; ret; 
0x0000000000025571: mov qword ptr [rsp + 0x1b0], rdi; call rbx; 
0x000000000000c5c9: mov qword ptr [rsp + 0x208], rax; lea rax, [rip + 0x1dea8]; lea rdi, [rsp + 0x208]; call rax; 
0x000000000001ea66: mov qword ptr [rsp + 0x20], rax; mov r12d, 0x2f; lea rdx, [rip + 0x3299c]; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x000000000000d95b: mov qword ptr [rsp + 0x20], rax; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x28; ret; 
0x000000000000a44b: mov qword ptr [rsp + 0x20], rax; mov rdi, qword ptr [rsp + 0x20]; call 0xb2c0; add rsp, 0x28; ret; 
0x0000000000011337: mov qword ptr [rsp + 0x20], rcx; mov dword ptr [rsp + 0x28], eax; mov rax, qword ptr [rsp + 0x20]; mov edx, dword ptr [rsp + 0x28]; add rsp, 0x48; ret; 
0x000000000004e2ca: mov qword ptr [rsp + 0x20], rdi; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x79cf]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000001109f: mov qword ptr [rsp + 0x28], rax; mov dword ptr [rsp + 0x30], edx; mov rax, qword ptr [rsp + 0x28]; mov edx, dword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x000000000004bc5e: mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rax + 0x20]; mov rdi, rbx; mov esi, 0x22; mov qword ptr [rsp + 0x38], rax; call rax; 
0x000000000002ec29: mov qword ptr [rsp + 0x28], rax; mov rdi, r15; call qword ptr [rip + 0x37bc9]; mov rbx, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000000f2de: mov qword ptr [rsp + 0x28], rcx; mov qword ptr [rsp + 0x30], rax; mov rax, qword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x58; ret; 
0x000000000000c4a6: mov qword ptr [rsp + 0x28], rdi; call 0xcca0; mov rdi, qword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000f2e3: mov qword ptr [rsp + 0x30], rax; mov rax, qword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x58; ret; 
0x000000000000f0c0: mov qword ptr [rsp + 0x30], rax; mov rdx, qword ptr [rsp + 0x30]; call qword ptr [rip + 0x579b0]; add rsp, 0x38; ret; 
0x000000000000c4da: mov qword ptr [rsp + 0x30], rdi; call 0xcca0; mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000d8c4: mov qword ptr [rsp + 0x30], rsi; movups xmm0, xmmword ptr [rsp + 0x28]; movups xmmword ptr [rcx], xmm0; add rsp, 0x58; ret; 
0x000000000004bc6f: mov qword ptr [rsp + 0x38], rax; call rax; 
0x000000000002f810: mov qword ptr [rsp + 0x40], rax; mov qword ptr [rsp + 0x48], rdx; mov rdi, qword ptr [rbx + 0x10]; mov rax, qword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x000000000002da5d: mov qword ptr [rsp + 0x40], rcx; mov qword ptr [rsp + 0x48], 1; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x000000000000c542: mov qword ptr [rsp + 0x40], rdi; call 0xcca0; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000002da62: mov qword ptr [rsp + 0x48], 1; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x000000000000c576: mov qword ptr [rsp + 0x48], rdi; call 0xcca0; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000002f815: mov qword ptr [rsp + 0x48], rdx; mov rdi, qword ptr [rbx + 0x10]; mov rax, qword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x0000000000038eb3: mov qword ptr [rsp + 0x550], rdi; lea rbx, [rip - 0x27a92]; call rbx; 
0x0000000000038ec4: mov qword ptr [rsp + 0x58], rax; mov edi, 0x100; mov esi, 8; call rbx; 
0x000000000000c22c: mov qword ptr [rsp + 0x60], rax; lea rax, [rip + 0x1e048]; lea rdi, [rsp + 0x50]; lea rsi, [rsp + 0x60]; lea rdx, [rsp + 0x38]; call rax; 
0x000000000000c5aa: mov qword ptr [rsp + 0x68], rdi; call 0xcca0; mov rdi, qword ptr [rsp + 0x68]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c481: mov qword ptr [rsp + 0x70], rax; call rax; 
0x000000000000d1ab: mov qword ptr [rsp + 0x78], rdx; mov rdx, qword ptr [rsp + 0x78]; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x98; ret; 
0x000000000000f150: mov qword ptr [rsp + 8], 0; mov rax, qword ptr [rsp + 8]; add rsp, 0x58; ret; 
0x000000000000f350: mov qword ptr [rsp + 8], 0; mov rax, qword ptr [rsp + 8]; add rsp, 0x60; ret; 
0x000000000000bded: mov qword ptr [rsp + 8], 1; mov rax, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000000afc7: mov qword ptr [rsp + 8], rax; call 0xda20; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000003ce8b: mov qword ptr [rsp + 8], rax; lea rbx, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000000d217: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000d30f: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000010822: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x78; ret; 
0x0000000000009fde: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000000a812: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000cc83: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000110ec: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000d350: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000000b05d: mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; add rsp, 0x30; ret; 
0x000000000000a51a: mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000000b12d: mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x30; ret; 
0x0000000000030122: mov qword ptr [rsp + 8], rcx; movaps xmm0, xmmword ptr [rsp + 0xb0]; movups xmmword ptr [rsp + 0x10], xmm0; mov qword ptr [rsp], rsi; call qword ptr [rax + 0x20]; 
0x000000000000a7a8: mov qword ptr [rsp + 8], rsi; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x0000000000010434: mov qword ptr [rsp], rax; call 0xd0c0; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000deb4: mov qword ptr [rsp], rax; call 0xe450; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000009fe8: mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000010c84: mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; mov byte ptr [rax], 0; pop rax; ret; 
0x000000000000b397: mov qword ptr [rsp], rax; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax]; call rax; 
0x000000000000cc7f: mov qword ptr [rsp], rcx; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000110e8: mov qword ptr [rsp], rcx; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000d34c: mov qword ptr [rsp], rcx; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000000a7a4: mov qword ptr [rsp], rdi; mov qword ptr [rsp + 8], rsi; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000000b2a4: mov qword ptr [rsp], rdi; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000002a481: mov qword ptr [rsp], rdi; mov rdi, rsp; call qword ptr [rip + 0x3c7a2]; pop rcx; ret; 
0x0000000000030134: mov qword ptr [rsp], rsi; call qword ptr [rax + 0x20]; 
0x000000000004f0cd: mov r10, rax; mov rax, r10; mov rdx, r11; ret; 
0x000000000004f097: mov r10, rax; xor r11d, r11d; mov rax, r10; mov rdx, r11; ret; 
0x000000000000b619: mov r10d, 0xb0fffff; nop; push rax; call 0xfb80; pop rax; ret; 
0x000000000004f197: mov r11, rdx; mov rax, r11; mov rdx, rsi; ret; 
0x000000000001fc4e: mov r12, rax; mov edi, 0x100; mov esi, 8; call rbx; 
0x000000000002ab61: mov r12, rbp; dec r12; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000004bb24: mov r12, rcx; mov r13, rdx; mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000004b954: mov r12, rcx; mov rbx, rdi; mov r13, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000004ba61: mov r12, rdx; mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000001ea6b: mov r12d, 0x2f; lea rdx, [rip + 0x3299c]; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x000000000004a225: mov r13, qword ptr [r15]; mov rax, qword ptr [r15 + 8]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000004b95a: mov r13, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000004c091: mov r13, rax; call rax; 
0x000000000004bb27: mov r13, rdx; mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000004be9c: mov r13d, 0x110001; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; mov esi, 0x5c; jmp rax; 
0x000000000004beca: mov r13d, r14d; jmp rax; 
0x0000000000013c4c: mov r14, r15; dec r14; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000002e742: mov r14, rbx; dec r14; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000343c3: mov r14d, dword ptr [rax]; mov edi, r14d; call rbx; 
0x000000000004a92e: mov r15, qword ptr [r14 + 8]; mov rdi, qword ptr [r15]; mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xa892]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000002ec66: mov r15, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000004ba5e: mov r15, rcx; mov r12, rdx; mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000003cf95: mov r15, rdi; mov rbx, qword ptr [rdi]; mov rdi, qword ptr [rbx + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000004df6d: mov r8d, 0x11f; call 0x4de00; pop rcx; ret; 
0x000000000004dfa4: mov r8d, 0xc4; call 0x4de00; pop rcx; ret; 
0x000000000000c639: mov r8d, eax; call 0xcca0; lea rdi, [rsp + 0x88]; call qword ptr [rip + 0x5a391]; add rsp, 0x318; ret; 
0x000000000002db75: mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x000000000004a801: mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x000000000004a826: mov rax, qword ptr [r12 + 8]; lea rsi, [rip + 0xaaed]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000002f7e9: mov rax, qword ptr [r14 + 0x20]; jne 0x2f80b; mov rdi, r15; call rax; 
0x000000000002ba9b: mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x000000000004e35e: mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x6e69]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e344: mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x6fd3]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bae3: mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x96e4]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bac9: mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x984e]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000013c56: mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000004a935: mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xa892]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a915: mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xaa02]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a228: mov rax, qword ptr [r15 + 8]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000001187a: mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x000000000004ed67: mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x6f4b]; mov edx, 5; jmp rax; 
0x000000000004eff7: mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x711d]; mov edx, 0xb; jmp rax; 
0x000000000004aaa3: mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xa877]; mov edx, 1; jmp rax; 
0x0000000000049f77: mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xb2d3]; mov edx, 0xe; jmp rax; 
0x000000000004bc63: mov rax, qword ptr [rax + 0x20]; mov rdi, rbx; mov esi, 0x22; mov qword ptr [rsp + 0x38], rax; call rax; 
0x000000000004c085: mov rax, qword ptr [rax + 0x20]; mov rdi, rbx; mov esi, 0x27; mov r13, rax; call rax; 
0x000000000002f09d: mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000000cf87: mov rax, qword ptr [rax + 8]; add rsp, 0x28; ret; 
0x000000000004e0d6: mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x723b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e0ba: mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x7258]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004b9e2: mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x992f]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a775: mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0xab9c]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000011876: mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x000000000004aa9f: mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xa877]; mov edx, 1; jmp rax; 
0x000000000000b39e: mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax]; call rax; 
0x000000000000b3a2: mov rax, qword ptr [rax]; call rax; 
0x000000000002ab6b: mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000004a601: mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x00000000000345ad: mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x000000000004bbbd: mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x960a]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bba2: mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x9775]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a9d7: mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xa941]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a9a9: mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xa963]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a65b: mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xacac]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000004a625: mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xace0]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a610: mov rax, qword ptr [rbp + 8]; mov rsi, r14; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000002f81e: mov rax, qword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x000000000003cf3b: mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000001217e: mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000004b962: mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000002e640: mov rax, qword ptr [rbx + r13 + 8]; test rax, rax; je 0x2e659; mov rdi, qword ptr [rbx + r13]; call rax; 
0x000000000004edc8: mov rax, qword ptr [rcx + rax*8]; mov rdi, qword ptr [rsi]; mov rcx, qword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rsi, rax; jmp rcx; 
0x0000000000012080: mov rax, qword ptr [rdi + 0x10]; mov qword ptr [rsi + 0x10], rax; movups xmm0, xmmword ptr [rdi]; movups xmmword ptr [rsi], xmm0; ret; 
0x000000000004d7b0: mov rax, qword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi + 0x18]; ret; 
0x0000000000049020: mov rax, qword ptr [rdi + 0x10]; ret; 
0x000000000003f590: mov rax, qword ptr [rdi + 0x18]; cmp rax, rcx; jae 0x3f5a2; mov qword ptr [rdi + 0x18], 0; ret; 
0x000000000004a1b0: mov rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000045d60: mov rax, qword ptr [rdi + 0x20]; mov rdx, qword ptr [rdi + 0x28]; ret; 
0x000000000000a590: mov rax, qword ptr [rdi + 8]; ret; 
0x000000000000fcc0: mov rax, qword ptr [rdi]; cmp rax, qword ptr [rsi]; setb al; and al, 1; movzx eax, al; ret; 
0x0000000000010c81: mov rax, qword ptr [rdi]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; mov byte ptr [rax], 0; pop rax; ret; 
0x000000000004b890: mov rax, qword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rdi, rax; jmp rcx; 
0x000000000004bc30: mov rax, qword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov rdi, rax; jmp rcx; 
0x000000000003d095: mov rax, qword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rdi, rax; call qword ptr [rcx + 0x18]; 
0x0000000000011870: mov rax, qword ptr [rdi]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x000000000000a540: mov rax, qword ptr [rdi]; mov rdx, qword ptr [rdi + 8]; ret; 
0x0000000000034981: mov rax, qword ptr [rip + 0x32748]; test rax, rax; lea rcx, [rip - 0x62d2]; cmovne rcx, rax; call rcx; 
0x0000000000009a43: mov rax, qword ptr [rip + 0x5ce56]; test rax, rax; je 0x9a58; jmp rax; 
0x0000000000009a84: mov rax, qword ptr [rip + 0x5d485]; test rax, rax; je 0x9a98; jmp rax; 
0x0000000000007004: mov rax, qword ptr [rip + 0x5fb95]; test rax, rax; je 0x7012; call rax; 
0x000000000002fb3e: mov rax, qword ptr [rsi + 0x18]; call qword ptr [rax + 0x28]; 
0x000000000004e2d2: mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x79cf]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000004e050: mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x7c22]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000004bbfd: mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x971c]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000034d65: mov rax, qword ptr [rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000004ed63: mov rax, qword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x6f4b]; mov edx, 5; jmp rax; 
0x000000000004eff3: mov rax, qword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x711d]; mov edx, 0xb; jmp rax; 
0x0000000000049f73: mov rax, qword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xb2d3]; mov edx, 0xe; jmp rax; 
0x000000000004c081: mov rax, qword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x20]; mov rdi, rbx; mov esi, 0x27; mov r13, rax; call rax; 
0x000000000004b91d: mov rax, qword ptr [rsi + 8]; mov rsi, rdx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x000000000001e360: mov rax, qword ptr [rsi]; lea rcx, [rip + 0x32ff2]; movsxd rdx, dword ptr [rcx + rax*4]; add rdx, rcx; jmp rdx; 
0x000000000000b204: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x000000000000a493: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x0000000000010cd8: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x20; ret; 
0x000000000000d3cd: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000000fc5c: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x000000000000a918: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x000000000000fdd0: mov rax, qword ptr [rsp + 0x10]; add rsp, 0xb8; ret; 
0x000000000000ff80: mov rax, qword ptr [rsp + 0x10]; add rsp, 0xe8; ret; 
0x000000000000d5c8: mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rax + 0x40], 0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x168; ret; 
0x000000000001000f: mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000d30a: mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000a80d: mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000b170: mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x000000000000f251: mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000004aeff: mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000004aded: mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x00000000000285b1: mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x000000000000d5d5: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x168; ret; 
0x000000000000d044: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000000a8c1: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x40; ret; 
0x000000000000e441: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x48; ret; 
0x000000000000a31f: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000000a3f3: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x000000000004aa5d: mov rax, qword ptr [rsp + 0x18]; lea rsi, [rip + 0xa8ac]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a8c2: mov rax, qword ptr [rsp + 0x18]; lea rsi, [rip + 0xaa47]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000010cce: mov rax, qword ptr [rsp + 0x18]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x20; ret; 
0x00000000000113ac: mov rax, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x38; ret; 
0x000000000000d960: mov rax, qword ptr [rsp + 0x20]; add rsp, 0x28; ret; 
0x000000000000d734: mov rax, qword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x000000000000a715: mov rax, qword ptr [rsp + 0x20]; add rsp, 0xa8; ret; 
0x0000000000009b23: mov rax, qword ptr [rsp + 0x20]; lea rcx, [rip + 0x464d1]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001021a: mov rax, qword ptr [rsp + 0x20]; mov edx, dword ptr [rsp + 0x28]; add rsp, 0x38; ret; 
0x0000000000011340: mov rax, qword ptr [rsp + 0x20]; mov edx, dword ptr [rsp + 0x28]; add rsp, 0x48; ret; 
0x000000000000b058: mov rax, qword ptr [rsp + 0x20]; mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; add rsp, 0x30; ret; 
0x000000000000ecd1: mov rax, qword ptr [rsp + 0x20]; mov rdx, qword ptr [rsp + 0x28]; add rsp, 0x98; ret; 
0x000000000000aea2: mov rax, qword ptr [rsp + 0x28]; add rsp, 0x238; ret; 
0x000000000000f778: mov rax, qword ptr [rsp + 0x28]; add rsp, 0x68; ret; 
0x000000000000c2b9: mov rax, qword ptr [rsp + 0x28]; add rsp, 0x78; ret; 
0x000000000004be48: mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x00000000000110a8: mov rax, qword ptr [rsp + 0x28]; mov edx, dword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x000000000000f0bb: mov rax, qword ptr [rsp + 0x28]; mov qword ptr [rsp + 0x30], rax; mov rdx, qword ptr [rsp + 0x30]; call qword ptr [rip + 0x579b0]; add rsp, 0x38; ret; 
0x00000000000111f2: mov rax, qword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x000000000000f2e8: mov rax, qword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x58; ret; 
0x000000000001059f: mov rax, qword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x68; ret; 
0x000000000000de50: mov rax, qword ptr [rsp + 0x30]; add rsp, 0x58; ret; 
0x000000000004a71c: mov rax, qword ptr [rsp + 0x30]; lea rsi, [rip + 0xabed]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000009ca6: mov rax, qword ptr [rsp + 0x38]; add rsp, 0x98; ret; 
0x000000000000e786: mov rax, qword ptr [rsp + 0x48]; add rsp, 0xd8; ret; 
0x000000000000a1ae: mov rax, qword ptr [rsp + 0x50]; add rsp, 0xe8; ret; 
0x000000000000e000: mov rax, qword ptr [rsp + 0x60]; mov rsi, qword ptr [rax + 0x28]; call 0xe900; mov rax, qword ptr [rsp + 0x70]; add rsp, 0x108; ret; 
0x000000000000e00e: mov rax, qword ptr [rsp + 0x70]; add rsp, 0x108; ret; 
0x000000000000c4b5: mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000f4a0: mov rax, qword ptr [rsp + 0x78]; mov rdx, qword ptr [rsp + 0x80]; add rsp, 0xf8; ret; 
0x000000000000bdf6: mov rax, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x0000000000010a34: mov rax, qword ptr [rsp + 8]; add rsp, 0x138; ret; 
0x000000000000afd1: mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000d314: mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000ce31: mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x000000000000f159: mov rax, qword ptr [rsp + 8]; add rsp, 0x58; ret; 
0x000000000000f359: mov rax, qword ptr [rsp + 8]; add rsp, 0x60; ret; 
0x0000000000010827: mov rax, qword ptr [rsp + 8]; add rsp, 0x78; ret; 
0x000000000000aadf: mov rax, qword ptr [rsp + 8]; add rsp, 0xd8; ret; 
0x000000000004a434: mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000039f32: mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x20]; 
0x0000000000009fe3: mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000000a485: mov rax, qword ptr [rsp + 8]; mov rcx, qword ptr [rax + 0x10]; call 0xa240; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000d483: mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000a524: mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000000b137: mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x30; ret; 
0x000000000000facc: mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x000000000002cce6: mov rax, qword ptr [rsp + 8]; movzx eax, byte ptr [rax]; lea rcx, [rip + 0x24ccf]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001081a: mov rax, qword ptr [rsp]; add rax, 8; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x78; ret; 
0x0000000000009fec: mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000000a992: mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000010c88: mov rax, qword ptr [rsp]; mov byte ptr [rax], 0; pop rax; ret; 
0x0000000000010a28: mov rax, qword ptr [rsp]; mov qword ptr [rax + 8], 0; mov rax, qword ptr [rsp + 8]; add rsp, 0x138; ret; 
0x000000000000cf83: mov rax, qword ptr [rsp]; mov rax, qword ptr [rax + 8]; add rsp, 0x28; ret; 
0x000000000001d357: mov rax, qword ptr [rsp]; mov rcx, qword ptr [rsp + 7]; mov qword ptr [rdi + 1], rax; mov qword ptr [rdi + 8], rcx; add rsp, 0x20; ret; 
0x000000000000ba20: mov rax, qword ptr [rsp]; mov rdi, qword ptr [rax]; call 0xeda0; add rsp, 0x18; ret; 
0x000000000000b928: mov rax, qword ptr [rsp]; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xecf0; add rsp, 0x18; ret; 
0x000000000000b948: mov rax, qword ptr [rsp]; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xee50; add rsp, 0x18; ret; 
0x000000000000b45b: mov rax, qword ptr [rsp]; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xef00; add rsp, 0x18; ret; 
0x000000000000b3cb: mov rax, qword ptr [rsp]; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xefc0; add rsp, 0x18; ret; 
0x000000000000a7ad: mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000000a817: mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000cc88: mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000110f1: mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000d355: mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000000a1df: mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000004e35d: mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x6e69]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e343: mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x6fd3]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bae2: mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x96e4]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bac8: mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x984e]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e2d1: mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rip + 0x79cf]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000004e04f: mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rip + 0x7c22]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000004bbfc: mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rip + 0x971c]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000034d64: mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000004ed62: mov rax, qword ptr ds:[rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x6f4b]; mov edx, 5; jmp rax; 
0x000000000004eff2: mov rax, qword ptr ds:[rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x711d]; mov edx, 0xb; jmp rax; 
0x0000000000049f72: mov rax, qword ptr ds:[rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xb2d3]; mov edx, 0xe; jmp rax; 
0x000000000004b91c: mov rax, qword ptr ds:[rsi + 8]; mov rsi, rdx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x000000000004f082: mov rax, r10; mov rdx, r11; ret; 
0x000000000004f15b: mov rax, r11; mov rdx, rsi; ret; 
0x000000000002f08e: mov rax, r13; lea r14, [r13 - 1]; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000002a546: mov rax, r14; add rsp, 0x10; pop rbx; pop r14; pop r15; ret; 
0x000000000002e98a: mov rax, r14; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000028af0: mov rax, r14; lea rax, [r14 - 0x20]; pop rbx; pop r14; pop r15; ret; 
0x00000000000328fd: mov rax, r14; mov rdx, rbx; add rsp, 0x88; pop rbx; pop r14; ret; 
0x000000000004a0cd: mov rax, r14; pop rbx; pop r14; pop r15; ret; 
0x0000000000030aa6: mov rax, r15; add rsp, 0x2e0; pop rbx; pop r14; pop r15; ret; 
0x0000000000018e91: mov rax, r15; mov rdx, r14; pop rbx; pop r14; pop r15; ret; 
0x000000000004e2a4: mov rax, r8; ret; 
0x000000000004ef9c: mov rax, r9; and al, 1; pop rcx; ret; 
0x00000000000294c4: mov rax, rbx; add rsp, 0x1b0; pop rbx; ret; 
0x0000000000045d39: mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x000000000002f45d: mov rax, rbx; add rsp, 0x50; pop rbx; ret; 
0x0000000000032e7c: mov rax, rbx; add rsp, 0x70; pop rbx; ret; 
0x000000000003d1ea: mov rax, rbx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002f6a1: mov rax, rbx; lea r14, [rbx - 1]; add rbx, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x00000000000082fe: mov rax, rbx; mov rdx, r14; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000003d068: mov rax, rbx; mov rdx, r14; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a210: mov rax, rbx; pop rbx; pop r14; pop r15; ret; 
0x0000000000032fd5: mov rax, rbx; pop rbx; ret; 
0x000000000001d438: mov rax, rcx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000003f33c: mov rax, rdi; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000002c266: mov rax, rdi; cmp byte ptr [rax], cl; sete al; pop rcx; ret; 
0x000000000004f0c7: mov rax, rdi; div r8; mov r10, rax; mov rax, r10; mov rdx, r11; ret; 
0x000000000002f4d0: mov rax, rdi; lea rdx, [rip + 0x35606]; ret; 
0x000000000004ad20: mov rax, rdi; lea rdx, [rip - 0x10aa]; ret; 
0x000000000000e8e0: mov rax, rdi; mov qword ptr [rdi + 8], rsi; mov qword ptr [rdi + 0x10], rdx; mov qword ptr [rdi], 0; ret; 
0x000000000000e900: mov rax, rdi; mov qword ptr [rdi + 8], rsi; mov qword ptr [rdi + 0x10], rdx; mov qword ptr [rdi], 1; ret; 
0x000000000000a220: mov rax, rdi; mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000000e58c: mov rax, rdi; mov qword ptr [rsp + 0x10], rax; call qword ptr [rip + 0x586fe]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000afc4: mov rax, rdi; mov qword ptr [rsp + 8], rax; call 0xda20; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000010431: mov rax, rdi; mov qword ptr [rsp], rax; call 0xd0c0; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000deb1: mov rax, rdi; mov qword ptr [rsp], rax; call 0xe450; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000b394: mov rax, rdi; mov qword ptr [rsp], rax; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax]; call rax; 
0x000000000000be91: mov rax, rdi; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xb150; pop rcx; ret; 
0x000000000003f53f: mov rax, rdi; pop rcx; ret; 
0x0000000000011213: mov rax, rdi; ret; 
0x000000000004efa3: mov rax, rdx; and al, 1; pop rcx; ret; 
0x0000000000049b6f: mov rax, rdx; neg rax; and rax, rcx; ret; 
0x000000000001cb6b: mov rax, rdx; not rax; shr rax, 0x3f; ret; 
0x000000000003fc59: mov rax, rsi; mov rdx, rcx; pop rcx; ret; 
0x0000000000034ca8: mov rbp, qword ptr [rsp + 0x40]; mov rdi, rbp; xor esi, esi; mov rdx, qword ptr [rsp + 0x38]; call rbx; 
0x000000000001fc49: mov rbp, r9; call rbx; 
0x000000000003cf98: mov rbx, qword ptr [rdi]; mov rdi, qword ptr [rbx + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x0000000000030a41: mov rbx, qword ptr [rip + 0x36170]; mov edx, 0x90; call rbx; 
0x0000000000032e77: mov rbx, qword ptr [rsp + 0x10]; mov rax, rbx; add rsp, 0x70; pop rbx; ret; 
0x00000000000287ec: mov rbx, rax; dec qword ptr [rax - 8]; mov rdi, r14; call qword ptr [rbp]; 
0x000000000002ec37: mov rbx, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000004aa81: mov rbx, rdi; call 0x4a960; mov rax, rbx; pop rbx; ret; 
0x000000000004a0f1: mov rbx, rdi; dec rdx; call qword ptr [rip + 0x1ce73]; mov rax, rbx; pop rbx; ret; 
0x0000000000032978: mov rbx, rdi; mov eax, esi; lea rcx, [rip + 0x1f0b8]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004b957: mov rbx, rdi; mov r13, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000003cf34: mov rbx, rdi; mov rdi, qword ptr [rdi + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000004ba64: mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000004bbf7: mov rbx, rdi; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x971c]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004b917: mov rbx, rdi; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rsi, rdx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x000000000000a48a: mov rcx, qword ptr [rax + 0x10]; call 0xa240; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000004b897: mov rcx, qword ptr [rcx + 0x18]; mov rdi, rax; jmp rcx; 
0x000000000004edd3: mov rcx, qword ptr [rcx + 0x18]; mov rsi, rax; jmp rcx; 
0x000000000004c3d7: mov rcx, qword ptr [rcx + 0x20]; mov esi, eax; pop rax; jmp rcx; 
0x000000000004bc37: mov rcx, qword ptr [rcx + 0x20]; mov rdi, rax; jmp rcx; 
0x000000000003c6e3: mov rcx, qword ptr [rdi + 0x18]; mov rdi, rax; xor r8d, r8d; call qword ptr [rip + 0x2a585]; pop rbx; ret; 
0x000000000004b893: mov rcx, qword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rdi, rax; jmp rcx; 
0x000000000004bc33: mov rcx, qword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov rdi, rax; jmp rcx; 
0x000000000003d098: mov rcx, qword ptr [rdi + 8]; mov rdi, rax; call qword ptr [rcx + 0x18]; 
0x000000000001e373: mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; mov qword ptr [rdi], rax; ret; 
0x000000000004edcf: mov rcx, qword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rsi, rax; jmp rcx; 
0x000000000004c3d3: mov rcx, qword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov esi, eax; pop rax; jmp rcx; 
0x000000000000d417: mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000004af51: mov rcx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000004a428: mov rcx, qword ptr [rsp + 0x18]; mov byte ptr [rcx], al; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000000b053: mov rcx, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x20]; mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; add rsp, 0x30; ret; 
0x000000000000fb1c: mov rcx, qword ptr [rsp + 0x20]; call 0xf080; add rsp, 0x28; ret; 
0x000000000000da08: mov rcx, qword ptr [rsp + 0x30]; mov qword ptr [rax + 0x10], rcx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000001088c: mov rcx, qword ptr [rsp + 0x30]; mov qword ptr [rdi + 0x30], rcx; mov rcx, qword ptr [rsp + 0x38]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x0000000000010895: mov rcx, qword ptr [rsp + 0x38]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x000000000000d2ac: mov rcx, qword ptr [rsp + 0x38]; mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsp + 0x40]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x58; ret; 
0x000000000000d2b5: mov rcx, qword ptr [rsp + 0x40]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x58; ret; 
0x0000000000010663: mov rcx, qword ptr [rsp + 0x50]; mov qword ptr [rdi + 0x30], rcx; mov rcx, qword ptr [rsp + 0x58]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x80; ret; 
0x000000000001066c: mov rcx, qword ptr [rsp + 0x58]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x80; ret; 
0x000000000001d35b: mov rcx, qword ptr [rsp + 7]; mov qword ptr [rdi + 1], rax; mov qword ptr [rdi + 8], rcx; add rsp, 0x20; ret; 
0x000000000000d40e: mov rcx, qword ptr [rsp + 8]; mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000004edce: mov rcx, qword ptr ds:[rsi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rsi, rax; jmp rcx; 
0x000000000004c3d2: mov rcx, qword ptr ds:[rsi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov esi, eax; pop rax; jmp rcx; 
0x000000000004d23f: mov rcx, rsi; cmp rsi, rdi; jne 0x4d230; ret; 
0x000000000002db70: mov rdi, qword ptr [r12 - 1]; mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x000000000002b3c8: mov rdi, qword ptr [r12]; call rbx; 
0x000000000004a7fd: mov rdi, qword ptr [r12]; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x000000000004a822: mov rdi, qword ptr [r12]; mov rax, qword ptr [r12 + 8]; lea rsi, [rip + 0xaaed]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000002ba97: mov rdi, qword ptr [r14 - 1]; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x000000000004e35b: mov rdi, qword ptr [r14]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x6e69]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e341: mov rdi, qword ptr [r14]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x6fd3]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bae0: mov rdi, qword ptr [r14]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x96e4]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bac6: mov rdi, qword ptr [r14]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x984e]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000013c52: mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000004a932: mov rdi, qword ptr [r15]; mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xa892]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a912: mov rdi, qword ptr [r15]; mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xaa02]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000002f099: mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000000ba24: mov rdi, qword ptr [rax]; call 0xeda0; add rsp, 0x18; ret; 
0x000000000004e0d3: mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x723b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e0b7: mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x7258]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004b9df: mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x992f]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a772: mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0xab9c]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000011873: mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x000000000004aa9c: mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xa877]; mov edx, 1; jmp rax; 
0x000000000000b39b: mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax]; call rax; 
0x000000000000be94: mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xb150; pop rcx; ret; 
0x000000000000b92c: mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xecf0; add rsp, 0x18; ret; 
0x000000000000b94c: mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xee50; add rsp, 0x18; ret; 
0x000000000000b45f: mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xef00; add rsp, 0x18; ret; 
0x000000000000b3cf: mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xefc0; add rsp, 0x18; ret; 
0x000000000002ab67: mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000002bab9: mov rdi, qword ptr [rbp]; call rbx; 
0x000000000004a5fd: mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x00000000000345a9: mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x000000000004bbb9: mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x960a]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bb9e: mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x9775]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a9d3: mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xa941]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a9a5: mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xa963]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a657: mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xacac]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000004a621: mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xace0]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a60c: mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; mov rsi, r14; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000002f81a: mov rdi, qword ptr [rbx + 0x10]; mov rax, qword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x000000000003cf9b: mov rdi, qword ptr [rbx + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000002e64a: mov rdi, qword ptr [rbx + r13]; call rax; 
0x000000000001217a: mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003fdff: mov rdi, qword ptr [rdi + 0x10]; lea rsi, [rsp + 4]; call qword ptr [rip + 0x26c8a]; pop rcx; ret; 
0x000000000003f53b: mov rdi, qword ptr [rdi + 0x10]; mov rax, rdi; pop rcx; ret; 
0x000000000003cf37: mov rdi, qword ptr [rdi + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x0000000000015031: mov rdi, qword ptr [rdi]; call 0x11bc0; xor eax, eax; pop rcx; ret; 
0x0000000000014f41: mov rdi, qword ptr [rdi]; call 0x15d00; xor eax, eax; pop rcx; ret; 
0x000000000000b2e1: mov rdi, qword ptr [rdi]; call 0xb320; pop rcx; ret; 
0x000000000004b95f: mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x0000000000009ab7: mov rdi, qword ptr [rip + 0x5d542]; call 0x7080; call 0x9a30; mov byte ptr [rip + 0x5d569], 1; pop rbp; ret; 
0x000000000002fb3a: mov rdi, qword ptr [rsi + 0x10]; mov rax, qword ptr [rsi + 0x18]; call qword ptr [rax + 0x28]; 
0x000000000004e2cf: mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x79cf]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000004e04d: mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x7c22]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000004bbfa: mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x971c]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000034d62: mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000004ed60: mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x6f4b]; mov edx, 5; jmp rax; 
0x000000000004eff0: mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x711d]; mov edx, 0xb; jmp rax; 
0x0000000000049f70: mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xb2d3]; mov edx, 0xe; jmp rax; 
0x000000000004b91a: mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rsi, rdx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x000000000004edcc: mov rdi, qword ptr [rsi]; mov rcx, qword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rsi, rax; jmp rcx; 
0x000000000004c3d0: mov rdi, qword ptr [rsi]; mov rcx, qword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov esi, eax; pop rax; jmp rcx; 
0x00000000000111e0: mov rdi, qword ptr [rsp + 0x10]; lea rax, [rip - 0x77fc]; xor edx, edx; call rax; 
0x00000000000103f0: mov rdi, qword ptr [rsp + 0x10]; lea rdx, [rip + 0x535ec]; lea rax, [rip - 0x6e63]; mov esi, 0x100; call rax; 
0x000000000000e309: mov rdi, qword ptr [rsp + 0x10]; lea rdx, [rip + 0x5565b]; lea rax, [rip - 0x4d7c]; call rax; 
0x000000000004a546: mov rdi, qword ptr [rsp + 0x10]; lea rsi, [rip + 0xa76e]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000000d035: mov rdi, qword ptr [rsp + 0x10]; mov edx, 0x38; call 0x7078; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000000b283: mov rdi, qword ptr [rsp + 0x10]; mov esi, eax; call qword ptr [rip + 0x5b8a0]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000004aa58: mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; lea rsi, [rip + 0xa8ac]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a8bd: mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; lea rsi, [rip + 0xaa47]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a42f: mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x00000000000285a9: mov rdi, qword ptr [rsp + 0x110]; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x00000000000102ba: mov rdi, qword ptr [rsp + 0x18]; lea rax, [rip - 0x6e66]; call rax; 
0x000000000000a450: mov rdi, qword ptr [rsp + 0x20]; call 0xb2c0; add rsp, 0x28; ret; 
0x000000000000c475: mov rdi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x1e81f]; mov qword ptr [rsp + 0x70], rax; call rax; 
0x000000000000b52d: mov rdi, qword ptr [rsp + 0x28]; call 0x7060; ud2; lea rax, [rip - 0x1f20]; call rax; 
0x000000000000b86d: mov rdi, qword ptr [rsp + 0x28]; call 0x7060; ud2; lea rax, [rip - 0x2260]; call rax; 
0x000000000000f66c: mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip - 0x6228]; call rax; 
0x000000000000e193: mov rdi, qword ptr [rsp + 0x28]; lea rdx, [rip + 0x557b9]; lea rax, [rip - 0x4c06]; call rax; 
0x000000000004a717: mov rdi, qword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x30]; lea rsi, [rip + 0xabed]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000000c4b0: mov rdi, qword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000e162: mov rdi, qword ptr [rsp + 0x30]; lea rdx, [rip + 0x557d2]; lea rax, [rip - 0x4bd5]; call rax; 
0x000000000000c4e4: mov rdi, qword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c518: mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c54c: mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c580: mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000c5b4: mov rdi, qword ptr [rsp + 0x68]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x00000000000103b6: mov rdi, qword ptr [rsp + 8]; lea rdx, [rip + 0x5360e]; lea rax, [rip - 0x6e29]; mov esi, 0x100; call rax; 
0x000000000000e33a: mov rdi, qword ptr [rsp + 8]; lea rdx, [rip + 0x55642]; lea rax, [rip - 0x4dad]; call rax; 
0x000000000000cd6c: mov rdi, qword ptr [rsp + 8]; lea rsi, [rip + 0x56b28]; lea rax, [rip - 0x390f]; call rax; 
0x000000000004aefa: mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000004ade8: mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000004af4c: mov rdi, qword ptr [rsp + 8]; mov rcx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000000b2fe: mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [rsp + 0x10]; call 0xfc70; add rsp, 0x18; ret; 
0x000000000000b65e: mov rdi, qword ptr [rsp]; add rdi, 0x18; call 0xb6d0; add rsp, 0x18; ret; 
0x000000000000bc04: mov rdi, qword ptr [rsp]; add rdi, 0xa8; call 0xbd40; add rsp, 0x18; ret; 
0x000000000000b9de: mov rdi, qword ptr [rsp]; add rdi, 4; call 0xb7a0; pop rax; ret; 
0x000000000000b37d: mov rdi, qword ptr [rsp]; add rdi, 8; call 0xb9f0; pop rax; ret; 
0x000000000000b5fa: mov rdi, qword ptr [rsp]; call 0xb620; add rsp, 0x18; ret; 
0x000000000000b6fa: mov rdi, qword ptr [rsp]; call 0xb7c0; add rsp, 0x18; ret; 
0x000000000000b74a: mov rdi, qword ptr [rsp]; call 0xb920; add rsp, 0x18; ret; 
0x000000000000b98a: mov rdi, qword ptr [rsp]; call 0xb9c0; add rsp, 0x18; ret; 
0x000000000000bc5a: mov rdi, qword ptr [rsp]; call 0xbcf0; add rsp, 0x18; ret; 
0x000000000000c16a: mov rdi, qword ptr [rsp]; lea rax, [rip + 0x1eb2b]; call rax; 
0x000000000000aad3: mov rdi, qword ptr [rsp]; mov rsi, rax; call 0xa8d0; mov rax, qword ptr [rsp + 8]; add rsp, 0xd8; ret; 
0x000000000004ed3e: mov rdi, r10; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x17b4a]; add rsp, 0x28; ret; 
0x000000000004ec0e: mov rdi, r10; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x17c7a]; add rsp, 0x28; ret; 
0x000000000004eae5: mov rdi, r10; xor ecx, ecx; call qword ptr [rip + 0x17da8]; add rsp, 0x30; pop rbx; ret; 
0x000000000002b27a: mov rdi, r12; call rbx; 
0x0000000000020355: mov rdi, r12; mov rsi, qword ptr [rsp + 0x168]; call rbx; 
0x000000000004a22c: mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000021d5d: mov rdi, r13; mov rsi, qword ptr [rsp + 0x1b8]; call rbx; 
0x00000000000287f6: mov rdi, r14; call qword ptr [rbp]; 
0x0000000000045eae: mov rdi, r14; call qword ptr [rip + 0x209f9]; add rsp, 0x68; pop rbx; pop r14; ret; 
0x000000000002da70: mov rdi, r14; call rax; 
0x000000000003963c: mov rdi, r14; lea rbx, [rip - 0x28206]; call rbx; 
0x0000000000020344: mov rdi, r14; lea rbx, [rip - 0xef0e]; call rbx; 
0x0000000000030a56: mov rdi, r15; add rdi, 8; lea rsi, [rsp + 0xb0]; mov edx, 0xa8; call rbx; 
0x000000000002ec5d: mov rdi, r15; call qword ptr [rip + 0x37b9a]; mov r15, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000002ec2e: mov rdi, r15; call qword ptr [rip + 0x37bc9]; mov rbx, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000002f7ef: mov rdi, r15; call rax; 
0x0000000000021d4c: mov rdi, r15; lea rbx, [rip - 0x10916]; call rbx; 
0x000000000004b195: mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000004a704: mov rdi, r15; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000004b3ac: mov rdi, r15; mov rsi, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x20]; call qword ptr [rbp + 0x18]; 
0x000000000003964d: mov rdi, r15; mov rsi, qword ptr [rsp + 0x550]; call rbx; 
0x000000000004a640: mov rdi, r15; mov rsi, rbp; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x00000000000281e5: mov rdi, r15; xor edx, edx; call rbp; cmp eax, -1; jne 0x282b8; call rbx; 
0x000000000002ddc8: mov rdi, rax; call 0x2e160; add rsp, 0x18; ret; 
0x000000000003d09c: mov rdi, rax; call qword ptr [rcx + 0x18]; 
0x000000000002ec3a: mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000004ad57: mov rdi, rax; call qword ptr [rip + 0x1c1b8]; add rsp, 0x38; ret; 
0x0000000000049c6d: mov rdi, rax; call qword ptr [rip + 0x1d22a]; add rsp, 0x18; ret; 
0x000000000003038e: mov rdi, rax; call qword ptr [rip + 0x36541]; pop rcx; ret; 
0x000000000001e349: mov rdi, rax; call qword ptr [rip + 0x48586]; pop rcx; ret; 
0x000000000001e324: mov rdi, rax; call qword ptr [rip + 0x485ab]; pop rcx; ret; 
0x000000000004b89b: mov rdi, rax; jmp rcx; 
0x000000000000cb1f: mov rdi, rax; lea rsi, [rip + 0x56d27]; call 0xced0; add rsp, 0x128; ret; 
0x000000000004b8c7: mov rdi, rax; mov rsi, rcx; call qword ptr [rip + 0x1b645]; add rsp, 0x38; ret; 
0x000000000002555e: mov rdi, rax; shl rdi, 5; lea rbx, [rip - 0x1413c]; mov esi, 8; mov qword ptr [rsp + 0x1b0], rdi; call rbx; 
0x0000000000038ea7: mov rdi, rax; shl rdi, 5; mov esi, 8; mov qword ptr [rsp + 0x550], rdi; lea rbx, [rip - 0x27a92]; call rbx; 
0x000000000003c6e7: mov rdi, rax; xor r8d, r8d; call qword ptr [rip + 0x2a585]; pop rbx; ret; 
0x000000000002bac9: mov rdi, rbp; call rbx; 
0x000000000004b119: mov rdi, rbp; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x0000000000034cb9: mov rdi, rbp; mov esi, 1; xor edx, edx; call rbx; 
0x000000000004b384: mov rdi, rbp; mov rsi, qword ptr [rsp + 0x10]; mov rdx, r15; call qword ptr [rbx + 0x18]; 
0x0000000000034cad: mov rdi, rbp; xor esi, esi; mov rdx, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000028a0d: mov rdi, rbx; call qword ptr [rip + 0x3e582]; add rsp, 0x10; pop rbx; ret; 
0x00000000000348a9: mov rdi, rbx; mov eax, edi; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x000000000004bc67: mov rdi, rbx; mov esi, 0x22; mov qword ptr [rsp + 0x38], rax; call rax; 
0x000000000004c089: mov rdi, rbx; mov esi, 0x27; mov r13, rax; call rax; 
0x000000000004bff9: mov rdi, rbx; mov rdx, r13; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x000000000004be42: mov rdi, rbx; mov rsi, rbp; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x000000000004e8a8: mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x17fe2]; add rsp, 0x88; ret; 
0x000000000004e6c8: mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x181c2]; add rsp, 0x88; ret; 
0x000000000004e628: mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x18262]; add rsp, 0x88; ret; 
0x000000000004e595: mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x182f5]; add rsp, 0x88; ret; 
0x000000000004e505: mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x18385]; add rsp, 0x88; ret; 
0x000000000004e473: mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x18417]; add rsp, 0x88; ret; 
0x000000000004e3e3: mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x184a7]; add rsp, 0x88; ret; 
0x000000000004e9aa: mov rdi, rsi; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x17ede]; add rsp, 0x28; ret; 
0x000000000004e8fc: mov rdi, rsi; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x17f8c]; add rsp, 0x88; ret; 
0x000000000004c488: mov rdi, rsi; mov rsi, rax; call qword ptr [rip + 0x1aabc]; pop rcx; ret; 
0x00000000000294e8: mov rdi, rsp; call 0x13b70; mov rax, rbx; add rsp, 0x1b0; pop rbx; ret; 
0x000000000000dcc6: mov rdi, rsp; call 0xb410; add rsp, 0xa8; ret; 
0x000000000002a485: mov rdi, rsp; call qword ptr [rip + 0x3c7a2]; pop rcx; ret; 
0x000000000002b3c4: mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [r12]; call rbx; 
0x000000000002bab5: mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000004af5a: mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000003f537: mov rdx, qword ptr [rdi + 0x18]; mov rdi, qword ptr [rdi + 0x10]; mov rax, rdi; pop rcx; ret; 
0x000000000004d7b4: mov rdx, qword ptr [rdi + 0x18]; ret; 
0x0000000000045d64: mov rdx, qword ptr [rdi + 0x28]; ret; 
0x000000000001cb3d: mov rdx, qword ptr [rdi + 8]; mov eax, 1; ret; 
0x000000000001cb67: mov rdx, qword ptr [rdi + 8]; mov rax, rdx; not rax; shr rax, 0x3f; ret; 
0x000000000000a543: mov rdx, qword ptr [rdi + 8]; ret; 
0x000000000003db49: mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x000000000000d488: mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000a529: mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000000b13c: mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x30; ret; 
0x000000000000fad1: mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x0000000000011042: mov rdx, qword ptr [rsp + 0x10]; call 0x101b0; add rsp, 0x18; ret; 
0x000000000000a988: mov rdx, qword ptr [rsp + 0x10]; call 0x105b0; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000000ce2c: mov rdx, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x000000000000b175: mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x000000000000f256: mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000000d912: mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rcx], rdx; add rsp, 0x38; ret; 
0x000000000000fb17: mov rdx, qword ptr [rsp + 0x18]; mov rcx, qword ptr [rsp + 0x20]; call 0xf080; add rsp, 0x28; ret; 
0x000000000000b1d6: mov rdx, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x26149]; lea rdi, [rsp + 0x38]; call rax; 
0x00000000000113b1: mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x38; ret; 
0x000000000004b3b4: mov rdx, qword ptr [rsp + 0x20]; call qword ptr [rbp + 0x18]; 
0x000000000000ecd6: mov rdx, qword ptr [rsp + 0x28]; add rsp, 0x98; ret; 
0x00000000000111f7: mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x000000000000f2ed: mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x58; ret; 
0x00000000000105a4: mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x68; ret; 
0x000000000000f0c5: mov rdx, qword ptr [rsp + 0x30]; call qword ptr [rip + 0x579b0]; add rsp, 0x38; ret; 
0x000000000000a90e: mov rdx, qword ptr [rsp + 0x38]; call 0xa570; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x0000000000034cb2: mov rdx, qword ptr [rsp + 0x38]; call rbx; 
0x000000000000d858: mov rdx, qword ptr [rsp + 0x38]; mov qword ptr [rcx + 0x18], rdx; add rsp, 0xb0; ret; 
0x000000000000e9ef: mov rdx, qword ptr [rsp + 0x50]; mov qword ptr [rcx + 0x20], rdx; add rsp, 0x88; ret; 
0x000000000000d1b0: mov rdx, qword ptr [rsp + 0x78]; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x98; ret; 
0x000000000000f4a5: mov rdx, qword ptr [rsp + 0x80]; add rsp, 0xf8; ret; 
0x000000000000dbbd: mov rdx, qword ptr [rsp + 0xc8]; mov qword ptr [rcx + 8], rdx; mov rdx, qword ptr [rsp + 0xd0]; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x138; ret; 
0x000000000000dbc9: mov rdx, qword ptr [rsp + 0xd0]; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x138; ret; 
0x000000000000a7b1: mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000000a81b: mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000cc8c: mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000110f5: mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000d359: mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000000fdcb: mov rdx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0xb8; ret; 
0x000000000000ff7b: mov rdx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0xe8; ret; 
0x000000000004f085: mov rdx, r11; ret; 
0x000000000004a617: mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000004bffc: mov rdx, r13; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x0000000000008301: mov rdx, r14; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000003d06b: mov rdx, r14; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000018e94: mov rdx, r14; pop rbx; pop r14; pop r15; ret; 
0x000000000004b38c: mov rdx, r15; call qword ptr [rbx + 0x18]; 
0x0000000000032900: mov rdx, rbx; add rsp, 0x88; pop rbx; pop r14; ret; 
0x00000000000465ab: mov rdx, rbx; and r8d, 3; lea rax, [rip + 0xe397]; movsxd rbx, dword ptr [rax + r8*4]; add rbx, rax; jmp rbx; 
0x000000000004c672: mov rdx, rcx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004b924: mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x000000000003fc5c: mov rdx, rcx; pop rcx; ret; 
0x000000000003d19a: mov rdx, rcx; ret; 
0x00000000000493aa: mov rdx, rsi; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x0000000000011210: mov rdx, rsi; mov rax, rdi; ret; 
0x000000000004f15e: mov rdx, rsi; ret; 
0x000000000004ee07: mov rdx, rsp; call qword ptr [rip + 0x18108]; add rsp, 0x38; ret; 
0x000000000004ad54: mov rdx, rsp; mov rdi, rax; call qword ptr [rip + 0x1c1b8]; add rsp, 0x38; ret; 
0x000000000004b8c4: mov rdx, rsp; mov rdi, rax; mov rsi, rcx; call qword ptr [rip + 0x1b645]; add rsp, 0x38; ret; 
0x000000000000e005: mov rsi, qword ptr [rax + 0x28]; call 0xe900; mov rax, qword ptr [rsp + 0x70]; add rsp, 0x108; ret; 
0x000000000000be97: mov rsi, qword ptr [rax + 8]; call 0xb150; pop rcx; ret; 
0x000000000000b92f: mov rsi, qword ptr [rax + 8]; call 0xecf0; add rsp, 0x18; ret; 
0x000000000000b94f: mov rsi, qword ptr [rax + 8]; call 0xee50; add rsp, 0x18; ret; 
0x000000000000b462: mov rsi, qword ptr [rax + 8]; call 0xef00; add rsp, 0x18; ret; 
0x000000000000b3d2: mov rsi, qword ptr [rax + 8]; call 0xefc0; add rsp, 0x18; ret; 
0x000000000004af56: mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000002c6b0: mov rsi, qword ptr [rbx + 8]; mov edi, 6; lea rax, [rip + 0x252bc]; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x000000000004af04: mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000004adf2: mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000000b303: mov rsi, qword ptr [rsp + 0x10]; call 0xfc70; add rsp, 0x18; ret; 
0x00000000000102b5: mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; lea rax, [rip - 0x6e66]; call rax; 
0x000000000004b3af: mov rsi, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x20]; call qword ptr [rbp + 0x18]; 
0x000000000004b387: mov rsi, qword ptr [rsp + 0x10]; mov rdx, r15; call qword ptr [rbx + 0x18]; 
0x0000000000020358: mov rsi, qword ptr [rsp + 0x168]; call rbx; 
0x000000000000b01e: mov rsi, qword ptr [rsp + 0x18]; call 0xb490; add rsp, 0x38; ret; 
0x000000000000b0ae: mov rsi, qword ptr [rsp + 0x18]; call 0xb7d0; add rsp, 0x38; ret; 
0x0000000000021d60: mov rsi, qword ptr [rsp + 0x1b8]; call rbx; 
0x0000000000011277: mov rsi, qword ptr [rsp + 0x20]; call 0xd370; add rsp, 0x28; ret; 
0x000000000000b1db: mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x26149]; lea rdi, [rsp + 0x38]; call rax; 
0x000000000000f667: mov rsi, qword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip - 0x6228]; call rax; 
0x000000000000e304: mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x10]; lea rdx, [rip + 0x5565b]; lea rax, [rip - 0x4d7c]; call rax; 
0x000000000000e15d: mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x30]; lea rdx, [rip + 0x557d2]; lea rax, [rip - 0x4bd5]; call rax; 
0x000000000000e18e: mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x28]; lea rdx, [rip + 0x557b9]; lea rax, [rip - 0x4c06]; call rax; 
0x000000000000e335: mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 8]; lea rdx, [rip + 0x55642]; lea rax, [rip - 0x4dad]; call rax; 
0x0000000000039650: mov rsi, qword ptr [rsp + 0x550]; call rbx; 
0x000000000000c970: mov rsi, qword ptr [rsp + 8]; lea rax, [rip + 0x20c14]; lea rdi, [rsp + 0x90]; call rax; 
0x000000000004a614: mov rsi, r14; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000000aad7: mov rsi, rax; call 0xa8d0; mov rax, qword ptr [rsp + 8]; add rsp, 0xd8; ret; 
0x000000000004c48b: mov rsi, rax; call qword ptr [rip + 0x1aabc]; pop rcx; ret; 
0x00000000000285a0: mov rsi, rax; call qword ptr [rip + 0x3e3cf]; mov rdi, qword ptr [rsp + 0x110]; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x000000000004edd7: mov rsi, rax; jmp rcx; 
0x000000000004be45: mov rsi, rbp; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x000000000004a643: mov rsi, rbp; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000004b8ca: mov rsi, rcx; call qword ptr [rip + 0x1b645]; add rsp, 0x38; ret; 
0x000000000004b921: mov rsi, rdx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x000000000002ddc5: mov rsi, rsp; mov rdi, rax; call 0x2e160; add rsp, 0x18; ret; 
0x0000000000046eca: mov si, 0x400; mov cx, 1; lea rdx, [rip + 0xdaeb]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000001c867: mov word ptr [r14 + 8], dx; mov qword ptr [r14], 0x26; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001fdf9: mov word ptr [rax + rdi*2], fs; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rsi; inc byte ptr [rbp + 0x31]; jmp qword ptr [rsi + 0x2e]; 
0x000000000003724f: mov word ptr [rax + rdi], fs; add al, 0; add byte ptr [rcx], dh; rol byte ptr [rax + 0xf084979], cl; xchg eax, esp; ret 0x8b48; 
0x000000000003bc0a: mov word ptr [rax - 0x77], cs; ret; 
0x0000000000008b94: mov word ptr [rcx + rax - 0x1f], cs; jmp rcx; 
0x000000000001cf55: mov word ptr [rdi + 5], 0; mov qword ptr [rdi + 8], rax; add rsp, 0x18; ret; 
0x000000000001d170: mov word ptr [rdi + 6], 0; mov dword ptr [rdi + 2], 0; mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x000000000001e39a: mov word ptr [rdi + 8], cx; mov qword ptr [rdi], rax; ret; 
0x0000000000030b88: mov word ptr [rsi + 3], ds; add byte ptr [rax - 0x77], cl; ret; 
0x000000000000b24c: movabs al, byte ptr [0x1024448b480005b5]; add rsp, 0x18; ret; 
0x000000000000b28c: movabs al, byte ptr [0x1024448b480005b8]; add rsp, 0x18; ret; 
0x000000000000d041: movabs al, byte ptr [0x481824448b48ffff]; add esp, 0x38; ret; 
0x000000000001d3eb: movabs al, byte ptr [0x484b07c608578948]; add esp, 0x18; ret; 
0x000000000002bfe2: movabs al, byte ptr [0x592f3d8d48000000]; add al, byte ptr [rax]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x0000000000027644: movabs al, byte ptr [0xe83024448d4c0002]; call qword ptr [rbp - 1]; 
0x000000000000cb2a: movabs byte ptr [0x128c48148000003], al; add byte ptr [rax], al; ret; 
0x000000000000ce25: movabs byte ptr [0x8b48f2eb0b0fffff], al; push rsp; and al, 0x10; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x0000000000009b49: movabs dword ptr [0x28befffff9], eax; call rax; 
0x000000000000c2a9: movabs dword ptr [0x7c8d4800eb00000f], eax; and al, 0x38; call 0xb690; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x78; ret; 
0x000000000003cc61: movabs eax, dword ptr [0x894800eb0b0f0002]; ret; 
0x0000000000049f5b: movabs eax, dword ptr [0xa67eb84890000047]; add eax, 0x420b247d; insd dword ptr [rdi], dx; ret; 
0x000000000000c8a2: movabs eax, dword ptr [0xc824bc8d4800043d]; add byte ptr [rax], al; add byte ptr [rdx + 7], bh; call 0xb180; lea rax, [rip + 0x210e1]; call rax; 
0x00000000000116d0: movabs rax, 0x245dac89066f9f; ret; 
0x00000000000116f0: movabs rax, 0x6d420b247d05a67e; ret; 
0x00000000000116e0: movabs rax, 0x89a76c34a9f81ac8; ret; 
0x0000000000041949: movabs rdi, 0x48c93119731af980; shl eax, 0x20; or rax, rcx; ret; 
0x0000000000030127: movaps xmm0, xmmword ptr [rsp + 0xb0]; movups xmmword ptr [rsp + 0x10], xmm0; mov qword ptr [rsp], rsi; call qword ptr [rax + 0x20]; 
0x00000000000073a2: movaps xmm0, xmmword ptr [rsp]; movups xmmword ptr [rdi + rax*8], xmm0; add rsp, 0x20; pop rbx; ret; 
0x000000000004edfe: movaps xmmword ptr [rsp + 0x10], xmm1; movaps xmmword ptr [rsp], xmm0; mov rdx, rsp; call qword ptr [rip + 0x18108]; add rsp, 0x38; ret; 
0x000000000004ee03: movaps xmmword ptr [rsp], xmm0; mov rdx, rsp; call qword ptr [rip + 0x18108]; add rsp, 0x38; ret; 
0x000000000004ad50: movaps xmmword ptr [rsp], xmm0; mov rdx, rsp; mov rdi, rax; call qword ptr [rip + 0x1c1b8]; add rsp, 0x38; ret; 
0x000000000003162a: movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x0000000000026984: movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rcx], cl; ret 0xc148; 
0x0000000000008695: movsb byte ptr [rdi], byte ptr [rsi]; pop rbx; ret; 
0x000000000003c6f0: movsd dword ptr [rdi], dword ptr [rsi]; add al, byte ptr [rax]; pop rbx; ret; 
0x0000000000008721: movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000002c54e: movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x000000000004bea2: movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; mov esi, 0x5c; jmp rax; 
0x000000000001cc6c: movsxd rax, dword ptr [r9 + rax*4]; add rax, r9; jmp rax; 
0x000000000001ab45: movsxd rax, dword ptr [r9 + rcx*4]; add rax, r9; jmp rax; 
0x000000000001c261: movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000002c54f: movsxd rax, dword ptr [rbp + rcx*4]; add rax, r13; jmp rax; 
0x000000000001cc6d: movsxd rax, dword ptr [rcx + rax*4]; add rax, r9; jmp rax; 
0x0000000000009b30: movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000022619: movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor ebx, ebx; jmp rax; 
0x000000000004c33b: movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor r12d, r12d; mov ebp, edx; jmp rax; 
0x000000000004bec1: movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor r12d, r12d; mov r13d, r14d; jmp rax; 
0x000000000002ba3b: movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x000000000001ab46: movsxd rax, dword ptr [rcx + rcx*4]; add rax, r9; jmp rax; 
0x000000000004bea3: movsxd rax, dword ptr [rdi + rax*4]; add rax, r15; mov esi, 0x5c; jmp rax; 
0x000000000001c203: movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000046eda: movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000001ea79: movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x000000000003db3c: movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; lea rdx, [rip + 0x16427]; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x0000000000008722: movsxd rax, dword ptr [rsp + rax*4]; add rax, r12; jmp rax; 
0x00000000000303a1: movsxd rax, edi; mov qword ptr [rip + 0x36d5e], rax; mov qword ptr [rip + 0x36d5f], rsi; ret; 
0x00000000000465b9: movsxd rbx, dword ptr [rax + r8*4]; add rbx, rax; jmp rbx; 
0x00000000000465ba: movsxd rbx, dword ptr [rax + rax*4]; add rbx, rax; jmp rbx; 
0x0000000000008b91: movsxd rcx, dword ptr [r12 + rcx*4]; add rcx, r12; jmp rcx; 
0x000000000002750f: movsxd rcx, dword ptr [r14 + rdx*4]; add rcx, r14; jmp rcx; 
0x000000000001ed41: movsxd rcx, dword ptr [r8 + rbp*4]; add rcx, r8; jmp rcx; 
0x000000000001ed42: movsxd rcx, dword ptr [rax + rbp*4]; add rcx, r8; jmp rcx; 
0x0000000000019e6d: movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004c2ef: movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; mov edx, ebp; mov ebp, 0x110001; jmp rcx; 
0x000000000004c19c: movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; mov edx, r15d; jmp rcx; 
0x0000000000029b92: movsxd rcx, dword ptr [rax + rdi*4]; add rcx, rax; jmp rcx; 
0x00000000000324fd: movsxd rcx, dword ptr [rax - 0x77]; ret; 
0x000000000001ed68: movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000049fb4: movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000027510: movsxd rcx, dword ptr [rsi + rdx*4]; add rcx, r14; jmp rcx; 
0x0000000000008b92: movsxd rcx, dword ptr [rsp + rcx*4]; add rcx, r12; jmp rcx; 
0x000000000001d98e: movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x000000000001d98f: movsxd rdi, dword ptr [rax + rbx*4]; add rdi, r8; jmp rdi; 
0x0000000000042e34: movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x000000000002fb24: movsxd rdi, dword ptr [rcx + rdx*4]; add rdi, rcx; jmp rdi; 
0x000000000002b3a0: movsxd rdi, edi; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002c1ec: movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x000000000002c6c1: movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x000000000002c1ed: movsxd rdx, dword ptr [rax + rdx*4]; add rdx, r8; jmp rdx; 
0x000000000001e36b: movsxd rdx, dword ptr [rcx + rax*4]; add rdx, rcx; jmp rdx; 
0x0000000000033171: movsxd rdx, dword ptr [rcx + rdi*4]; add rdx, rcx; jmp rdx; 
0x000000000002c2f0: movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000002ca7d: movsxd rsi, dword ptr [r12 + rsi*4]; add rsi, r12; jmp rsi; 
0x000000000001dfbd: movsxd rsi, dword ptr [rbp + rsi*4]; add rsi, rbp; jmp rsi; 
0x000000000004c0c5: movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x000000000004c0c6: movsxd rsi, dword ptr [rcx + rdi*4]; add rsi, rcx; jmp rsi; 
0x000000000002343a: movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000002ca7e: movsxd rsi, dword ptr [rsp + rsi*4]; add rsi, r12; jmp rsi; 
0x000000000000cc45: movsxd rsi, edi; lea rdi, [rip - 0x10e]; xor ecx, ecx; call 0xd1f0; pop rcx; ret; 
0x000000000001cdb7: movups xmm0, xmmword ptr [r8 + 8]; movups xmmword ptr [rdi + 8], xmm0; mov qword ptr [rdi], 0; add rsp, 0x30; ret; 
0x000000000001cdb8: movups xmm0, xmmword ptr [rax + 8]; movups xmmword ptr [rdi + 8], xmm0; mov qword ptr [rdi], 0; add rsp, 0x30; ret; 
0x0000000000012088: movups xmm0, xmmword ptr [rdi]; movups xmmword ptr [rsi], xmm0; ret; 
0x000000000001e38a: movups xmm0, xmmword ptr [rsi + 8]; movups xmmword ptr [rdi + 8], xmm0; mov qword ptr [rdi], rax; ret; 
0x000000000000d8c9: movups xmm0, xmmword ptr [rsp + 0x28]; movups xmmword ptr [rcx], xmm0; add rsp, 0x58; ret; 
0x00000000000294bd: movups xmm0, xmmword ptr [rsp]; movups xmmword ptr [rbx], xmm0; mov rax, rbx; add rsp, 0x1b0; pop rbx; ret; 
0x000000000003db77: movups xmm0, xmmword ptr [rsp]; movups xmmword ptr [rdi], xmm0; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x0000000000041cf0: movups xmmword ptr [r14 + 0x10], xmm1; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000001c95e: movups xmmword ptr [r14 + 8], xmm0; mov qword ptr [r14], 8; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000041cec: movups xmmword ptr [r14], xmm0; movups xmmword ptr [r14 + 0x10], xmm1; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000002f394: movups xmmword ptr [rax], xmm0; lea rdx, [rip + 0x35722]; add rsp, 0x58; pop rbx; pop r14; ret; 
0x000000000003f4ba: movups xmmword ptr [rax], xmm0; mov qword ptr [rbx], 1; add rsp, 0x18; pop rbx; pop r14; ret; 
0x000000000004c54e: movups xmmword ptr [rbx + 0x10], xmm0; mov dword ptr [rbx + 0x30], ebp; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000045d32: movups xmmword ptr [rbx + 0x10], xmm1; movups xmmword ptr [rbx], xmm0; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x000000000003f4d6: movups xmmword ptr [rbx + rdi + 0x10], xmm0; inc qword ptr [rbx + 8]; add rsp, 0x18; pop rbx; pop r14; ret; 
0x000000000002f453: movups xmmword ptr [rbx], xmm0; lea rdx, [rip + 0x35663]; mov rax, rbx; add rsp, 0x50; pop rbx; ret; 
0x00000000000294c1: movups xmmword ptr [rbx], xmm0; mov rax, rbx; add rsp, 0x1b0; pop rbx; ret; 
0x0000000000045d36: movups xmmword ptr [rbx], xmm0; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x000000000000d8ce: movups xmmword ptr [rcx], xmm0; add rsp, 0x58; ret; 
0x000000000003f3c5: movups xmmword ptr [rdi + 0xc], xmm0; ret; 
0x000000000001cdbc: movups xmmword ptr [rdi + 8], xmm0; mov qword ptr [rdi], 0; add rsp, 0x30; ret; 
0x000000000001e38e: movups xmmword ptr [rdi + 8], xmm0; mov qword ptr [rdi], rax; ret; 
0x00000000000073a6: movups xmmword ptr [rdi + rax*8], xmm0; add rsp, 0x20; pop rbx; ret; 
0x000000000003db7b: movups xmmword ptr [rdi], xmm0; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000003f3c2: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0xc], xmm0; ret; 
0x000000000002806b: movups xmmword ptr [rdi], xmm0; pop rbx; pop r14; pop rbp; ret; 
0x0000000000041cf1: movups xmmword ptr [rsi + 0x10], xmm1; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000001c95f: movups xmmword ptr [rsi + 8], xmm0; mov qword ptr [r14], 8; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000041ced: movups xmmword ptr [rsi], xmm0; movups xmmword ptr [r14 + 0x10], xmm1; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000001208b: movups xmmword ptr [rsi], xmm0; ret; 
0x000000000003012f: movups xmmword ptr [rsp + 0x10], xmm0; mov qword ptr [rsp], rsi; call qword ptr [rax + 0x20]; 
0x000000000000d463: movzx eax, al; add rsp, 0x18; ret; 
0x0000000000010390: movzx eax, al; add rsp, 0x28; ret; 
0x000000000000fe89: movzx eax, al; add rsp, 0x48; ret; 
0x000000000000d20e: movzx eax, al; call qword ptr [rip + 0x59ac9]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000ce68: movzx eax, al; cmp rax, 0; jne 0xce7a; mov eax, dword ptr [rsp + 0x24]; add rsp, 0x48; ret; 
0x0000000000034d73: movzx eax, al; lea eax, [rax + rax*8]; add rsp, 0x28; ret; 
0x000000000002bd32: movzx eax, al; mov qword ptr [rip + 0x3b384], rax; mov eax, ebx; add rsp, 0x20; pop rbx; ret; 
0x000000000000bdbd: movzx eax, al; pop rcx; ret; 
0x000000000000e8d4: movzx eax, al; ret; 
0x000000000002cceb: movzx eax, byte ptr [rax]; lea rcx, [rip + 0x24ccf]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004a1c0: movzx eax, byte ptr [rdi + 0x20]; ret; 
0x000000000004b8f0: movzx eax, byte ptr [rdi + 0x30]; and al, 0x10; shr al, 4; ret; 
0x000000000004b900: movzx eax, byte ptr [rdi + 0x30]; and al, 0x20; shr al, 5; ret; 
0x000000000004b8e0: movzx eax, byte ptr [rdi + 0x30]; and al, 4; shr al, 2; ret; 
0x000000000004682b: movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + r10], al; pop rax; ret; 
0x0000000000046692: movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + rcx], al; pop rbx; ret; 
0x0000000000030c3b: movzx eax, byte ptr [rip + 0x364de]; lea rdx, [rip + 0x364cf]; lea rax, [rip + 0x364d1]; pop rcx; ret; 
0x000000000000d242: movzx eax, byte ptr [rsp + 7]; pop rcx; ret; 
0x000000000001cc34: movzx eax, cl; ret; 
0x000000000002833a: movzx eax, dh; lea rcx, [rip + 0x294d4]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000046b4e: movzx eax, dl; lea rcx, [rip + 0xde08]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000046b4d: movzx eax, r10b; lea rcx, [rip + 0xde08]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000028339: movzx eax, r14b; lea rcx, [rip + 0x294d4]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000a5a6: movzx eax, word ptr [rax + 0x21a]; pop rcx; ret; 
0x000000000002c54a: movzx ecx, byte ptr [r10]; movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x0000000000049fd4: movzx ecx, byte ptr [rdi + 0xc]; lea rsi, [rip + 0xafd9]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000002c54b: movzx ecx, byte ptr [rdx]; movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x000000000001e37f: movzx ecx, byte ptr [rsi + 8]; mov byte ptr [rdi + 8], cl; mov qword ptr [rdi], rax; ret; 
0x000000000002fa3b: movzx ecx, cl; lea rdx, [rip + 0x21f97]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000003fe75: movzx ecx, cl; mov qword ptr [rax], rcx; test cl, cl; je 0x3fe82; mov al, 1; ret; 
0x000000000003d358: movzx ecx, cx; lea rdx, [rcx + rax]; add rdx, -0x10; mov eax, 1; ret; 
0x000000000003d39d: movzx ecx, cx; lea rdx, [rcx + rax]; add rdx, 0x10; mov eax, 1; ret; 
0x000000000001e396: movzx ecx, word ptr [rsi + 8]; mov word ptr [rdi + 8], cx; mov qword ptr [rdi], rax; ret; 
0x0000000000013dc0: movzx edi, al; call rbx; 
0x000000000003d36d: movzx edx, ax; add rdx, rcx; mov eax, 1; ret; 
0x000000000003d270: movzx edx, ax; mov eax, 1; ret; 
0x000000000002c2e0: movzx edx, byte ptr [rcx]; mov eax, 6; lea rsi, [rip + 0x2565d]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000001cb4a: movzx edx, byte ptr [rdi + 8]; mov eax, 1; ret; 
0x000000000002fb19: movzx edx, cl; lea rcx, [rip + 0x21eed]; movsxd rdi, dword ptr [rcx + rdx*4]; add rdi, rcx; jmp rdi; 
0x000000000003d385: movzx edx, cx; add rdx, rax; mov eax, 1; ret; 
0x000000000001cb54: movzx edx, word ptr [rdi + 8]; mov eax, 1; ret; 
0x000000000002ca75: movzx esi, byte ptr [rdx]; mov edx, 6; movsxd rsi, dword ptr [r12 + rsi*4]; add rsi, r12; jmp rsi; 
0x000000000000d20d: movzx r8d, al; call qword ptr [rip + 0x59ac9]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000247f2: mul eax; add al, 0; add byte ptr [rdi], cl; xchg eax, ebp; ret 0xffbb; 
0x000000000000868d: mul esp; add eax, 0xc0854800; jle 0x863a; pop rbx; ret; 
0x0000000000049b73: neg eax; and rax, rcx; ret; 
0x000000000004178d: neg eax; mov qword ptr [rdi], r9; mov qword ptr [rdi + 8], r8; pop rbx; ret; 
0x000000000003f58e: neg ecx; mov rax, qword ptr [rdi + 0x18]; cmp rax, rcx; jae 0x3f5a2; mov qword ptr [rdi + 0x18], 0; ret; 
0x000000000004178c: neg r8; mov qword ptr [rdi], r9; mov qword ptr [rdi + 8], r8; pop rbx; ret; 
0x0000000000049b72: neg rax; and rax, rcx; ret; 
0x000000000003f58d: neg rcx; mov rax, qword ptr [rdi + 0x18]; cmp rax, rcx; jae 0x3f5a2; mov qword ptr [rdi + 0x18], 0; ret; 
0x000000000002a11b: nop dword ptr [rax + rax]; mov al, 1; ret; 
0x000000000000be5b: nop dword ptr [rax + rax]; mov edx, esi; mov eax, edi; ret; 
0x0000000000012c48: nop dword ptr [rax + rax]; mov qword ptr [rsi + 0x10], rdi; ret; 
0x000000000004d7a8: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi + 0x18]; ret; 
0x000000000004a198: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x10]; ret; 
0x000000000000a588: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; ret; 
0x000000000004d79b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; mov rdx, qword ptr [rdi + 8]; ret; 
0x000000000002f4c8: nop dword ptr [rax + rax]; mov rax, rdi; lea rdx, [rip + 0x35606]; ret; 
0x000000000001120b: nop dword ptr [rax + rax]; mov rdx, rsi; mov rax, rdi; ret; 
0x00000000000116eb: nop dword ptr [rax + rax]; movabs rax, 0x6d420b247d05a67e; ret; 
0x00000000000116db: nop dword ptr [rax + rax]; movabs rax, 0x89a76c34a9f81ac8; ret; 
0x000000000004b8eb: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi + 0x30]; and al, 0x10; shr al, 4; ret; 
0x000000000004b8fb: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi + 0x30]; and al, 0x20; shr al, 5; ret; 
0x000000000002a113: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov al, 1; ret; 
0x0000000000049163: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; ret; 
0x000000000000eb25: nop dword ptr [rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000033065: nop dword ptr [rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000004a1a7: nop dword ptr [rax + rax]; nop; mov rax, qword ptr [rdi + 0x18]; ret; 
0x000000000000a827: nop dword ptr [rax + rax]; nop; mov rax, qword ptr [rdi + 8]; ret; 
0x000000000004a1b7: nop dword ptr [rax + rax]; nop; movzx eax, byte ptr [rdi + 0x20]; ret; 
0x000000000003fbf7: nop dword ptr [rax + rax]; nop; ret; 
0x000000000000bceb: nop dword ptr [rax + rax]; push rax; call 0xfae0; pop rax; ret; 
0x000000000000b7bb: nop dword ptr [rax + rax]; push rax; call 0xfbd0; pop rax; ret; 
0x0000000000009a93: nop dword ptr [rax + rax]; ret; 
0x000000000000fc1b: nop dword ptr [rax + rax]; sub rsp, 0x18; call 0xb360; add rsp, 0x18; ret; 
0x000000000003f57b: nop dword ptr [rax + rax]; test rsi, rsi; js 0x3f58a; add qword ptr [rdi + 0x18], rsi; ret; 
0x000000000000be78: nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x000000000004b10d: nop dword ptr [rax]; dec r14; je 0x4b384; mov rdi, rbp; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x00000000000130bc: nop dword ptr [rax]; inc qword ptr [rdi + 0x10]; ret; 
0x0000000000033059: nop dword ptr [rax]; mov al, 1; ret; 
0x000000000002b26d: nop dword ptr [rax]; mov esi, 0x18; mov edx, 8; mov rdi, r12; call rbx; 
0x0000000000045d5c: nop dword ptr [rax]; mov rax, qword ptr [rdi + 0x20]; mov rdx, qword ptr [rdi + 0x28]; ret; 
0x000000000000a53d: nop dword ptr [rax]; mov rax, qword ptr [rdi]; mov rdx, qword ptr [rdi + 8]; ret; 
0x000000000004ad1c: nop dword ptr [rax]; mov rax, rdi; lea rdx, [rip - 0x10aa]; ret; 
0x000000000000e8fd: nop dword ptr [rax]; mov rax, rdi; mov qword ptr [rdi + 8], rsi; mov qword ptr [rdi + 0x10], rdx; mov qword ptr [rdi], 1; ret; 
0x000000000004d7b9: nop dword ptr [rax]; mov rdx, rsi; mov rax, rdi; ret; 
0x00000000000116cd: nop dword ptr [rax]; movabs rax, 0x245dac89066f9f; ret; 
0x0000000000030399: nop dword ptr [rax]; movsxd rax, edi; mov qword ptr [rip + 0x36d5e], rax; mov qword ptr [rip + 0x36d5f], rsi; ret; 
0x0000000000013dbd: nop dword ptr [rax]; movzx edi, al; call rbx; 
0x000000000000ff8d: nop dword ptr [rax]; push rax; call 0xfcd0; pop rcx; ret; 
0x000000000000beac: nop dword ptr [rax]; push rax; mov edi, dword ptr [rdi]; call qword ptr [rip + 0x5ac1f]; pop rax; ret; 
0x000000000000d1dc: nop dword ptr [rax]; push rax; mov qword ptr [rsp], rdi; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000f0ed: nop dword ptr [rax]; push rax; xor ecx, ecx; call 0xeb40; pop rcx; ret; 
0x0000000000009a51: nop dword ptr [rax]; ret; 
0x0000000000014eed: nop dword ptr [rax]; test dil, 1; jne 0x14efd; shr rdi, 8; mov eax, edi; ret; 
0x000000000003306d: nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000012c47: nop dword ptr cs:[rax + rax]; mov qword ptr [rsi + 0x10], rdi; ret; 
0x000000000002a112: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov al, 1; ret; 
0x0000000000049162: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; ret; 
0x000000000000eb24: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000033064: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000004a1a6: nop dword ptr cs:[rax + rax]; nop; mov rax, qword ptr [rdi + 0x18]; ret; 
0x000000000000a826: nop dword ptr cs:[rax + rax]; nop; mov rax, qword ptr [rdi + 8]; ret; 
0x000000000004a1b6: nop dword ptr cs:[rax + rax]; nop; movzx eax, byte ptr [rdi + 0x20]; ret; 
0x000000000003fbf6: nop dword ptr cs:[rax + rax]; nop; ret; 
0x000000000000a587: nop word ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; ret; 
0x000000000004b8ea: nop word ptr [rax + rax]; movzx eax, byte ptr [rdi + 0x30]; and al, 0x10; shr al, 4; ret; 
0x000000000004b8fa: nop word ptr [rax + rax]; movzx eax, byte ptr [rdi + 0x30]; and al, 0x20; shr al, 5; ret; 
0x0000000000009a92: nop word ptr [rax + rax]; ret; 
0x0000000000012c46: nop word ptr cs:[rax + rax]; mov qword ptr [rsi + 0x10], rdi; ret; 
0x000000000002a111: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov al, 1; ret; 
0x0000000000049161: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; ret; 
0x000000000000eb23: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000033063: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000004a1a5: nop word ptr cs:[rax + rax]; nop; mov rax, qword ptr [rdi + 0x18]; ret; 
0x000000000000a825: nop word ptr cs:[rax + rax]; nop; mov rax, qword ptr [rdi + 8]; ret; 
0x000000000004a1b5: nop word ptr cs:[rax + rax]; nop; movzx eax, byte ptr [rdi + 0x20]; ret; 
0x000000000003fbf5: nop word ptr cs:[rax + rax]; nop; ret; 
0x000000000004c100: nop; add byte ptr [rax], al; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000002d996: nop; add eax, dword ptr [rax]; ud2; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x000000000002c1ef: nop; add rdx, r8; jmp rdx; 
0x000000000004aa8f: nop; cmp byte ptr [rdi + 8], 0; je 0x4aa99; mov al, 1; ret; 
0x00000000000135ef: nop; cmp dword ptr [rdi], 2; jae 0x135f6; ret; 
0x000000000001208f: nop; inc qword ptr [rdi]; ret; 
0x000000000000e8cf: nop; mov al, 1; and al, 1; movzx eax, al; ret; 
0x000000000001207f: nop; mov rax, qword ptr [rdi + 0x10]; mov qword ptr [rsi + 0x10], rax; movups xmm0, xmmword ptr [rdi]; movups xmmword ptr [rsi], xmm0; ret; 
0x000000000004a1af: nop; mov rax, qword ptr [rdi + 0x18]; ret; 
0x000000000000a82f: nop; mov rax, qword ptr [rdi + 8]; ret; 
0x000000000004bc2f: nop; mov rax, qword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov rdi, rax; jmp rcx; 
0x000000000001e35f: nop; mov rax, qword ptr [rsi]; lea rcx, [rip + 0x32ff2]; movsxd rdx, dword ptr [rcx + rax*4]; add rdx, rcx; jmp rdx; 
0x000000000000a21f: nop; mov rax, rdi; mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000049f5f: nop; movabs rax, 0x6d420b247d05a67e; ret; 
0x000000000004a1bf: nop; movzx eax, byte ptr [rdi + 0x20]; ret; 
0x000000000000b8ff: nop; push rax; call 0x9fb0; pop rax; ret; 
0x000000000000a59f: nop; push rax; call 0xa590; movzx eax, word ptr [rax + 0x21a]; pop rcx; ret; 
0x000000000000b76f: nop; push rax; call 0xb790; pop rax; ret; 
0x000000000000b9af: nop; push rax; call 0xb960; pop rax; ret; 
0x000000000000b2bf: nop; push rax; call 0xbcc0; pop rax; ret; 
0x000000000000be6f: nop; push rax; call 0xd1e0; pop rcx; ret; 
0x000000000000b5bf: nop; push rax; call 0xd5f0; pop rax; ret; 
0x000000000000b61f: nop; push rax; call 0xfb80; pop rax; ret; 
0x000000000000bc7f: nop; push rax; call qword ptr [rip + 0x5ad09]; pop rax; ret; 
0x000000000000b35f: nop; push rax; call rdi; 
0x000000000000b35f: nop; push rax; call rdi; pop rax; ret; 
0x000000000000f0df: nop; push rax; mov ecx, 1; call 0xeb40; pop rcx; ret; 
0x0000000000049e3e: nop; ret 0xc383; 
0x000000000004e27b: nop; ret 0xc783; 
0x000000000003fbff: nop; ret; 
0x000000000002a18f: nop; xor eax, eax; ret; 
0x000000000001cb6f: not eax; shr rax, 0x3f; ret; 
0x000000000001cb6e: not rax; shr rax, 0x3f; ret; 
0x000000000001ef49: or al, 0; add byte ptr [rcx - 0x44], al; add byte ptr ss:[rax], al; add cl, ch; ret 0xfffb; 
0x0000000000049fea: or al, 0; mov eax, 0x7d; ret; 
0x000000000003d23c: or al, 0x16; inc rcx; inc rdx; cmp rcx, r8; jb 0x3d230; ret; 
0x000000000000cc81: or al, 0x24; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000110ea: or al, 0x24; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000d34e: or al, 0x24; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x0000000000049b6a: or al, 0x32; dec rcx; mov rax, rdx; neg rax; and rax, rcx; ret; 
0x00000000000100f7: or al, 0x48; add esp, 0x18; ret; 
0x0000000000049fd7: or al, 0x48; lea esi, [rip + 0xafd9]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000001d118: or al, 0x48; mov dword ptr [rdi + 8], edx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x0000000000041b7d: or al, 0x4c; mov dword ptr [rbx + 0x20], esi; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000041f83: or al, 0x80; ret 0xeba9; 
0x0000000000019e6e: or al, 0x88; add rcx, rax; jmp rcx; 
0x000000000004c2f0: or al, 0x88; add rcx, rax; mov edx, ebp; mov ebp, 0x110001; jmp rcx; 
0x000000000004c19d: or al, 0x88; add rcx, rax; mov edx, r15d; jmp rcx; 
0x000000000001e2c1: or al, 0x89; push rbp; or dword ptr [rax - 0x76b7f7b3], ecx; adc r9b, r13b; idiv di; jmp qword ptr [rsi + 0x2e]; 
0x000000000001ed69: or al, 0x8a; add rcx, rdx; jmp rcx; 
0x0000000000008b93: or al, 0x8c; add rcx, r12; jmp rcx; 
0x0000000000049fb5: or al, 0x8e; add rcx, rsi; jmp rcx; 
0x0000000000027511: or al, 0x96; add rcx, r14; jmp rcx; 
0x000000000001ed43: or al, 0xa8; add rcx, r8; jmp rcx; 
0x0000000000029b93: or al, 0xb8; add rcx, rax; jmp rcx; 
0x000000000000beec: or al, 0xc6; and al, 7; add ebx, ebp; add eax, 0x72444c6; add cl, byte ptr [rdx + 0x59072444]; ret; 
0x00000000000100ec: or al, 0xf6; and al, 0x17; add dword ptr [rbp + 9], esi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x000000000004a03b: or al, 1; ret; 
0x000000000004a01d: or al, 2; mov eax, 0x7b; ret; 
0x000000000004a027: or al, 3; mov eax, 0x75; ret; 
0x000000000004a031: or al, 4; mov eax, 0x5c; ret; 
0x000000000000b7c2: or al, byte ptr [rax + rax]; pop rax; ret; 
0x000000000001254d: or al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret; 
0x0000000000036199: or al, byte ptr [rbx]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000004cdf5: or al, byte ptr [rbx]; ror byte ptr [rdi], 0x9d; ret 0x148; 
0x0000000000043677: or al, byte ptr [rcx]; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000004cdcd: or al, byte ptr [rcx]; ror byte ptr [rdi], 0x9d; ret 0x148; 
0x000000000004cde1: or al, byte ptr [rdx]; ror byte ptr [rdi], 0x9d; ret 0x148; 
0x000000000004ce31: or al, byte ptr [rsi]; ror byte ptr [rdi], 0x9d; ret 0x148; 
0x0000000000007ebb: or al, ch; fisttp word ptr [rsi]; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x000000000000b3d5: or al, ch; in eax, 0x3b; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000000b932: or al, ch; mov eax, 0x48000033; add esp, 0x18; ret; 
0x000000000000afcb: or al, ch; sub r8b, byte ptr [r8]; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x18; ret; 
0x000000000004ee7b: or al, cl; ret; 
0x0000000000041840: or al, dh; add dword ptr [r8], r8d; mov al, 1; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000002ec5a: or bl, ch; cmp cl, byte ptr [rcx + rcx*4 - 1]; call qword ptr [rip + 0x37b9a]; mov r15, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000002fb37: or bl, ch; or byte ptr [rax - 0x75], cl; jle 0x2fb4e; mov rax, qword ptr [rsi + 0x18]; call qword ptr [rax + 0x28]; 
0x000000000002fb36: or bl, r13b; or byte ptr [rax - 0x75], cl; jle 0x2fb4e; mov rax, qword ptr [rsi + 0x18]; call qword ptr [rax + 0x28]; 
0x000000000001ce71: or byte ptr [r11], r10b; mov qword ptr [rdi + 0x10], rax; mov eax, 1; mov qword ptr [rdi], rax; add rsp, 0x30; ret; 
0x000000000001cd08: or byte ptr [r13 + 0x48], r8b; mov dword ptr [rdi], 1; add rsp, 0x30; ret; 
0x0000000000037259: or byte ptr [r15], cl; xchg eax, esp; ret 0x8b48; 
0x0000000000028117: or byte ptr [r15], r14b; mov qword ptr [rdi], 1; pop rbx; pop r14; pop rbp; ret; 
0x0000000000032fec: or byte ptr [r8 + 1], dil; mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000031006: or byte ptr [r8 + 1], dil; mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000004bbbf: or byte ptr [r8 - 0x73], r9b; xor eax, 0x960a; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bba4: or byte ptr [r8 - 0x73], r9b; xor eax, 0x9775; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a937: or byte ptr [r8 - 0x73], r9b; xor eax, 0xa892; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a9d9: or byte ptr [r8 - 0x73], r9b; xor eax, 0xa941; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a9ab: or byte ptr [r8 - 0x73], r9b; xor eax, 0xa963; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a917: or byte ptr [r8 - 0x73], r9b; xor eax, 0xaa02; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a65d: or byte ptr [r8 - 0x73], r9b; xor eax, 0xacac; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000004a627: or byte ptr [r8 - 0x73], r9b; xor eax, 0xace0; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000000f3a0: or byte ptr [r8 - 0x75], cl; push rcx; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000000d415: or byte ptr [r8 - 0x75], r9b; and al, 0x10; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000000d2b3: or byte ptr [r8 - 0x75], r9b; and al, 0x40; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x58; ret; 
0x0000000000025497: or byte ptr [r8 - 0x75], r9b; test byte ptr [rax], ah; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 - 0x7d], r9b; ret 0x4de0; 
0x000000000001e2c6: or byte ptr [r8 - 0x77], r9b; adc r9b, r13b; idiv di; jmp qword ptr [rsi + 0x2e]; 
0x000000000001ce87: or byte ptr [r8 - 0x77], r9b; push rdi; adc byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 7; add rsp, 0x30; ret; 
0x000000000002f7e2: or byte ptr [r8 - 0x7d], cl; jnp 0x2f7f8; add byte ptr [rcx - 0x75], cl; and byte ptr [rbp + 0x1c], r14b; mov rdi, r15; call rax; 
0x0000000000037afb: or byte ptr [r8 - 0x7d], r9b; ret 0x4de8; 
0x00000000000435ec: or byte ptr [r8], al; xor eax, eax; pop rbx; ret; 
0x0000000000041746: or byte ptr [r8], r8b; mov qword ptr [rdi], 0; pop rbx; ret; 
0x000000000004a22a: or byte ptr [r9 + r9*4 - 0x11], r9b; call qword ptr [rax + 0x18]; 
0x000000000004a612: or byte ptr [r9 + rcx*4 - 0xa], r9b; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000003ddf9: or byte ptr [r9 - 0x39], r9b; adc byte ptr [r9], r8b; add byte ptr [rax], al; add cl, ch; ret; 
0x0000000000021535: or byte ptr [r9 - 0x7d], r9b; ret 0x48f0; 
0x000000000001aeac: or byte ptr [r9], r14b; ror byte ptr [rax - 0x39], cl; ret; 
0x0000000000049fbe: or byte ptr [r9], r8b; add byte ptr [rcx], dl; add byte ptr [rax + 0x5c], bh; ret; 
0x0000000000032fce: or byte ptr [r9], sil; ror byte ptr [rax - 0x77], 3; mov rax, rbx; pop rbx; ret; 
0x0000000000030feb: or byte ptr [r9], sil; ror byte ptr [rax - 0x77], 3; pop rbx; ret; 
0x000000000001913a: or byte ptr [rax + 0x39], 0xc6; jne 0x19157; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001920a: or byte ptr [rax + 0x39], 0xc6; jne 0x19227; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000192da: or byte ptr [rax + 0x39], 0xc6; jne 0x192f7; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000193b9: or byte ptr [rax + 0x39], 0xc6; jne 0x193d6; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000019499: or byte ptr [rax + 0x39], 0xc6; jne 0x194b6; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001956d: or byte ptr [rax + 0x39], 0xc6; jne 0x1958a; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001963b: or byte ptr [rax + 0x39], 0xc6; jne 0x19658; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001970a: or byte ptr [rax + 0x39], 0xc6; jne 0x19727; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000197e8: or byte ptr [rax + 0x39], 0xc6; jne 0x19805; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000198c9: or byte ptr [rax + 0x39], 0xc6; jne 0x198e6; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000199a3: or byte ptr [rax + 0x39], 0xc6; jne 0x199c0; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000019a72: or byte ptr [rax + 0x39], 0xc6; jne 0x19a8f; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000003d4f2: or byte ptr [rax + 0x39], 0xc6; jne 0x3d50f; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000003da2d: or byte ptr [rax + 0x39], 0xc6; jne 0x3da4a; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000003dafa: or byte ptr [rax + 0x39], 0xc6; jne 0x3db17; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004924c: or byte ptr [rax + 0x39], 0xc6; jne 0x49269; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000007a89: or byte ptr [rax + 0x39], 0xc6; jne 0x7aa6; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000007b52: or byte ptr [rax + 0x39], 0xc6; jne 0x7b6f; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000007c2a: or byte ptr [rax + 0x39], 0xc6; jne 0x7c47; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000092f2: or byte ptr [rax + 0x39], 0xc6; jne 0x930f; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000000941c: or byte ptr [rax + 0x39], 0xc6; jne 0x9439; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000465bc: or byte ptr [rax + 1], 0xc3; jmp rbx; 
0x0000000000032fed: or byte ptr [rax + 1], bh; mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000031007: or byte ptr [rax + 1], bh; mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000001cb40: or byte ptr [rax + 1], bh; ret; 
0x00000000000392dd: or byte ptr [rax + 1], cl; ret 0x2b48; 
0x0000000000023a92: or byte ptr [rax + 1], cl; ret 0xed31; 
0x000000000001aaf1: or byte ptr [rax + 1], cl; ret; 
0x000000000001aaf0: or byte ptr [rax + 1], r9b; ret; 
0x000000000002f4a6: or byte ptr [rax - 0x73], cl; adc eax, 0x35632; add rsp, 8; pop rbx; pop r14; ret; 
0x00000000000103ba: or byte ptr [rax - 0x73], cl; adc eax, 0x5360e; lea rax, [rip - 0x6e29]; mov esi, 0x100; call rax; 
0x000000000000e33e: or byte ptr [rax - 0x73], cl; adc eax, 0x55642; lea rax, [rip - 0x4dad]; call rax; 
0x000000000000c974: or byte ptr [rax - 0x73], cl; add eax, 0x20c14; lea rdi, [rsp + 0x90]; call rax; 
0x000000000002f71f: or byte ptr [rax - 0x73], cl; je 0x2f748; adc al, ch; xchg byte ptr [rbp - 0x7ab70001], bh; sal byte ptr [rsp + rcx*2 + 0x48], 0x89; ret; 
0x0000000000030a5c: or byte ptr [rax - 0x73], cl; mov ah, 0x24; mov al, 0; add byte ptr [rax], al; mov edx, 0xa8; call rbx; 
0x000000000003ce8f: or byte ptr [rax - 0x73], cl; pop rbp; dec dword ptr [rax - 0x75]; jge 0x3ce97; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000004ad01: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call qword ptr [rip + 0x1c20b]; add rsp, 0x48; ret; 
0x000000000003fe41: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call qword ptr [rip + 0x270cb]; add rsp, 0x48; ret; 
0x0000000000015241: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call qword ptr [rip + 0x51ccb]; add rsp, 0x48; ret; 
0x00000000000151f1: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call qword ptr [rip + 0x51d1b]; add rsp, 0x48; ret; 
0x00000000000151a1: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call qword ptr [rip + 0x51d6b]; add rsp, 0x48; ret; 
0x0000000000015151: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call qword ptr [rip + 0x51dbb]; add rsp, 0x48; ret; 
0x0000000000011d7e: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call qword ptr [rip + 0x5518e]; add rsp, 0x48; ret; 
0x0000000000011d3e: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call qword ptr [rip + 0x551ce]; add rsp, 0x48; ret; 
0x0000000000011cfe: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call qword ptr [rip + 0x5520e]; add rsp, 0x48; ret; 
0x000000000000cd70: or byte ptr [rax - 0x73], cl; xor eax, 0x56b28; lea rax, [rip - 0x390f]; call rax; 
0x000000000004e361: or byte ptr [rax - 0x73], cl; xor eax, 0x6e69; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e347: or byte ptr [rax - 0x73], cl; xor eax, 0x6fd3; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e0d9: or byte ptr [rax - 0x73], cl; xor eax, 0x723b; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e0bd: or byte ptr [rax - 0x73], cl; xor eax, 0x7258; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004e2d5: or byte ptr [rax - 0x73], cl; xor eax, 0x79cf; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000004e053: or byte ptr [rax - 0x73], cl; xor eax, 0x7c22; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000004bbc0: or byte ptr [rax - 0x73], cl; xor eax, 0x960a; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bae6: or byte ptr [rax - 0x73], cl; xor eax, 0x96e4; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bc00: or byte ptr [rax - 0x73], cl; xor eax, 0x971c; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bba5: or byte ptr [rax - 0x73], cl; xor eax, 0x9775; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bacc: or byte ptr [rax - 0x73], cl; xor eax, 0x984e; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004b9e5: or byte ptr [rax - 0x73], cl; xor eax, 0x992f; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a938: or byte ptr [rax - 0x73], cl; xor eax, 0xa892; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a9da: or byte ptr [rax - 0x73], cl; xor eax, 0xa941; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a9ac: or byte ptr [rax - 0x73], cl; xor eax, 0xa963; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a918: or byte ptr [rax - 0x73], cl; xor eax, 0xaa02; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a82a: or byte ptr [rax - 0x73], cl; xor eax, 0xaaed; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a778: or byte ptr [rax - 0x73], cl; xor eax, 0xab9c; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a65e: or byte ptr [rax - 0x73], cl; xor eax, 0xacac; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000004a628: or byte ptr [rax - 0x73], cl; xor eax, 0xace0; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004e360: or byte ptr [rax - 0x73], r9b; xor eax, 0x6e69; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e346: or byte ptr [rax - 0x73], r9b; xor eax, 0x6fd3; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e2d4: or byte ptr [rax - 0x73], r9b; xor eax, 0x79cf; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000004e052: or byte ptr [rax - 0x73], r9b; xor eax, 0x7c22; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000004bae5: or byte ptr [rax - 0x73], r9b; xor eax, 0x96e4; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bbff: or byte ptr [rax - 0x73], r9b; xor eax, 0x971c; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bacb: or byte ptr [rax - 0x73], r9b; xor eax, 0x984e; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000002bffa: or byte ptr [rax - 0x75], cl; adc cl, byte ptr [rax - 0x7d]; ret 0xeb04; 
0x000000000000a7ac: or byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000000a816: or byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000cc87: or byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000110f0: or byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000d354: or byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x0000000000007003: or byte ptr [rax - 0x75], cl; add eax, 0x5fb95; test rax, rax; je 0x7012; call rax; 
0x000000000000fdcf: or byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0xb8; ret; 
0x000000000000ff7f: or byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0xe8; ret; 
0x000000000000d416: or byte ptr [rax - 0x75], cl; and al, 0x10; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000004af50: or byte ptr [rax - 0x75], cl; and al, 0x10; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000004aefe: or byte ptr [rax - 0x75], cl; and al, 0x10; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000004adec: or byte ptr [rax - 0x75], cl; and al, 0x10; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000000da07: or byte ptr [rax - 0x75], cl; and al, 0x30; mov qword ptr [rax + 0x10], rcx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000000d2b4: or byte ptr [rax - 0x75], cl; and al, 0x40; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x58; ret; 
0x000000000000d21b: or byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x18; ret; 
0x000000000000d313: or byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x28; ret; 
0x0000000000010826: or byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x78; ret; 
0x0000000000009fe2: or byte ptr [rax - 0x75], cl; and al, 8; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000004c084: or byte ptr [rax - 0x75], cl; and byte ptr [rax - 0x77], cl; fistp qword ptr [rsi + 0x27]; mov r13, rax; call rax; 
0x000000000002fb39: or byte ptr [rax - 0x75], cl; jle 0x2fb4e; mov rax, qword ptr [rsi + 0x18]; call qword ptr [rax + 0x28]; 
0x000000000000f3a1: or byte ptr [rax - 0x75], cl; push rcx; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000002ca8a: or byte ptr [rax - 0x75], cl; push rdx; adc byte ptr [rax - 0x7d], cl; ret 0xeb04; 
0x000000000000d487: or byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; add rsp, 0x18; ret; 
0x000000000000a528: or byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; add rsp, 0x28; ret; 
0x000000000000b13b: or byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; add rsp, 0x30; ret; 
0x000000000000fad0: or byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; add rsp, 0x40; ret; 
0x0000000000011041: or byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; call 0x101b0; add rsp, 0x18; ret; 
0x000000000004ed66: or byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x73], cl; xor eax, 0x6f4b; mov edx, 5; jmp rax; 
0x000000000004eff6: or byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x73], cl; xor eax, 0x711d; mov edx, 0xb; jmp rax; 
0x000000000004aaa2: or byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x73], cl; xor eax, 0xa877; mov edx, 1; jmp rax; 
0x0000000000049f76: or byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x73], cl; xor eax, 0xb2d3; mov edx, 0xe; jmp rax; 
0x0000000000025498: or byte ptr [rax - 0x75], cl; test byte ptr [rax], ah; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 - 0x7d], r9b; ret 0x4de0; 
0x000000000004c083: or byte ptr [rax - 0x75], r9b; and byte ptr [rax - 0x77], cl; fistp qword ptr [rsi + 0x27]; mov r13, rax; call rax; 
0x000000000004ed65: or byte ptr [rax - 0x75], r9b; sbb byte ptr [rax - 0x73], cl; xor eax, 0x6f4b; mov edx, 5; jmp rax; 
0x000000000004eff5: or byte ptr [rax - 0x75], r9b; sbb byte ptr [rax - 0x73], cl; xor eax, 0x711d; mov edx, 0xb; jmp rax; 
0x0000000000049f75: or byte ptr [rax - 0x75], r9b; sbb byte ptr [rax - 0x73], cl; xor eax, 0xb2d3; mov edx, 0xe; jmp rax; 
0x000000000001e2c7: or byte ptr [rax - 0x77], cl; adc r9b, r13b; idiv di; jmp qword ptr [rsi + 0x2e]; 
0x0000000000009fe7: or byte ptr [rax - 0x77], cl; add al, 0x24; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000000b061: or byte ptr [rax - 0x77], cl; and al, 0x10; add rsp, 0x30; ret; 
0x000000000000a51e: or byte ptr [rax - 0x77], cl; and al, 0x10; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000000b131: or byte ptr [rax - 0x77], cl; and al, 0x10; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x30; ret; 
0x0000000000010821: or byte ptr [rax - 0x77], cl; and al, 8; mov rax, qword ptr [rsp + 8]; add rsp, 0x78; ret; 
0x000000000000cd34: or byte ptr [rax - 0x77], cl; jno 0xcd59; mov qword ptr [rcx + 0x28], rdx; add rsp, 0x88; ret; 
0x0000000000049396: or byte ptr [rax - 0x77], cl; jo 0x493ab; ret; 
0x00000000000493b3: or byte ptr [rax - 0x77], cl; jo 0x493c8; ret; 
0x00000000000493cb: or byte ptr [rax - 0x77], cl; jo 0x493e0; ret; 
0x00000000000493e5: or byte ptr [rax - 0x77], cl; jo 0x493fa; ret; 
0x000000000000d412: or byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x75], r9b; and al, 0x10; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000001ce88: or byte ptr [rax - 0x77], cl; push rdi; adc byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 7; add rsp, 0x30; ret; 
0x0000000000010d90: or byte ptr [rax - 0x77], cl; ret 0x448a; 
0x000000000002f3bc: or byte ptr [rax - 0x77], cl; ret; 
0x000000000004aef4: or byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rdx + 0x48], cl; mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000002e644: or byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rcx + 0x4a], 0x8b; cmp al, 0x2b; call rax; 
0x000000000003b546: or byte ptr [rax - 0x7b], cl; test byte ptr [rdi], 0x84; ret; 
0x000000000002f7e3: or byte ptr [rax - 0x7d], cl; jnp 0x2f7f8; add byte ptr [rcx - 0x75], cl; and byte ptr [rbp + 0x1c], r14b; mov rdi, r15; call rax; 
0x000000000000f3a5: or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000037afc: or byte ptr [rax - 0x7d], cl; ret 0x4de8; 
0x000000000004cd0e: or byte ptr [rax - 0x7d], cl; ret 0xffe; 
0x0000000000022313: or byte ptr [rax - 1], cl; ret 0x8949; 
0x0000000000039976: or byte ptr [rax - 1], cl; ret; 
0x000000000000e00b: or byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x70; add rsp, 0x108; ret; 
0x0000000000010a2f: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x138; ret; 
0x000000000000f154: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x58; ret; 
0x000000000000f354: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x60; ret; 
0x000000000001c966: or byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001fc57: or byte ptr [rax], al; add byte ptr [rax], al; call rbx; 
0x000000000001fc3d: or byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x168], rdi; mov rbp, r9; call rbx; 
0x000000000002556d: or byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x1b0], rdi; call rbx; 
0x0000000000038eaf: or byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x550], rdi; lea rbx, [rip - 0x27a92]; call rbx; 
0x0000000000010461: or byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000002b276: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x0000000000020351: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r12; mov rsi, qword ptr [rsp + 0x168]; call rbx; 
0x0000000000021d59: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r13; mov rsi, qword ptr [rsp + 0x1b8]; call rbx; 
0x0000000000039638: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r14; lea rbx, [rip - 0x28206]; call rbx; 
0x0000000000020340: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r14; lea rbx, [rip - 0xef0e]; call rbx; 
0x0000000000021d48: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r15; lea rbx, [rip - 0x10916]; call rbx; 
0x0000000000039649: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r15; mov rsi, qword ptr [rsp + 0x550]; call rbx; 
0x0000000000049c69: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rax; call qword ptr [rip + 0x1d22a]; add rsp, 0x18; ret; 
0x000000000002bac5: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbp; call rbx; 
0x000000000004aa92: or byte ptr [rax], al; je 0x4aa99; mov al, 1; ret; 
0x0000000000041747: or byte ptr [rax], al; mov qword ptr [rdi], 0; pop rbx; ret; 
0x00000000000435ed: or byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000001cd09: or byte ptr [rbp + 0x48], al; mov dword ptr [rdi], 1; add rsp, 0x30; ret; 
0x0000000000047d67: or byte ptr [rbp - 0x6bf0be37], al; ret 0x4c89; 
0x000000000002fb67: or byte ptr [rbx + 0x41], bl; pop rsi; pop r15; pop rbp; ret; 
0x000000000004c9fa: or byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x0000000000012125: or byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x000000000004b444: or byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; jmp rax; 
0x000000000001206b: or byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; ret; 
0x0000000000009cd9: or byte ptr [rbx + 0x7401243c], al; adc eax, 0x44c60beb; and al, 7; add byte ptr [rdx + 0x59072444], cl; ret; 
0x000000000003629e: or byte ptr [rbx + r13*2 - 0x2a], cl; cmp byte ptr [rbp + 1], cl; ret 0xff31; 
0x000000000003629f: or byte ptr [rbx + rbp*2 - 0x2a], cl; cmp byte ptr [rbp + 1], cl; ret 0xff31; 
0x000000000001ce72: or byte ptr [rbx], dl; mov qword ptr [rdi + 0x10], rax; mov eax, 1; mov qword ptr [rdi], rax; add rsp, 0x30; ret; 
0x000000000004d969: or byte ptr [rcx + rcx*4 + 0x40], cl; adc byte ptr [rax - 0x77], cl; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000328fc: or byte ptr [rcx + rcx*4 - 0x10], cl; mov rdx, rbx; add rsp, 0x88; pop rbx; pop r14; ret; 
0x000000000004a22b: or byte ptr [rcx + rcx*4 - 0x11], cl; call qword ptr [rax + 0x18]; 
0x000000000004a613: or byte ptr [rcx + rcx*4 - 0xa], cl; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000003fe7a: or byte ptr [rcx + rcx*8 + 0x1b00374], al; ret; 
0x000000000000b5f3: or byte ptr [rcx - 0x14efdbbc], cl; in eax, 0x48; mov edi, dword ptr [rsp]; call 0xb620; add rsp, 0x18; ret; 
0x000000000000b6f3: or byte ptr [rcx - 0x14efdbbc], cl; in eax, 0x48; mov edi, dword ptr [rsp]; call 0xb7c0; add rsp, 0x18; ret; 
0x000000000000b743: or byte ptr [rcx - 0x14efdbbc], cl; in eax, 0x48; mov edi, dword ptr [rsp]; call 0xb920; add rsp, 0x18; ret; 
0x000000000000b983: or byte ptr [rcx - 0x14efdbbc], cl; in eax, 0x48; mov edi, dword ptr [rsp]; call 0xb9c0; add rsp, 0x18; ret; 
0x000000000000bc53: or byte ptr [rcx - 0x14efdbbc], cl; in eax, 0x48; mov edi, dword ptr [rsp]; call 0xbcf0; add rsp, 0x18; ret; 
0x000000000003ddfa: or byte ptr [rcx - 0x39], cl; adc byte ptr [r9], r8b; add byte ptr [rax], al; add cl, ch; ret; 
0x00000000000487c5: or byte ptr [rcx - 0x77], al; ret 0x6eb; 
0x0000000000021536: or byte ptr [rcx - 0x7d], cl; ret 0x48f0; 
0x0000000000037823: or byte ptr [rcx - 0x80], al; dec dword ptr [rbx + 0xf]; test dword ptr [rax - 0x9fffffe], ebp; ret; 
0x00000000000075cd: or byte ptr [rcx - 1], cl; ret; 
0x000000000000bdf1: or byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x10; ret; 
0x0000000000033222: or byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; pop r14; ret; 
0x000000000000e016: or byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x0000000000049fbf: or byte ptr [rcx], al; add byte ptr [rcx], dl; add byte ptr [rax + 0x5c], bh; ret; 
0x000000000004e29e: or byte ptr [rcx], dh; rol byte ptr [rcx - 0x78], 0; mov rax, r8; ret; 
0x000000000001aead: or byte ptr [rcx], dh; ror byte ptr [rax - 0x39], cl; ret; 
0x0000000000032fcf: or byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 3; mov rax, rbx; pop rbx; ret; 
0x0000000000030fec: or byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 3; pop rbx; ret; 
0x000000000004208f: or byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; and byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x0000000000041d44: or byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x000000000004e29d: or byte ptr [rcx], sil; rol byte ptr [rcx - 0x78], 0; mov rax, r8; ret; 
0x000000000001cb30: or byte ptr [rdi + 3], al; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000002c6b3: or byte ptr [rdi + 6], bh; lea rax, [rip + 0x252bc]; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x000000000001cdbb: or byte ptr [rdi], cl; adc dword ptr [rdi + 8], eax; mov qword ptr [rdi], 0; add rsp, 0x30; ret; 
0x000000000001e38d: or byte ptr [rdi], cl; adc dword ptr [rdi + 8], eax; mov qword ptr [rdi], rax; ret; 
0x000000000002ccea: or byte ptr [rdi], cl; mov dh, 0; lea rcx, [rip + 0x24ccf]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002ca74: or byte ptr [rdi], cl; mov dh, 0x32; mov edx, 6; movsxd rsi, dword ptr [r12 + rsi*4]; add rsi, r12; jmp rsi; 
0x0000000000030126: or byte ptr [rdi], cl; sub byte ptr [rsp + 0xb0], al; movups xmmword ptr [rsp + 0x10], xmm0; mov qword ptr [rsp], rsi; call qword ptr [rax + 0x20]; 
0x00000000000253b5: or byte ptr [rdi], cl; test cl, ah; adc eax, 0x8b4c0000; add byte ptr gs:[rax - 0x7d], cl; ret; 
0x000000000003725a: or byte ptr [rdi], cl; xchg eax, esp; ret 0x8b48; 
0x0000000000028118: or byte ptr [rdi], dh; mov qword ptr [rdi], 1; pop rbx; pop r14; pop rbp; ret; 
0x000000000001e38c: or byte ptr [rdi], r9b; adc dword ptr [rdi + 8], eax; mov qword ptr [rdi], rax; ret; 
0x000000000000ce88: or byte ptr [rdx - 0x77dedbbc], cl; and al, 0x37; lea rcx, [rip + 0x56a20]; lea rax, [rip - 0x368f]; lea rdx, [rsp + 0x37]; call rax; 
0x000000000000c5dc: or byte ptr [rdx], al; add byte ptr [rax], al; call rax; 
0x000000000000c5cd: or byte ptr [rdx], al; add byte ptr [rax], al; lea rax, [rip + 0x1dea8]; lea rdi, [rsp + 0x208]; call rax; 
0x00000000000135bb: or byte ptr [rdx], al; jae 0x135d6; cmp dword ptr [rbx + 0x10], 2; jae 0x135e5; pop rbx; ret; 
0x0000000000008823: or byte ptr [rsp + rax + 0x158d4800], ah; ret 0x5bf; 
0x0000000000010198: or cl, byte ptr [rax - 0x75]; and al, 0x20; add rsp, 0x58; ret; 
0x00000000000362ae: or cl, byte ptr [rax - 0x75]; pop rdx; sub byte ptr [rax - 0x75], cl; xor byte ptr [rax - 0x7d], cl; ret 0x4838; 
0x000000000002bab4: or cl, byte ptr [rax - 0x75]; push rax; adc byte ptr [rax - 0x75], cl; jge 0x2babd; call rbx; 
0x000000000002c54d: or cl, byte ptr [rcx + 0x63]; lea r8d, [rax]; add rax, r13; jmp rax; 
0x000000000004c216: or cl, byte ptr [rdi + 0x63480000]; or al, 0x88; add rcx, rax; jmp rcx; 
0x000000000004a00b: or cl, byte ptr [rdi]; ror dword ptr [r8 - 0x7b], 0xf6; je 0x4a039; dec rsi; mov qword ptr [rdi], rsi; ret; 
0x0000000000020e54: or cl, ch; add dword ptr [rax], 0x89480000; ret; 
0x000000000004960c: or dh, al; add al, 0x18; add byte ptr [rax - 1], cl; ret; 
0x0000000000046b54: or dh, bl; add byte ptr [rax], al; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000049f3e: or dh, byte ptr [rax - 0x3b7cb7ff]; cmp byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x0000000000030b52: or dh, byte ptr [rsi - 3]; dec dword ptr [rax - 0x77]; ret; 
0x000000000004b931: or dword ptr [r8], eax; mov rax, rbx; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000009b32: or dword ptr [rax + 1], 0x48e0ffc8; lea edi, [rip + 0x464d1]; lea rdx, [rip + 0x59a9a]; lea rax, [rip - 0x65d]; mov esi, 0x28; call rax; 
0x000000000001cb37: or dword ptr [rax + 1], 0x48e0ffc8; mov edx, dword ptr [rdi + 8]; mov eax, 1; ret; 
0x000000000001e36d: or dword ptr [rax + 1], 0x48e2ffca; mov ecx, dword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; mov qword ptr [rdi], rax; ret; 
0x000000000004c33d: or dword ptr [rax + 1], 0xe43145c8; mov ebp, edx; jmp rax; 
0x000000000004bec3: or dword ptr [rax + 1], 0xe43145c8; mov r13d, r14d; jmp rax; 
0x000000000002a45b: or dword ptr [rax - 0x73], ecx; add eax, 0x3cc1d; pop rcx; ret; 
0x000000000002a25b: or dword ptr [rax - 0x73], ecx; add eax, 0x3cde5; pop rcx; ret; 
0x000000000001e2c4: or dword ptr [rax - 0x76b7f7b3], ecx; adc r9b, r13b; idiv di; jmp qword ptr [rsi + 0x2e]; 
0x000000000003be10: or dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000424f1: or dword ptr [rax - 1], ecx; ret; 
0x0000000000042cb2: or dword ptr [rax], eax; add byte ptr [rax + rax*8 - 0xb7eb8b], al; ret; 
0x000000000001ac04: or dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; or eax, 0x3622a; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000019fc8: or dword ptr [rax], eax; add byte ptr [rcx - 1], cl; ret 0x394c; 
0x000000000004b932: or dword ptr [rax], eax; mov rax, rbx; add rsp, 8; pop rbx; pop r14; ret; 
0x00000000000100f3: or dword ptr [rbx + 0x480c2444], ecx; add esp, 0x18; ret; 
0x000000000000ce70: or dword ptr [rbx + 0x48242444], ecx; add esp, 0x48; ret; 
0x00000000000472f7: or dword ptr [rcx], edi; ret 0x830f; 
0x000000000000761c: or dword ptr [rdi - 2], 0xffffffff; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000043675: or eax, 0x10aa6; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003f536: or eax, 0x18578b48; mov rdi, qword ptr [rdi + 0x10]; mov rax, rdi; pop rcx; ret; 
0x000000000003316b: or eax, 0x1e8dc; movsxd rdx, dword ptr [rcx + rdi*4]; add rdx, rcx; jmp rdx; 
0x000000000003297f: or eax, 0x1f0b8; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002fb1e: or eax, 0x21eed; movsxd rdi, dword ptr [rcx + rdx*4]; add rdi, rcx; jmp rdi; 
0x000000000000cf82: or eax, 0x24048b48; mov rax, qword ptr [rax + 8]; add rsp, 0x28; ret; 
0x000000000002ccf0: or eax, 0x24ccf; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002bc9a: or eax, 0x25c6d; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002ba35: or eax, 0x25ec2; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x00000000000299f9: or eax, 0x27e4a; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000296d6: or eax, 0x2815d; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029484: or eax, 0x2839f; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029456: or eax, 0x283cd; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002833f: or eax, 0x294d4; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000277eb: or eax, 0x2a010; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002778f: or eax, 0x2a054; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002529f: or eax, 0x2c3c8; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002510f: or eax, 0x2c518; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000022d53: or eax, 0x2e788; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000022cff: or eax, 0x2e840; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000022613: or eax, 0x2eeb0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor ebx, ebx; jmp rax; 
0x000000000001eb47: or eax, 0x32928; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001e365: or eax, 0x32ff2; movsxd rdx, dword ptr [rcx + rax*4]; add rdx, rcx; jmp rdx; 
0x000000000001d81e: or eax, 0x33ab9; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001d1a0: or eax, 0x34117; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cfd0: or eax, 0x342c7; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cc67: or eax, 0x34618; movsxd rax, dword ptr [r9 + rax*4]; add rax, r9; jmp rax; 
0x000000000001cbff: or eax, 0x34668; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cb8f: or eax, 0x346c0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cb2f: or eax, 0x34708; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001c6f5: or eax, 0x348f6; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001c77f: or eax, 0x34a98; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001ac09: or eax, 0x3622a; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000009b2a: or eax, 0x464d1; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000d068: or eax, 0x5686b; lea rax, [rip - 0x3864]; mov esi, 0x2b; lea rdx, [rsp + 0x20]; call rax; 
0x000000000000cfab: or eax, 0x56928; lea rax, [rip - 0x37a7]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000000cf13: or eax, 0x569c0; lea rax, [rip - 0x370f]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000000ce93: or eax, 0x56a20; lea rax, [rip - 0x368f]; lea rdx, [rsp + 0x37]; call rax; 
0x0000000000018f6f: or eax, 0x5b0004db; ret; 
0x000000000004df63: or eax, 0x78db; mov edx, 0x28; mov r8d, 0x11f; call 0x4de00; pop rcx; ret; 
0x0000000000007334: or eax, 0x8948c131; ret 0xc148; 
0x000000000000f575: or eax, 0x8d482beb; add eax, 0x39d91; call rax; 
0x000000000004c0c0: or eax, 0x8fbf; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x0000000000014f46: or eax, 0xc0310000; pop rcx; ret; 
0x000000000003d26b: or eax, 0xc0bc0f66; movzx edx, ax; mov eax, 1; ret; 
0x0000000000046b53: or eax, 0xde08; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000034f3f: or eax, 0xf00031f; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000003498d: or eax, 0xffff9d2e; cmovne rcx, rax; call rcx; 
0x0000000000031001: or eax, 2; mov qword ptr [rbx + 8], rax; mov eax, 1; mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000000c167: or eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; cmp al, 0x24; lea rax, [rip + 0x1eb2b]; call rax; 
0x000000000003e63f: or eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000001c761: or eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004f003: or eax, dword ptr [rax]; add byte ptr [rax], al; jmp rax; 
0x000000000001153f: or eax, dword ptr [rcx]; add byte ptr [rax], al; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x00000000000116f7: or eax, dword ptr [rdx + 0x6d]; ret; 
0x000000000000c166: or eax, dword ptr ss:[rax]; add byte ptr [rax - 0x75], cl; cmp al, 0x24; lea rax, [rip + 0x1eb2b]; call rax; 
0x000000000004e12c: or eax, eax; or rax, rdx; pop rbx; ret; 
0x0000000000041957: or eax, ecx; ret; 
0x000000000004ad09: or eax, edx; add dword ptr [rax], eax; add rsp, 0x48; ret; 
0x000000000004e12f: or eax, edx; pop rbx; ret; 
0x0000000000009ce1: or eax, esi; and al, 7; add byte ptr [rdx + 0x59072444], cl; ret; 
0x0000000000028e05: or ebp, ebx; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000010baa: or ebp, ebx; add rsp, 0x78; ret; 
0x000000000000d731: or ebp, ebx; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x000000000000ce29: or ebp, ebx; mov rdx, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x0000000000009ca3: or ebp, ebx; out dx, eax; mov rax, qword ptr [rsp + 0x38]; add rsp, 0x98; ret; 
0x00000000000324a3: or ebp, ecx; wait; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000000d09f: or ecx, dword ptr [rax - 0x73]; add eax, 0xffffc579; call rax; 
0x000000000000cfe2: or ecx, dword ptr [rax - 0x73]; add eax, 0xffffc636; call rax; 
0x000000000000cf4a: or ecx, dword ptr [rax - 0x73]; add eax, 0xffffc6ce; call rax; 
0x000000000000c745: or ecx, dword ptr [rax - 0x73]; add eax, 0xffffced3; call rax; 
0x000000000000b878: or ecx, dword ptr [rax - 0x73]; add eax, 0xffffdda0; call rax; 
0x000000000000b538: or ecx, dword ptr [rax - 0x73]; add eax, 0xffffe0e0; call rax; 
0x00000000000111f1: or ecx, dword ptr [rax - 0x75]; and al, 0x28; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x0000000000030fe8: or ecx, dword ptr [rax - 0x77]; or byte ptr [r9], sil; ror byte ptr [rax - 0x77], 3; pop rbx; ret; 
0x0000000000008ac7: or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000003d555: or ecx, dword ptr [rbx + rcx*4 + 0x5e]; sbb byte ptr [rbx + rcx*4 + 0x4e], cl; and byte ptr [rbp - 0x77], cl; ret 0xf749; 
0x00000000000470a8: or ecx, dword ptr [rcx - 1]; ret; 
0x00000000000102c9: or ecx, dword ptr [rdx + 0x48272444]; add esp, 0x28; ret; 
0x000000000002d992: or edi, edi; adc eax, 0x390b7; ud2; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x00000000000116c4: or edi, edi; adc eax, 0x55385; ud2; nop dword ptr [rax]; movabs rax, 0x245dac89066f9f; ret; 
0x000000000004a5fa: or edx, 2; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x000000000000b76e: or edx, dword ptr [rax + 0x1ae850]; add byte ptr [rax], al; pop rax; ret; 
0x000000000000b61e: or edx, dword ptr [rax + 0x455ae850]; add byte ptr [rax], al; pop rax; ret; 
0x000000000003fc56: or esi, dword ptr [rbp - 0x12]; mov rax, rsi; mov rdx, rcx; pop rcx; ret; 
0x000000000002c258: or esi, dword ptr [rcx + 0x2e3f802f]; je 0x2c269; xor eax, eax; pop rcx; ret; 
0x0000000000010439: or esp, 0xffffffff; dec dword ptr [rax - 0x75]; add al, 0x24; pop rcx; ret; 
0x0000000000042cb1: or qword ptr [r8], rax; add byte ptr [rax + rax*8 - 0xb7eb8b], al; ret; 
0x0000000000031000: or rax, 2; mov qword ptr [rbx + 8], rax; mov eax, 1; mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000004e12b: or rax, r8; or rax, rdx; pop rbx; ret; 
0x0000000000041956: or rax, rcx; ret; 
0x000000000004e12e: or rax, rdx; pop rbx; ret; 
0x000000000004a5f9: or rdx, 2; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x000000000004960b: or sil, r8b; add al, 0x18; add byte ptr [rax - 1], cl; ret; 
0x000000000004a816: out 0x41, al; call qword ptr [rsi + 0x18]; 
0x0000000000030e7d: out 0x41, al; call rdi; 
0x000000000004a1f5: out 0x41, eax; call qword ptr [rsi + 0x18]; 
0x000000000002ddc7: out 0x48, al; mov edi, eax; call 0x2e160; add rsp, 0x18; ret; 
0x0000000000020357: out 0x48, eax; mov esi, dword ptr [rsp + 0x168]; call rbx; 
0x00000000000294ea: out 0xe8, eax; and byte ptr [rsi - 0x76b70002], 0xd8; add rsp, 0x1b0; pop rbx; ret; 
0x000000000003f5d1: out 0xfe, al; inc dword ptr [rax]; add byte ptr [rsi - 0x7d], ah; inc byte ptr [rdx]; sete al; ret; 
0x000000000002a487: out 0xff, eax; adc eax, 0x3c7a2; pop rcx; ret; 
0x0000000000022d55: out 2, eax; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x0000000000039635: out 4, al; mov edx, 8; mov rdi, r14; lea rbx, [rip - 0x28206]; call rbx; 
0x000000000002033d: out 4, al; mov edx, 8; mov rdi, r14; lea rbx, [rip - 0xef0e]; call rbx; 
0x0000000000021d45: out 4, al; mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x10916]; call rbx; 
0x0000000000025563: out 5, eax; lea rbx, [rip - 0x1413c]; mov esi, 8; mov qword ptr [rsp + 0x1b0], rdi; call rbx; 
0x000000000001fc33: out 5, eax; lea rbx, [rip - 0xe80c]; mov esi, 8; mov qword ptr [rsp + 0x168], rdi; mov rbp, r9; call rbx; 
0x0000000000038eac: out 5, eax; mov esi, 8; mov qword ptr [rsp + 0x550], rdi; lea rbx, [rip - 0x27a92]; call rbx; 
0x0000000000022615: out dx, al; add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor ebx, ebx; jmp rax; 
0x0000000000032486: out dx, al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000028157: out dx, al; add eax, dword ptr [rax]; cmp eax, 4; jne 0x28164; add rsp, 0x18; ret; 
0x000000000001dfc3: out dx, al; jmp rsi; 
0x000000000004be47: out dx, al; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x000000000004a645: out dx, al; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000003fc58: out dx, al; mov rax, rsi; mov rdx, rcx; pop rcx; ret; 
0x000000000004bff5: out dx, al; sub r13, rbp; mov rdi, rbx; mov rdx, r13; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x000000000003d88e: out dx, al; xchg eax, ecx; add al, byte ptr [rax]; ret; 
0x000000000000c2ed: out dx, eax; adc byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x1df58; call rax; 
0x0000000000029b88: out dx, eax; and byte ptr [rax - 0x73], cl; add eax, 0x27cc7; movsxd rcx, dword ptr [rax + rdi*4]; add rcx, rax; jmp rcx; 
0x000000000003272e: out dx, eax; and byte ptr [rax - 0x7d], cl; ret; 
0x000000000004a22e: out dx, eax; call qword ptr [rax + 0x18]; 
0x000000000002bacb: out dx, eax; call rbx; 
0x000000000004b11b: out dx, eax; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x0000000000034cbb: out dx, eax; mov esi, 1; xor edx, edx; call rbx; 
0x0000000000009ca5: out dx, eax; mov rax, qword ptr [rsp + 0x38]; add rsp, 0x98; ret; 
0x000000000004b386: out dx, eax; mov rsi, qword ptr [rsp + 0x10]; mov rdx, r15; call qword ptr [rbx + 0x18]; 
0x0000000000021d5f: out dx, eax; mov rsi, qword ptr [rsp + 0x1b8]; call rbx; 
0x000000000002d905: out dx, eax; pop qword ptr [rbx]; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000001127d: out dx, eax; sar bh, 0xff; add rsp, 0x28; ret; 
0x0000000000034caf: out dx, eax; xor esi, esi; mov rdx, qword ptr [rsp + 0x38]; call rbx; 
0x000000000004e366: outsb dx, byte ptr [rsi]; add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000019e69: outsb dx, byte ptr [rsi]; add eax, dword ptr [rax]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004a54e: outsb dx, byte ptr [rsi]; cmpsd dword ptr [rsi], dword ptr [rdi]; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000002ba95: outsb dx, byte ptr [rsi]; dec dword ptr [rcx - 0x75]; jle 0x2ba9a; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x000000000004cb2c: outsb dx, byte ptr [rsi]; ret; 
0x000000000004e34c: outsd dx, dword ptr [rsi]; add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004ed6f: outsd dx, dword ptr [rsi]; add byte ptr [rax], al; mov edx, 5; jmp rax; 
0x0000000000011fbe: outsd dx, dword ptr [rsi]; add byte ptr [rax], al; ret; 
0x000000000002750e: outsd dx, dword ptr [rsi]; movsxd rcx, dword ptr [r14 + rdx*4]; add rcx, r14; jmp rcx; 
0x000000000004ceff: outsd dx, dword ptr [rsi]; pop rdx; adc byte ptr [rax - 0x7d], cl; ret 0x6620; 
0x000000000002abf7: pcmpeqw mm0, qword ptr [rip - 0x11d3e18]; dec dword ptr [rax - 0x7b]; fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x000000000004c13f: pop qword ptr [rax]; add byte ptr [rax + 0x63], cl; or al, 0x88; add rcx, rax; jmp rcx; 
0x000000000004c198: pop qword ptr [rax]; add byte ptr [rax + 0x63], cl; or al, 0x88; add rcx, rax; mov edx, r15d; jmp rcx; 
0x000000000004c0c2: pop qword ptr [rax]; add byte ptr [rdx + 0x63], cl; xor al, 0xb9; add rsi, rcx; jmp rsi; 
0x000000000002d906: pop qword ptr [rbx]; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000004b379: pop r12; pop r13; pop r14; pop r15; pop rbp; jmp rax; 
0x000000000000766f: pop r12; pop r13; pop r14; pop r15; pop rbp; ret; 
0x000000000001195f: pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000004b446: pop r12; pop r14; pop r15; jmp rax; 
0x0000000000008582: pop r12; pop r14; pop r15; pop rbp; ret; 
0x0000000000007f70: pop r12; pop r14; pop r15; ret; 
0x000000000004b37b: pop r13; pop r14; pop r15; pop rbp; jmp rax; 
0x0000000000007671: pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000011961: pop r13; pop r14; pop r15; ret; 
0x000000000004b448: pop r14; pop r15; jmp rax; 
0x0000000000029b80: pop r14; pop r15; jmp rcx; 
0x000000000004b37d: pop r14; pop r15; pop rbp; jmp rax; 
0x0000000000007673: pop r14; pop r15; pop rbp; ret; 
0x0000000000013cb7: pop r14; pop r15; ret; 
0x0000000000015e0b: pop r14; pop rbp; ret; 
0x0000000000007a94: pop r14; ret; 
0x000000000004b44a: pop r15; jmp rax; 
0x0000000000029b82: pop r15; jmp rcx; 
0x000000000004b37f: pop r15; pop rbp; jmp rax; 
0x0000000000007675: pop r15; pop rbp; ret; 
0x0000000000007f74: pop r15; ret; 
0x0000000000011e24: pop rax; add rax, 0x48e88900; add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000004e0c1: pop rax; jb 0x4e0c4; add byte ptr [rdx + 2], bh; call qword ptr [rax + 0x18]; 
0x000000000004c3dd: pop rax; jmp rcx; 
0x0000000000038ec8: pop rax; mov edi, 0x100; mov esi, 8; call rbx; 
0x0000000000010670: pop rax; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x80; ret; 
0x000000000002a729: pop rax; pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000002f3a1: pop rax; pop rbx; pop r14; ret; 
0x000000000000a327: pop rax; ret; 
0x00000000000116d7: pop rbp; and al, 0; ret; 
0x000000000003a225: pop rbp; dec dword ptr [rax - 0x75]; jge 0x3a22a; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000003ce92: pop rbp; dec dword ptr [rax - 0x75]; jge 0x3ce97; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000004b381: pop rbp; jmp rax; 
0x000000000002ad5f: pop rbp; mov edi, 0x85480003; sal byte ptr [rbp + 0x10], 0x48; add esp, 0xb0; pop rbx; ret; 
0x000000000004f233: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000004b37c: pop rbp; pop r14; pop r15; pop rbp; jmp rax; 
0x0000000000007672: pop rbp; pop r14; pop r15; pop rbp; ret; 
0x0000000000011962: pop rbp; pop r14; pop r15; ret; 
0x000000000002c2eb: pop rbp; push rsi; add al, byte ptr [rax]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x0000000000007677: pop rbp; ret; 
0x00000000000133c3: pop rbx; add byte ptr [rax], al; ret; 
0x000000000003fbf1: pop rbx; jae 0x3fbf6; add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; nop; ret; 
0x000000000001195e: pop rbx; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000004b445: pop rbx; pop r12; pop r14; pop r15; jmp rax; 
0x0000000000008581: pop rbx; pop r12; pop r14; pop r15; pop rbp; ret; 
0x0000000000007f6f: pop rbx; pop r12; pop r14; pop r15; ret; 
0x0000000000029b7f: pop rbx; pop r14; pop r15; jmp rcx; 
0x000000000002fb68: pop rbx; pop r14; pop r15; pop rbp; ret; 
0x0000000000011cb1: pop rbx; pop r14; pop r15; ret; 
0x0000000000015e0a: pop rbx; pop r14; pop rbp; ret; 
0x0000000000007a93: pop rbx; pop r14; ret; 
0x0000000000011e2e: pop rbx; pop rbp; ret; 
0x0000000000007114: pop rbx; ret; 
0x000000000002bfea: pop rcx; add al, byte ptr [rax]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000001ad8c: pop rcx; add cl, byte ptr [rax - 0x7d]; ret 0x49fe; 
0x0000000000010a27: pop rcx; mov rax, qword ptr [rsp]; mov qword ptr [rax + 8], 0; mov rax, qword ptr [rsp + 8]; add rsp, 0x138; ret; 
0x0000000000008358: pop rcx; ret; 
0x0000000000024467: pop rcx; rol dword ptr [rdx], 1; add byte ptr [rax + 0x63], cl; or al, 0x8a; add rcx, rdx; jmp rcx; 
0x000000000001166c: pop rdi; adc byte ptr [rax - 0x77], cl; ja 0x1168a; add rsp, 0x10; pop rbx; ret; 
0x000000000004adcc: pop rdi; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000003129f: pop rdi; dec dword ptr [rcx - 0x75]; jg 0x312a4; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x00000000000303ad: pop rdi; insd dword ptr [rdi], dx; add eax, dword ptr [rax]; ret; 
0x000000000004b44b: pop rdi; jmp rax; 
0x0000000000029b83: pop rdi; jmp rcx; 
0x000000000004b380: pop rdi; pop rbp; jmp rax; 
0x0000000000007676: pop rdi; pop rbp; ret; 
0x0000000000007f75: pop rdi; ret; 
0x000000000004cf00: pop rdx; adc byte ptr [rax - 0x7d], cl; ret 0x6620; 
0x000000000000b622: pop rdx; add byte ptr [r8], r8b; pop rax; ret; 
0x0000000000013962: pop rdx; push rbp; add byte ptr [rax], al; ret; 
0x00000000000362b1: pop rdx; sub byte ptr [rax - 0x75], cl; xor byte ptr [rax - 0x7d], cl; ret 0x4838; 
0x000000000004a94c: pop rsi; adc byte ptr [rcx + 0x5e415bd8], cl; pop r15; ret; 
0x0000000000049607: pop rsi; adc byte ptr [rcx - 0x75], cl; or sil, r8b; add al, 0x18; add byte ptr [rax - 1], cl; ret; 
0x000000000002ba37: pop rsi; add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x00000000000303a6: pop rsi; insd dword ptr [rdi], dx; add eax, dword ptr [rax]; mov qword ptr [rip + 0x36d5f], rsi; ret; 
0x0000000000041d43: pop rsi; or byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x000000000004b449: pop rsi; pop r15; jmp rax; 
0x0000000000029b81: pop rsi; pop r15; jmp rcx; 
0x000000000004b37e: pop rsi; pop r15; pop rbp; jmp rax; 
0x0000000000007674: pop rsi; pop r15; pop rbp; ret; 
0x0000000000007f73: pop rsi; pop r15; ret; 
0x0000000000015e0c: pop rsi; pop rbp; ret; 
0x0000000000007a95: pop rsi; ret; 
0x000000000003d558: pop rsi; sbb byte ptr [rbx + rcx*4 + 0x4e], cl; and byte ptr [rbp - 0x77], cl; ret 0xf749; 
0x000000000002bc9c: pop rsp; add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000a98f: pop rsp; add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000002ba90: pop rsp; and al, 0x10; lea rbp, [r14 - 1]; mov rdi, qword ptr [r14 - 1]; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x0000000000032e79: pop rsp; and al, 0x10; mov rax, rbx; add rsp, 0x70; pop rbx; ret; 
0x000000000000750f: pop rsp; call qword ptr [rax]; 
0x0000000000047d60: pop rsp; int 0; add byte ptr [rdi], cl; mov dh, 0xc; or byte ptr [rbp - 0x6bf0be37], al; ret 0x4c89; 
0x0000000000036198: pop rsp; or al, byte ptr [rbx]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000004b37a: pop rsp; pop r13; pop r14; pop r15; pop rbp; jmp rax; 
0x0000000000007670: pop rsp; pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000011960: pop rsp; pop r13; pop r14; pop r15; ret; 
0x000000000004b447: pop rsp; pop r14; pop r15; jmp rax; 
0x0000000000008583: pop rsp; pop r14; pop r15; pop rbp; ret; 
0x0000000000007f71: pop rsp; pop r14; pop r15; ret; 
0x0000000000011a22: popfq; add dword ptr [rax], eax; pop rcx; ret; 
0x000000000000f55e: popfq; add eax, dword ptr [rax]; call rax; 
0x0000000000010dc7: popfq; mov eax, dword ptr [rsp + 0x18]; mov edx, dword ptr [rsp + 0x1c]; add rsp, 0x38; ret; 
0x000000000001cfaa: popfq; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000004cc0a: popfq; ret 0x148; 
0x000000000000b9db: por mm0, qword ptr [rax]; mov rdi, qword ptr [rsp]; add rdi, 4; call 0xb7a0; pop rax; ret; 
0x000000000000b37a: por mm0, qword ptr [rax]; mov rdi, qword ptr [rsp]; add rdi, 8; call 0xb9f0; pop rax; ret; 
0x000000000000f557: por mm3, qword ptr [rsi]; lea rax, [rip + 0x39daf]; call rax; 
0x000000000004963d: psubusb mm0, qword ptr [rcx]; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000000c691: push -0x45fffffe; add dword ptr [rax], eax; add byte ptr [rax], al; mov ecx, 0x4a; call rax; 
0x000000000000d06a: push -0x72b7fffb; add eax, 0xffffc79c; mov esi, 0x2b; lea rdx, [rsp + 0x20]; call rax; 
0x0000000000010ba3: push -0x9b4818; dec dword ptr [rdi]; or ebp, ebx; add rsp, 0x78; ret; 
0x000000000000be72: push 0x13; add byte ptr [rax], al; pop rcx; ret; 
0x000000000003d63b: push 0x2c488928; pop rbx; pop r14; pop rbp; ret; 
0x000000000000b9c2: push 0x41; add byte ptr [rax], al; pop rax; ret; 
0x000000000000b024: push 0x48000004; add esp, 0x38; ret; 
0x000000000000c834: push 0x480001e4; lea edi, [rsp + 0x2b0]; call rax; 
0x000000000001cc00: push 0x48000346; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003f338: push 0x486a4f88; mov eax, edi; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000003f33b: push 0x48; mov eax, edi; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001fc45: push 0x4c000001; mov ebp, ecx; call rbx; 
0x000000000001ff76: push 4; add byte ptr [rax - 0x77], cl; ret; 
0x000000000000ce95: push 5; add byte ptr [rax - 0x73], cl; add eax, 0xffffc971; lea rdx, [rsp + 0x37]; call rax; 
0x000000000002befb: push qword ptr [rax + rcx - 0x7b]; ror byte ptr [rdi], 0x85; ret 1; 
0x0000000000032a60: push qword ptr [rbx + rax*2 - 0x77]; ret 0x2b8; 
0x0000000000030fe6: push qword ptr [rbx + rcx + 0x48]; mov dword ptr [rbx + 8], eax; xor eax, eax; mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000004b3d9: push qword ptr [rcx + rdx + 0x4c]; mov edi, edi; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000000cc4d: push qword ptr [rcx]; leave; call 0xd1f0; pop rcx; ret; 
0x000000000004e1dc: push qword ptr [rcx]; sar byte ptr [rdx + 0x100], 0x4c; or eax, eax; or rax, rdx; pop rbx; ret; 
0x000000000002bab2: push qword ptr [rdx + rcx + 0x48]; mov edx, dword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000000133e2: push qword ptr [rsi + rax - 1]; and eax, 0x536ed; ret; 
0x000000000002bab7: push rax; adc byte ptr [rax - 0x75], cl; jge 0x2babd; call rbx; 
0x000000000002b3c6: push rax; adc byte ptr [rcx - 0x75], cl; cmp al, 0x24; call rbx; 
0x0000000000038eb7: push rax; add eax, 0x8d480000; sbb eax, 0xfffd856e; call rbx; 
0x000000000002342d: push rax; add rax, qword ptr [rdi + 0x60]; lea rdi, [rip + 0x2e1d3]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000000b2a0: push rax; add rdi, rsi; mov qword ptr [rsp], rdi; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000a1b2: push rax; add rsp, 0xe8; ret; 
0x0000000000034d6f: push rax; and byte ptr [rcx + rax], dh; movzx eax, al; lea eax, [rax + rax*8]; add rsp, 0x28; ret; 
0x0000000000011e50: push rax; call 0x288b0; ud2; nop dword ptr [rax + rax]; ret; 
0x0000000000028b40: push rax; call 0x2e2e0; test rax, rax; je 0x28b4d; pop rcx; ret; 
0x000000000000b900: push rax; call 0x9fb0; pop rax; ret; 
0x000000000000a5a0: push rax; call 0xa590; movzx eax, word ptr [rax + 0x21a]; pop rcx; ret; 
0x000000000000a790: push rax; call 0xa590; pop rcx; ret; 
0x000000000000b6c0: push rax; call 0xb390; pop rax; ret; 
0x000000000000b910: push rax; call 0xb400; pop rax; ret; 
0x000000000000b690: push rax; call 0xb6d0; pop rax; ret; 
0x000000000000b2d0: push rax; call 0xb770; pop rax; ret; 
0x000000000000b7a0: push rax; call 0xb780; pop rax; ret; 
0x000000000000b770: push rax; call 0xb790; pop rax; ret; 
0x000000000000b6a0: push rax; call 0xb900; pop rax; ret; 
0x000000000000b9b0: push rax; call 0xb960; pop rax; ret; 
0x000000000000b6b0: push rax; call 0xba50; pop rax; ret; 
0x000000000000b2c0: push rax; call 0xbcc0; pop rax; ret; 
0x000000000000b780: push rax; call 0xbeb0; pop rax; ret; 
0x000000000000be70: push rax; call 0xd1e0; pop rcx; ret; 
0x000000000000b5c0: push rax; call 0xd5f0; pop rax; ret; 
0x000000000000b400: push rax; call 0xdc20; pop rax; ret; 
0x000000000000b410: push rax; call 0xdce0; pop rax; ret; 
0x000000000000bcf0: push rax; call 0xfae0; pop rax; ret; 
0x000000000000b9c0: push rax; call 0xfb30; pop rax; ret; 
0x000000000000b620: push rax; call 0xfb80; pop rax; ret; 
0x000000000000b7c0: push rax; call 0xfbd0; pop rax; ret; 
0x000000000000ff90: push rax; call 0xfcd0; pop rcx; ret; 
0x000000000000bc80: push rax; call qword ptr [rip + 0x5ad09]; pop rax; ret; 
0x000000000000b360: push rax; call rdi; 
0x000000000000b360: push rax; call rdi; pop rax; ret; 
0x000000000004df30: push rax; cmp edi, 0x20; jae 0x4df3a; xor eax, eax; pop rcx; ret; 
0x000000000000c23c: push rax; lea rsi, [rsp + 0x60]; lea rdx, [rsp + 0x38]; call rax; 
0x000000000000f0e0: push rax; mov ecx, 1; call 0xeb40; pop rcx; ret; 
0x000000000000beb0: push rax; mov edi, dword ptr [rdi]; call qword ptr [rip + 0x5ac1f]; pop rax; ret; 
0x000000000000e9f3: push rax; mov qword ptr [rcx + 0x20], rdx; add rsp, 0x88; ret; 
0x0000000000010667: push rax; mov qword ptr [rdi + 0x30], rcx; mov rcx, qword ptr [rsp + 0x58]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x80; ret; 
0x000000000000d1e0: push rax; mov qword ptr [rsp], rdi; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000002a480: push rax; mov qword ptr [rsp], rdi; mov rdi, rsp; call qword ptr [rip + 0x3c7a2]; pop rcx; ret; 
0x0000000000034980: push rax; mov rax, qword ptr [rip + 0x32748]; test rax, rax; lea rcx, [rip - 0x62d2]; cmovne rcx, rax; call rcx; 
0x000000000003cf33: push rax; mov rbx, rdi; mov rdi, qword ptr [rdi + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x0000000000015030: push rax; mov rdi, qword ptr [rdi]; call 0x11bc0; xor eax, eax; pop rcx; ret; 
0x0000000000014f40: push rax; mov rdi, qword ptr [rdi]; call 0x15d00; xor eax, eax; pop rcx; ret; 
0x000000000000b2e0: push rax; mov rdi, qword ptr [rdi]; call 0xb320; pop rcx; ret; 
0x000000000004b95e: push rax; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000000e192: push rax; mov rdi, qword ptr [rsp + 0x28]; lea rdx, [rip + 0x557b9]; lea rax, [rip - 0x4c06]; call rax; 
0x000000000000e339: push rax; mov rdi, qword ptr [rsp + 8]; lea rdx, [rip + 0x55642]; lea rax, [rip - 0x4dad]; call rax; 
0x000000000002e782: push rax; pop rbx; pop r14; pop r15; ret; 
0x000000000002f463: push rax; pop rbx; ret; 
0x000000000002fb43: push rax; sub byte ptr [rax - 0x77], cl; ret 0xdeb; 
0x000000000000b2b0: push rax; sub rdi, rsi; mov qword ptr [rsp], rdi; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000f0f0: push rax; xor ecx, ecx; call 0xeb40; pop rcx; ret; 
0x0000000000013963: push rbp; add byte ptr [rax], al; ret; 
0x0000000000033107: push rbp; cmp eax, dword ptr [rbx]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000001e2c3: push rbp; or dword ptr [rax - 0x76b7f7b3], ecx; adc r9b, r13b; idiv di; jmp qword ptr [rsi + 0x2e]; 
0x0000000000018f29: push rbx; fild dword ptr [rax + rax]; ret; 
0x000000000003cf94: push rbx; mov r15, rdi; mov rbx, qword ptr [rdi]; mov rdi, qword ptr [rbx + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000004aa80: push rbx; mov rbx, rdi; call 0x4a960; mov rax, rbx; pop rbx; ret; 
0x000000000003cf32: push rbx; push rax; mov rbx, rdi; mov rdi, qword ptr [rdi + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000003d090: push rbx; sub rsp, 0x40; mov rax, qword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rdi, rax; call qword ptr [rcx + 0x18]; 
0x000000000000f3a4: push rcx; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000003c6d7: push rdi; adc byte ptr [rbx + 4], dh; xor eax, eax; pop rbx; ret; 
0x000000000001ce8b: push rdi; adc byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 7; add rsp, 0x30; ret; 
0x000000000002c1e9: push rdi; add al, byte ptr [rax]; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x0000000000028b43: push rdi; add byte ptr [rax], al; test rax, rax; je 0x28b4d; pop rcx; ret; 
0x0000000000010195: push rdi; add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x000000000002f39b: push rdi; add eax, dword ptr [rax]; add rsp, 0x58; pop rbx; pop r14; ret; 
0x0000000000015424: push rdi; cmovl edi, dword ptr [rcx]; ret 0x860f; 
0x000000000001cb3f: push rdi; or byte ptr [rax + 1], bh; ret; 
0x000000000003f539: push rdi; sbb byte ptr [rax - 0x75], cl; jg 0x3f54f; mov rax, rdi; pop rcx; ret; 
0x000000000002ca8d: push rdx; adc byte ptr [rax - 0x7d], cl; ret 0xeb04; 
0x000000000002c747: push rdx; add al, byte ptr [rax]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002c6bd: push rdx; add al, byte ptr [rax]; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x000000000003129c: push rdx; lea rbx, [r15 - 1]; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000002c2ec: push rsi; add al, byte ptr [rax]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x00000000000138fe: push rsi; add byte ptr [rax], al; ret; 
0x0000000000012c26: push rsi; add eax, 0x5c415b00; pop r13; pop r14; pop r15; ret; 
0x000000000002f4ab: push rsi; add eax, dword ptr [rax]; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002f45a: push rsi; add eax, dword ptr [rax]; mov rax, rbx; add rsp, 0x50; pop rbx; ret; 
0x000000000002f4d7: push rsi; add eax, dword ptr [rax]; ret; 
0x000000000004b861: push rsi; and byte ptr [rax - 1], cl; ret; 
0x0000000000028bbe: push rsi; fiadd word ptr [rbx]; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x000000000001fe01: push rsi; inc byte ptr [rbp + 0x31]; jmp qword ptr [rsi + 0x2e]; 
0x000000000002750c: push rsi; ja 0x2757e; movsxd rcx, dword ptr [r14 + rdx*4]; add rcx, r14; jmp rcx; 
0x000000000001eb3f: push rsi; lea rax, [r12 - 0x2e]; lea rcx, [rip + 0x32928]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002fad7: push rsi; ret; 
0x000000000000d48a: push rsp; and al, 0x10; add rsp, 0x18; ret; 
0x000000000000a52b: push rsp; and al, 0x10; add rsp, 0x28; ret; 
0x000000000000b13e: push rsp; and al, 0x10; add rsp, 0x30; ret; 
0x000000000000fad3: push rsp; and al, 0x10; add rsp, 0x40; ret; 
0x0000000000011044: push rsp; and al, 0x10; call 0x101b0; add rsp, 0x18; ret; 
0x000000000000a98a: push rsp; and al, 0x10; call 0x105b0; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000004ad04: push rsp; and al, 0x10; call qword ptr [rip + 0x1c20b]; add rsp, 0x48; ret; 
0x000000000003fe44: push rsp; and al, 0x10; call qword ptr [rip + 0x270cb]; add rsp, 0x48; ret; 
0x0000000000015244: push rsp; and al, 0x10; call qword ptr [rip + 0x51ccb]; add rsp, 0x48; ret; 
0x00000000000151f4: push rsp; and al, 0x10; call qword ptr [rip + 0x51d1b]; add rsp, 0x48; ret; 
0x00000000000151a4: push rsp; and al, 0x10; call qword ptr [rip + 0x51d6b]; add rsp, 0x48; ret; 
0x0000000000015154: push rsp; and al, 0x10; call qword ptr [rip + 0x51dbb]; add rsp, 0x48; ret; 
0x0000000000011d81: push rsp; and al, 0x10; call qword ptr [rip + 0x5518e]; add rsp, 0x48; ret; 
0x0000000000011d41: push rsp; and al, 0x10; call qword ptr [rip + 0x551ce]; add rsp, 0x48; ret; 
0x0000000000011d01: push rsp; and al, 0x10; call qword ptr [rip + 0x5520e]; add rsp, 0x48; ret; 
0x000000000000cf26: push rsp; and al, 0x10; call rax; 
0x000000000000ce2e: push rsp; and al, 0x10; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x000000000000d480: push rsp; and al, 0x10; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000000ffe4: push rsp; and al, 0x10; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000000b177: push rsp; and al, 0x18; add rsp, 0x20; ret; 
0x000000000000f258: push rsp; and al, 0x18; add rsp, 0x58; ret; 
0x000000000000d914: push rsp; and al, 0x18; mov qword ptr [rcx], rdx; add rsp, 0x38; ret; 
0x000000000000fb19: push rsp; and al, 0x18; mov rcx, qword ptr [rsp + 0x20]; call 0xf080; add rsp, 0x28; ret; 
0x000000000000d90f: push rsp; and al, 0x18; mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rcx], rdx; add rsp, 0x38; ret; 
0x000000000000b1d8: push rsp; and al, 0x18; mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x26149]; lea rdi, [rsp + 0x38]; call rax; 
0x0000000000010dcd: push rsp; and al, 0x1c; add rsp, 0x38; ret; 
0x00000000000113b3: push rsp; and al, 0x20; add rsp, 0x38; ret; 
0x000000000004b3b6: push rsp; and al, 0x20; call qword ptr [rbp + 0x18]; 
0x000000000000d07b: push rsp; and al, 0x20; call rax; 
0x0000000000010220: push rsp; and al, 0x28; add rsp, 0x38; ret; 
0x0000000000011346: push rsp; and al, 0x28; add rsp, 0x48; ret; 
0x000000000000ecd8: push rsp; and al, 0x28; add rsp, 0x98; ret; 
0x00000000000110ae: push rsp; and al, 0x30; add rsp, 0x38; ret; 
0x000000000000f2ef: push rsp; and al, 0x30; add rsp, 0x58; ret; 
0x00000000000105a6: push rsp; and al, 0x30; add rsp, 0x68; ret; 
0x000000000000f0c7: push rsp; and al, 0x30; call qword ptr [rip + 0x579b0]; add rsp, 0x38; ret; 
0x00000000000110a5: push rsp; and al, 0x30; mov rax, qword ptr [rsp + 0x28]; mov edx, dword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x000000000000cea1: push rsp; and al, 0x37; call rax; 
0x000000000000a910: push rsp; and al, 0x38; call 0xa570; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x000000000004a182: push rsp; and al, 0x38; call qword ptr [rip + 0x1cd8d]; add rsp, 0x68; ret; 
0x000000000000c244: push rsp; and al, 0x38; call rax; 
0x0000000000034cb4: push rsp; and al, 0x38; call rbx; 
0x000000000000d85a: push rsp; and al, 0x38; mov qword ptr [rcx + 0x18], rdx; add rsp, 0xb0; ret; 
0x000000000002f817: push rsp; and al, 0x48; mov rdi, qword ptr [rbx + 0x10]; mov rax, qword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x000000000000e9f1: push rsp; and al, 0x50; mov qword ptr [rcx + 0x20], rdx; add rsp, 0x88; ret; 
0x000000000000d1b2: push rsp; and al, 0x78; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x98; ret; 
0x000000000000d1ad: push rsp; and al, 0x78; mov rdx, qword ptr [rsp + 0x78]; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x98; ret; 
0x000000000000a7b3: push rsp; and al, 8; add rsp, 0x10; ret; 
0x000000000000a81d: push rsp; and al, 8; add rsp, 0x18; ret; 
0x000000000000cc8e: push rsp; and al, 8; add rsp, 0x20; ret; 
0x00000000000110f7: push rsp; and al, 8; add rsp, 0x28; ret; 
0x000000000000d35b: push rsp; and al, 8; add rsp, 0x30; ret; 
0x000000000000fdcd: push rsp; and al, 8; mov rax, qword ptr [rsp + 0x10]; add rsp, 0xb8; ret; 
0x000000000000ff7d: push rsp; and al, 8; mov rax, qword ptr [rsp + 0x10]; add rsp, 0xe8; ret; 
0x000000000004af5c: push rsp; sub byte ptr [rax], cl; call qword ptr [rcx + 0x18]; 
0x00000000000315ea: pushfq; add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x0000000000011a8f: pushfq; add dword ptr [rax], eax; pop rcx; ret; 
0x0000000000013270: pushfq; cmp al, byte ptr [rip + 0x5c415b00]; pop r13; pop r14; pop r15; ret; 
0x000000000004a77c: pushfq; stosd dword ptr [rdi], eax; add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000001ea74: pushfq; sub dword ptr [rbx], eax; add byte ptr [rax + 0x63], cl; add al, 0x8a; add rax, rdx; jmp rax; 
0x0000000000007e1a: rcl byte ptr [rcx], cl; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x000000000000e16a: rcl byte ptr [rdi + 5], cl; add byte ptr [rax - 0x73], cl; add eax, 0xffffb42b; call rax; 
0x000000000002b723: rcr byte ptr [rbx + 0x41], 0x5c; pop r13; pop r14; pop r15; ret; 
0x0000000000028a49: rcr byte ptr [rbx + 0x41], 0x5e; pop r15; ret; 
0x0000000000016b91: ret 0; 
0x00000000000070fb: ret 0x1074; 
0x000000000001d9f5: ret 0x13b0; 
0x0000000000038606: ret 0x13c; 
0x00000000000461d2: ret 0x144; 
0x000000000004cc0b: ret 0x148; 
0x0000000000048f59: ret 0x148d; 
0x000000000001c462: ret 0x149; 
0x00000000000298a8: ret 0x15ff; 
0x0000000000047bf2: ret 0x17eb; 
0x000000000004e6d2: ret 0x181; 
0x000000000003d38a: ret 0x1b8; 
0x00000000000385fe: ret 0x1ba; 
0x000000000000ccc7: ret 0x1c72; 
0x000000000003562e: ret 0x1ce8; 
0x000000000004e4bb: ret 0x1f0f; 
0x000000000004660a: ret 0x214c; 
0x00000000000070f8: ret 0x2166; 
0x0000000000016937: ret 0x228; 
0x0000000000041a9a: ret 0x254; 
0x000000000002ba36: ret 0x25e; 
0x000000000004e75b: ret 0x2710; 
0x00000000000115cd: ret 0x280f; 
0x000000000002af90: ret 0x2948; 
0x00000000000306e7: ret 0x298b; 
0x000000000001d420: ret 0x2ae8; 
0x0000000000025981: ret 0x2b48; 
0x0000000000032a64: ret 0x2b8; 
0x000000000003aa72: ret 0x2c3; 
0x0000000000041756: ret 0x3074; 
0x0000000000021527: ret 0x3110; 
0x00000000000159dd: ret 0x3145; 
0x0000000000032a5a: ret 0x33e; 
0x00000000000310ba: ret 0x357; 
0x000000000002fbaa: ret 0x373; 
0x000000000002f26a: ret 0x375; 
0x0000000000035113: ret 0x37e8; 
0x000000000002e872: ret 0x37f; 
0x00000000000141d1: ret 0x3948; 
0x0000000000014775: ret 0x3949; 
0x0000000000014299: ret 0x394c; 
0x0000000000014079: ret 0x394d; 
0x000000000003702e: ret 0x3a; 
0x0000000000035810: ret 0x3ae8; 
0x0000000000031c81: ret 0x3b66; 
0x00000000000296b2: ret 0x3d7; 
0x000000000004af2d: ret 0x3eb; 
0x000000000000e39c: ret 0x3ee8; 
0x000000000002715d: ret 0x3fe9; 
0x000000000003dcdb: ret 0x40f8; 
0x00000000000418e9: ret 0x41e3; 
0x0000000000045ba5: ret 0x428d; 
0x000000000000881d: ret 0x4475; 
0x000000000002b96f: ret 0x4489; 
0x0000000000010d93: ret 0x448a; 
0x0000000000010e57: ret 0x448b; 
0x0000000000049df5: ret 0x44d0; 
0x000000000000977a: ret 0x456; 
0x0000000000007179: ret 0x4774; 
0x000000000000f3a8: ret 0x4801; 
0x0000000000023f51: ret 0x4802; 
0x000000000004d63d: ret 0x4804; 
0x0000000000023ce5: ret 0x4808; 
0x000000000002b2e2: ret 0x4810; 
0x000000000001438e: ret 0x4818; 
0x0000000000025d13: ret 0x4820; 
0x00000000000362b9: ret 0x4838; 
0x000000000002a015: ret 0x4840; 
0x000000000004d02c: ret 0x4866; 
0x000000000001fb85: ret 0x48e0; 
0x0000000000037e85: ret 0x48e8; 
0x0000000000021539: ret 0x48f0; 
0x000000000003c456: ret 0x48f8; 
0x000000000001c4a3: ret 0x48fc; 
0x000000000003bf93: ret 0x48fd; 
0x0000000000014cb7: ret 0x48fe; 
0x000000000001d87e: ret 0x4902; 
0x000000000003cdac: ret 0x4908; 
0x00000000000217ea: ret 0x4920; 
0x000000000001adb8: ret 0x49fc; 
0x000000000001ad90: ret 0x49fe; 
0x00000000000454fe: ret 0x4b8d; 
0x0000000000046677: ret 0x4c02; 
0x0000000000017e22: ret 0x4c1; 
0x0000000000047d6d: ret 0x4c89; 
0x000000000001c484: ret 0x4cfe; 
0x00000000000254a7: ret 0x4de0; 
0x00000000000354fd: ret 0x4de8; 
0x000000000003f66e: ret 0x4e78; 
0x0000000000011682: ret 0x529; 
0x000000000003eab6: ret 0x540; 
0x000000000001412b: ret 0x5488; 
0x0000000000034ff2: ret 0x58e8; 
0x000000000000882a: ret 0x5bf; 
0x000000000003d608: ret 0x5c8b; 
0x0000000000008c52: ret 0x5dd; 
0x0000000000008df2: ret 0x5e2; 
0x0000000000008082: ret 0x5e9; 
0x00000000000351e8: ret 0x62e8; 
0x000000000004cf04: ret 0x6620; 
0x000000000004e853: ret 0x6666; 
0x000000000004d027: ret 0x66ee; 
0x000000000001993f: ret 0x6948; 
0x00000000000355e1: ret 0x69e8; 
0x000000000001950f: ret 0x6b48; 
0x00000000000487c8: ret 0x6eb; 
0x00000000000357d7: ret 0x73e8; 
0x00000000000411bb: ret 0x7401; 
0x0000000000046e92: ret 0x7402; 
0x0000000000046e67: ret 0x7502; 
0x000000000001164a: ret 0x75f8; 
0x00000000000462cc: ret 0x75fc; 
0x000000000001d5df: ret 0x7c6; 
0x000000000002c34e: ret 0x7c80; 
0x000000000004d8af: ret 0x800f; 
0x0000000000048790: ret 0x8040; 
0x00000000000350ca: ret 0x80e8; 
0x000000000003c024: ret 0x80fd; 
0x00000000000078b1: ret 0x820f; 
0x000000000000784e: ret 0x830f; 
0x0000000000011531: ret 0x8348; 
0x00000000000389d9: ret 0x8349; 
0x00000000000227cc: ret 0x8366; 
0x000000000003f632: ret 0x839f; 
0x0000000000045bda: ret 0x83c6; 
0x000000000004e165: ret 0x83d0; 
0x0000000000007129: ret 0x840f; 
0x00000000000325e7: ret 0x8545; 
0x0000000000018935: ret 0x8548; 
0x0000000000015428: ret 0x860f; 
0x000000000004de37: ret 0x870f; 
0x000000000004e7e4: ret 0x8830; 
0x00000000000470ad: ret 0x8841; 
0x00000000000356c2: ret 0x88e8; 
0x00000000000473dc: ret 0x8910; 
0x000000000004f050: ret 0x8944; 
0x0000000000007bc9: ret 0x8948; 
0x0000000000014202: ret 0x8949; 
0x00000000000168eb: ret 0x894c; 
0x00000000000078ab: ret 0x894d; 
0x0000000000041c3e: ret 0x89e3; 
0x000000000001ebe0: ret 0x8b48; 
0x000000000001203d: ret 0x8b49; 
0x00000000000362ab: ret 0x8b4c; 
0x0000000000045554: ret 0x8d04; 
0x0000000000007a1f: ret 0x8d48; 
0x000000000001f4f9: ret 0x8d49; 
0x000000000001164d: ret 0x8d4b; 
0x000000000004d4fd: ret 0x8feb; 
0x000000000001444d: ret 0x9066; 
0x0000000000034c4d: ret 0x948; 
0x00000000000352b5: ret 0x95e8; 
0x00000000000354b0: ret 0x9ae8; 
0x0000000000034fac: ret 0x9ee8; 
0x0000000000046b99: ret 0xa4eb; 
0x0000000000018718: ret 0xa575; 
0x00000000000351a2: ret 0xa8e8; 
0x0000000000048d22: ret 0xa940; 
0x000000000003579e: ret 0xace8; 
0x0000000000035597: ret 0xb3e8; 
0x000000000001bba4: ret 0xb60f; 
0x000000000003d36c: ret 0xb70f; 
0x000000000003f635: ret 0xb80a; 
0x000000000003d3a6: ret 0xb810; 
0x000000000003d3c8: ret 0xb820; 
0x000000000003d361: ret 0xb8f0; 
0x000000000003f88b: ret 0xbb0a; 
0x00000000000149a2: ret 0xbb75; 
0x000000000003523f: ret 0xbe8; 
0x000000000003c81b: ret 0xbf0c; 
0x000000000001721d: ret 0xc031; 
0x0000000000045562: ret 0xc102; 
0x000000000004557a: ret 0xc103; 
0x0000000000007339: ret 0xc148; 
0x0000000000019eef: ret 0xc183; 
0x0000000000014129: ret 0xc208; 
0x0000000000049e3f: ret 0xc383; 
0x0000000000048075: ret 0xc5e9; 
0x0000000000035084: ret 0xc6e8; 
0x0000000000008bc3: ret 0xc748; 
0x00000000000172ad: ret 0xc749; 
0x000000000004e27c: ret 0xc783; 
0x0000000000049e51: ret 0xc801; 
0x000000000001cfc6: ret 0xc8ff; 
0x0000000000048f8e: ret 0xc901; 
0x00000000000454f2: ret 0xc974; 
0x000000000004638d: ret 0xc9fe; 
0x0000000000007e6a: ret 0xc; 
0x00000000000390c3: ret 0xca73; 
0x0000000000035280: ret 0xcae8; 
0x0000000000014304: ret 0xceb; 
0x00000000000394fd: ret 0xcfeb; 
0x000000000001796d: ret 0xd089; 
0x000000000001476c: ret 0xd149; 
0x0000000000032bc1: ret 0xd184; 
0x000000000001fa95: ret 0xd231; 
0x0000000000035678: ret 0xd2e8; 
0x000000000004597f: ret 0xdb84; 
0x000000000001affd: ret 0xdb85; 
0x000000000002fb47: ret 0xdeb; 
0x000000000001c36f: ret 0xe0ff; 
0x000000000001a0f2: ret 0xe283; 
0x000000000002c1f2: ret 0xe2ff; 
0x0000000000045974: ret 0xe889; 
0x000000000003554a: ret 0xe8; 
0x000000000004e7ad: ret 0xe8c1; 
0x0000000000024c10: ret 0xeac1; 
0x000000000002c048: ret 0xeb02; 
0x000000000002c000: ret 0xeb04; 
0x000000000002c39d: ret 0xeb07; 
0x000000000002c024: ret 0xeb08; 
0x00000000000418d2: ret 0xeba9; 
0x0000000000023a95: ret 0xed31; 
0x000000000004de5f: ret 0xee75; 
0x00000000000074c1: ret 0xeeb; 
0x0000000000046346: ret 0xeec1; 
0x000000000003515c: ret 0xeee8; 
0x0000000000040ab6: ret 0xf02; 
0x00000000000222d5: ret 0xf03; 
0x0000000000045298: ret 0xf06; 
0x0000000000035759: ret 0xf1e8; 
0x0000000000038dc3: ret 0xf20; 
0x000000000002c3b2: ret 0xf280; 
0x0000000000038240: ret 0xf40; 
0x000000000003c67a: ret 0xf41; 
0x0000000000031854: ret 0xf48; 
0x0000000000047c38: ret 0xf640; 
0x0000000000023cd7: ret 0xf66; 
0x000000000002182a: ret 0xf748; 
0x000000000003d560: ret 0xf749; 
0x000000000003f63e: ret 0xf883; 
0x000000000001a7c0: ret 0xf983; 
0x0000000000045b6d: ret 0xfa09; 
0x000000000001dd49: ret 0xfb80; 
0x000000000003bada: ret 0xfd6e; 
0x000000000004b4bc: ret 0xfd81; 
0x000000000003503b: ret 0xfe8; 
0x00000000000362a6: ret 0xff31; 
0x000000000002a001: ret 0xff3; 
0x000000000003c686: ret 0xff3d; 
0x000000000001ac46: ret 0xff48; 
0x000000000001ec9c: ret 0xff49; 
0x00000000000468c2: ret 0xff58; 
0x00000000000247f9: ret 0xffbb; 
0x0000000000020038: ret 0xffe0; 
0x0000000000008d9a: ret 0xffe2; 
0x000000000004cd11: ret 0xffe; 
0x000000000004900a: ret 0xfff1; 
0x000000000004422a: ret 0xfff2; 
0x000000000001ef53: ret 0xfffb; 
0x000000000002adfb: ret 0xfffd; 
0x0000000000026bd0: ret 0xfffe; 
0x0000000000017339: ret 0xffff; 
0x000000000001a44c: ret 1; 
0x000000000003a754: ret 2; 
0x000000000002a7a2: ret 3; 
0x000000000001b467: ret 4; 
0x0000000000015bda: ret; 
0x00000000000252c2: retf 0x148; ret 0x840f; 
0x000000000004a0f6: retf 0x15ff; jae 0x4a0c9; add dword ptr [rax], eax; mov rax, rbx; pop rbx; ret; 
0x0000000000032f6a: retf 0x33e; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000004a5fb: retf 0x4802; mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x00000000000121b2: retf 0x548; add byte ptr [rbx + 0x41], bl; pop rsi; pop r15; ret; 
0x000000000003f62f: retf 0x8320; ret 0x839f; 
0x000000000002b10f: retf 0x8348; ret 0x4808; 
0x000000000002a012: retf 0x8348; ret 0x4840; 
0x00000000000149b5: retf 0x840f; ret; 
0x0000000000041a94: retf 0x8948; sar edi, 0x15; ret 0x254; 
0x0000000000033176: retf 0xe2ff; mov al, 1; ret; 
0x000000000001e370: retf 0xe2ff; mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; mov qword ptr [rdi], rax; ret; 
0x0000000000015535: retf 3; add byte ptr [rax - 1], cl; ret; 
0x0000000000023f3c: retf; add al, byte ptr [rax]; add byte ptr [rbp - 0x77], cl; ret 0x8b48; 
0x0000000000014fe1: retf; add word ptr [rax], ax; pop rcx; ret; 
0x000000000000b52c: retf; mov rdi, qword ptr [rsp + 0x28]; call 0x7060; ud2; lea rax, [rip - 0x1f20]; call rax; 
0x000000000000b86c: retf; mov rdi, qword ptr [rsp + 0x28]; call 0x7060; ud2; lea rax, [rip - 0x2260]; call rax; 
0x0000000000037256: rol byte ptr [rax + 0xf084979], cl; xchg eax, esp; ret 0x8b48; 
0x000000000002c73a: rol byte ptr [rax], 0; add byte ptr [rax + 6], bh; lea rdx, [rip + 0x2524a]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000000306e2: rol byte ptr [rax], 0; add byte ptr [rcx], cl; ret 0x298b; 
0x000000000000b1fb: rol byte ptr [rax], 1; add byte ptr [rax], al; call 0x7078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x000000000000dbcd: rol byte ptr [rax], 1; add byte ptr [rax], al; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x138; ret; 
0x000000000004e17f: rol byte ptr [rbp + 0x31], cl; ror byte ptr [rcx + rcx - 0x40], 0x48; or eax, edx; pop rbx; ret; 
0x000000000000c638: rol byte ptr [rcx - 0x77], 0xc0; call 0xcca0; lea rdi, [rsp + 0x88]; call qword ptr [rip + 0x5a391]; add rsp, 0x318; ret; 
0x000000000004e2a0: rol byte ptr [rcx - 0x78], 0; mov rax, r8; ret; 
0x000000000001cb90: rol byte ptr [rsi + 3], 0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000018714: rol byte ptr [rsp + rcx*2], 0x39; ret 0xa575; 
0x0000000000046599: rol dword ptr [rax + rcx*2], 0xff; ret 0xff49; 
0x000000000003d267: rol dword ptr [rbp + 0x660d74c0], 0xf; mov esp, 0xd0b70fc0; mov eax, 1; ret; 
0x000000000004ee71: rol dword ptr [rbx - 0x7c7e39], 0x21; setb al; or al, cl; ret; 
0x000000000004ad5d: rol dword ptr [rcx], 0; add rsp, 0x38; ret; 
0x000000000000a208: rol dword ptr [rcx], 0xe8; and dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000a1d8: rol dword ptr [rcx], 0xe8; jno 0xa1dd; add byte ptr [rax], al; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000002441c: rol dword ptr [rdx], 1; add byte ptr [rax + 0x63], cl; or al, 0x8a; add rcx, rdx; jmp rcx; 
0x0000000000024402: rol dword ptr [rdx], 1; add byte ptr [rax + 0x63], cl; xor al, 0xb7; add rsi, rdi; jmp rsi; 
0x0000000000007331: rol ecx, 0xe1; or eax, 0x8948c131; ret 0xc148; 
0x000000000003dc44: ror byte ptr [r8 - 1], cl; ret; 
0x000000000002cae8: ror byte ptr [rax + 0x39], 1; ret; 
0x000000000001d983: ror byte ptr [rax + 1], 0xe9; lea r8, [rip + 0x339ae]; movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x000000000001a908: ror byte ptr [rax + 1], cl; ret 0x8948; 
0x000000000004e12d: ror byte ptr [rax + 9], 0xd0; pop rbx; ret; 
0x000000000001aeaf: ror byte ptr [rax - 0x39], cl; ret; 
0x000000000004cc04: ror byte ptr [rax - 0x73], 0x71; add dword ptr [rdi], ecx; popfq; ret 0x148; 
0x000000000003db41: ror byte ptr [rax - 0x73], 1; adc eax, 0x16427; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x000000000000c5bf: ror byte ptr [rax - 0x73], 1; add eax, 0x1de89; call rax; 
0x000000000000c176: ror byte ptr [rax - 0x73], 1; add eax, 0x21832; mov edi, 1; call rax; 
0x000000000001eb44: ror byte ptr [rax - 0x73], cl; or eax, 0x32928; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004a427: ror byte ptr [rax - 0x75], 0x4c; and al, 0x18; mov byte ptr [rcx], al; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000004d23e: ror byte ptr [rax - 0x77], 1; int1; cmp rsi, rdi; jne 0x4d230; ret; 
0x0000000000014772: ror byte ptr [rax - 0x77], 1; ret 0x3949; 
0x000000000003d44e: ror byte ptr [rax - 0x77], 3; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000032fd1: ror byte ptr [rax - 0x77], 3; mov rax, rbx; pop rbx; ret; 
0x0000000000030fee: ror byte ptr [rax - 0x77], 3; pop rbx; ret; 
0x000000000002bd34: ror byte ptr [rax - 0x77], 5; test byte ptr [rbx - 0x2776fffd], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000001ce8e: ror byte ptr [rax - 0x77], 7; add rsp, 0x30; ret; 
0x00000000000390bd: ror byte ptr [rax - 0x77], cl; fisttp qword ptr [rax + 0x39]; ret 0xca73; 
0x0000000000011cac: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x41], bl; pop rsi; pop r15; ret; 
0x0000000000015e05: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x0000000000042091: ror byte ptr [rax - 0x7d], 0xc4; and byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x000000000002fb63: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x41], bl; pop rsi; pop r15; pop rbp; ret; 
0x000000000003d1f6: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x00000000000152af: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; ret; 
0x0000000000049e6b: ror byte ptr [rax - 0x7d], 0xc4; pop rbx; pop r14; pop r15; pop rbp; ret; 
0x000000000002b55a: ror byte ptr [rax - 0x7d], 0xc4; pop rbx; pop r14; pop r15; ret; 
0x0000000000041d46: ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x000000000000ce6a: ror byte ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 9], dh; mov eax, dword ptr [rsp + 0x24]; add rsp, 0x48; ret; 
0x000000000000f56f: ror byte ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + rcx - 0x15], dh; sub ecx, dword ptr [rax - 0x73]; add eax, 0x39d91; call rax; 
0x000000000003dc45: ror byte ptr [rax - 1], cl; ret; 
0x000000000001a905: ror byte ptr [rax - 9], cl; ror byte ptr [rax + 1], cl; ret 0x8948; 
0x0000000000010820: ror byte ptr [rax], 0x48; mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp + 8]; add rsp, 0x78; ret; 
0x000000000004ee7a: ror byte ptr [rax], 0xc8; ret; 
0x0000000000008720: ror byte ptr [rcx + 0x63], 4; test byte ptr [rcx + rax - 0x20], cl; jmp rax; 
0x000000000001d980: ror byte ptr [rcx + rax - 0x40], 1; add rcx, rbp; lea r8, [rip + 0x339ae]; movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x000000000004e13f: ror byte ptr [rcx + rcx - 0x40], 0x48; or eax, edx; pop rbx; ret; 
0x000000000004e12a: ror byte ptr [rcx + rcx - 0x40], cl; or rax, rdx; pop rbx; ret; 
0x000000000004f084: ror byte ptr [rcx + rcx*4 - 0x26], 1; ret; 
0x000000000000a559: ror byte ptr [rcx - 0x330173f], 0xff; dec dword ptr [rax - 0x75]; add al, 0x24; pop rcx; ret; 
0x000000000004adc3: ror byte ptr [rdi], 0x84; add word ptr [rax], ax; add byte ptr [rcx - 0x75], cl; pop rdi; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000004aeb3: ror byte ptr [rdi], 0x85; lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000028cf7: ror byte ptr [rdi], 0x85; ret 0; 
0x000000000002beff: ror byte ptr [rdi], 0x85; ret 1; 
0x0000000000044849: ror byte ptr [rdi], 0x85; ret 2; 
0x000000000002bd12: ror byte ptr [rdi], 0x94; ret; 
0x0000000000015bd7: ror byte ptr [rdi], 0x95; ret; 
0x000000000004cdcf: ror byte ptr [rdi], 0x9d; ret 0x148; 
0x000000000001d746: ror byte ptr [rdi], 0xb6; ror dword ptr [rdi], 0x44; ret; 
0x000000000003d26f: ror byte ptr [rdi], 0xb7; sar byte ptr [rax + 1], 1; ret; 
0x00000000000111ef: ror byte ptr [rdi], 1; or ecx, dword ptr [rax - 0x75]; and al, 0x28; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x00000000000102c7: ror byte ptr [rdi], 1; or ecx, dword ptr [rdx + 0x48272444]; add esp, 0x28; ret; 
0x000000000004597c: ror byte ptr [rdi], 1; xchg eax, edx; ret 0xdb84; 
0x000000000001d868: ror byte ptr [rdi], cl; mov ecx, ebx; add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret; 
0x000000000001a829: ror byte ptr [rdi], cl; xchg eax, ebp; ret; 
0x000000000004a00d: ror dword ptr [r8 - 0x7b], 0xf6; je 0x4a039; dec rsi; mov qword ptr [rdi], rsi; ret; 
0x000000000003d387: ror dword ptr [rax + 1], 1; ret 0x1b8; 
0x000000000001a7ca: ror dword ptr [rax + 9], cl; ret; 
0x0000000000035620: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x1ce8; 
0x0000000000035802: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x3ae8; 
0x00000000000356fe: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x3ee8; 
0x00000000000354ef: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x4de8; 
0x00000000000355d3: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x69e8; 
0x00000000000357c9: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x73e8; 
0x00000000000356b4: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x88e8; 
0x00000000000354a2: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x9ae8; 
0x0000000000035790: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xace8; 
0x0000000000035589: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xb3e8; 
0x000000000003566a: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xd2e8; 
0x000000000003553c: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xe8; 
0x000000000003574b: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xf1e8; 
0x000000000002fb1b: ror dword ptr [rax - 0x73], 1; or eax, 0x21eed; movsxd rdi, dword ptr [rcx + rdx*4]; add rdi, rcx; jmp rdi; 
0x000000000004edcb: ror dword ptr [rax - 0x75], 0x3e; mov rcx, qword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rsi, rax; jmp rcx; 
0x000000000002557a: ror dword ptr [rax - 0x77], cl; and al, 0x18; mov edi, 0x100; mov esi, 8; call rbx; 
0x0000000000038ec3: ror dword ptr [rax - 0x77], cl; and al, 0x58; mov edi, 0x100; mov esi, 8; call rbx; 
0x0000000000034cb8: ror dword ptr [rax - 0x77], cl; out dx, eax; mov esi, 1; xor edx, edx; call rbx; 
0x000000000004a00e: ror dword ptr [rax - 0x7b], 0xf6; je 0x4a039; dec rsi; mov qword ptr [rdi], rsi; ret; 
0x000000000000bca6: ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 2], dh; pop rax; ret; 
0x000000000000cef0: ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 5], dh; add rsp, 0x28; ret; 
0x000000000000c1a7: ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 5], dh; add rsp, 0x78; ret; 
0x000000000001cbd9: ror dword ptr [rax - 0x7f], 0xfa; add byte ptr [rcx], al; add byte ptr [rax], al; setb al; and al, cl; ret; 
0x000000000003d240: ror dword ptr [rax - 1], 0xc2; cmp rcx, r8; jb 0x3d230; ret; 
0x00000000000418ed: ror dword ptr [rax - 1], cl; ret; 
0x000000000001ab38: ror dword ptr [rbp - 0x67c00b8], 0x2b; ja 0x1abf9; movsxd rax, dword ptr [r9 + rcx*4]; add rax, r9; jmp rax; 
0x0000000000047288: ror dword ptr [rbp - 0x77], 1; ret; 
0x000000000001ecf1: ror dword ptr [rcx + 0x29], cl; ret; 
0x000000000000b347: ror dword ptr [rcx + 0x4c8948d0], 0x24; sbb byte ptr [rcx - 0x14dfdbbc], cl; in al, 0x8b; and al, 4; add rsp, 0x28; ret; 
0x000000000000cfd3: ror dword ptr [rcx + 0x4c8948d0], 0x24; sbb byte ptr [rcx - 0x14dfdbbc], cl; in al, 0xf; or ecx, dword ptr [rax - 0x73]; add eax, 0xffffc636; call rax; 
0x000000000000cf3b: ror dword ptr [rcx + 0x4c8948d0], 0x24; sbb byte ptr [rcx - 0x14dfdbbc], cl; in al, 0xf; or ecx, dword ptr [rax - 0x73]; add eax, 0xffffc6ce; call rax; 
0x000000000000d090: ror dword ptr [rcx + 0x4c8948d0], 0x24; sub byte ptr [rcx - 0x14cfdbbc], cl; in al, 0xf; or ecx, dword ptr [rax - 0x73]; add eax, 0xffffc579; call rax; 
0x0000000000008b90: ror dword ptr [rcx + 0x63], 0xc; mov word ptr [rcx + rax - 0x1f], cs; jmp rcx; 
0x000000000004f199: ror dword ptr [rcx + rcx*4 - 0x28], cl; mov rdx, rsi; ret; 
0x000000000004ea56: ror dword ptr [rcx - 0x7f], 0xfb; jmp rax; 
0x000000000004178b: ror dword ptr [rcx - 9], 1; fmul dword ptr [rcx + rcx*4 + 0xf]; mov qword ptr [rdi + 8], r8; pop rbx; ret; 
0x000000000001d749: ror dword ptr [rdi], 0x44; ret; 
0x000000000004c24f: ror dword ptr [rsi + 0x63480000], 1; or al, 0x88; add rcx, rax; jmp rcx; 
0x000000000000c689: ror edi, cl; add eax, dword ptr [rax]; lea rdi, [rsp + 0x268]; mov edx, 1; mov ecx, 0x4a; call rax; 
0x0000000000044ffe: sahf; add byte ptr [rax], al; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000004a60b: sahf; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; mov rsi, r14; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x0000000000015bd4: sal al, 0x84; ror byte ptr [rdi], 0x95; ret; 
0x0000000000037e80: sal byte ptr [rax + 0x49], 0x83; ret 0x48e8; 
0x0000000000009a8d: sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x000000000002e734: sal byte ptr [rax + rcx*2 + 0x48], 0x89; ret; 
0x00000000000330d1: sal byte ptr [rax + rsi*2 + 0x48], 0x89; ret; 
0x000000000002ad65: sal byte ptr [rbp + 0x10], 0x48; add esp, 0xb0; pop rbx; ret; 
0x000000000004e358: sal byte ptr [rbp + 0x18], 0x49; mov edi, dword ptr [rsi]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x6e69]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004badd: sal byte ptr [rbp + 0x18], 0x49; mov edi, dword ptr [rsi]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x96e4]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bbb6: sal byte ptr [rbp + 0x19], 0x48; mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x960a]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004183e: sal byte ptr [rbp + 0xa], 0xc6; add dword ptr [r8], r8d; mov al, 1; mov byte ptr [rdi], al; pop rbx; ret; 
0x0000000000041b7b: sal byte ptr [rbp + 0xc], 0x4c; mov dword ptr [rbx + 0x20], esi; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002e85b: sal byte ptr [rbp + 6], 0x48; mov eax, dword ptr [rsp]; pop rcx; ret; 
0x000000000003d269: sal byte ptr [rbp + rcx + 0x66], 0xf; mov esp, 0xd0b70fc0; mov eax, 1; ret; 
0x000000000004aef7: sal byte ptr [rbp + rdx + 0x48], cl; mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000004a609: sal byte ptr [rbp - 0x62], 0x48; mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; mov rsi, r14; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000004a61e: sal byte ptr [rbp - 0x77], 0x48; mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xace0]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000030516: sal byte ptr [rbx + rbp*2 + 0x49], 0x83; jmp qword ptr [rcx]; 
0x00000000000170e0: sal byte ptr [rbx + rdi*2 + 0x48], 0x8d; dec qword ptr [rax - 0x77]; ret 0x8348; 
0x000000000004ade5: sal byte ptr [rcx + rbx + 0x48], cl; mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x0000000000009a4c: sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x000000000004e128: sal byte ptr [rcx], 0xd2; or rax, r8; or rax, rdx; pop rbx; ret; 
0x0000000000030363: sal byte ptr [rcx], 1; rcr byte ptr [rbx + 0x41], 0x5e; pop r15; ret; 
0x000000000002e647: sal byte ptr [rdi + rcx + 0x4a], 0x8b; cmp al, 0x2b; call rax; 
0x000000000000700d: sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000049f3c: sal byte ptr [rdx + rcx - 0x50], 1; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000045e94: sal byte ptr [rdx + rcx - 0x50], 1; add rsp, 0x68; pop rbx; pop r14; ret; 
0x00000000000171ad: sal byte ptr [rsi + rbp*2 + 0x48], 0x8d; dec qword ptr [rax - 0x77]; ret 0x8348; 
0x000000000002f72c: sal byte ptr [rsp + rcx*2 + 0x48], 0x89; ret; 
0x0000000000031c75: sal byte ptr [rsp + rcx*2 + 0xf], 0xb7; mov bl, byte ptr [rax]; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x3b66; 
0x000000000001bb90: sal dh, cl; ret; 
0x00000000000272ab: sal dword ptr [rax + 0x48], 0xc7; ret; 
0x000000000004ef99: sal dword ptr [rbp - 0x1c], 1; mov rax, r9; and al, 1; pop rcx; ret; 
0x0000000000045bd6: sal dword ptr [rdx + 8], 0x83; ret 0x83c6; 
0x000000000001541f: sal dword ptr [rsi + rbx*8 + 0x49], 0x8d; push rdi; cmovl edi, dword ptr [rcx]; ret 0x860f; 
0x00000000000115ca: sar al, 0x75; ret 0x280f; 
0x000000000001721a: sar al, 0x75; ret 0xc031; 
0x000000000000868a: sar bh, 0x15; mul esp; add eax, 0xc0854800; jle 0x863a; pop rbx; ret; 
0x0000000000032a57: sar bh, 0x15; ret 0x33e; 
0x000000000001127e: sar bh, 0xff; add rsp, 0x28; ret; 
0x000000000003d272: sar byte ptr [rax + 1], 1; ret; 
0x0000000000041740: sar byte ptr [rbp + 0x11], 0xeb; and esi, eax; or byte ptr [r8], r8b; mov qword ptr [rdi], 0; pop rbx; ret; 
0x0000000000008426: sar byte ptr [rcx + 8], 0x41; call rsp; 
0x000000000004e1de: sar byte ptr [rdx + 0x100], 0x4c; or eax, eax; or rax, rdx; pop rbx; ret; 
0x0000000000008693: sar byte ptr [rsi - 0x5c], 0x5b; ret; 
0x0000000000041973: sar dword ptr [rax + 0x110000], 0x48; cmovae eax, edx; shl rax, 0x20; or rax, rcx; ret; 
0x000000000002034f: sar dword ptr [rdx + 8], cl; mov rdi, r12; mov rsi, qword ptr [rsp + 0x168]; call rbx; 
0x0000000000021d57: sar dword ptr [rdx + 8], cl; mov rdi, r13; mov rsi, qword ptr [rsp + 0x1b8]; call rbx; 
0x0000000000039647: sar dword ptr [rdx + 8], cl; mov rdi, r15; mov rsi, qword ptr [rsp + 0x550]; call rbx; 
0x000000000002babe: sar dword ptr [rsi + 0x18], cl; mov edx, 8; mov rdi, rbp; call rbx; 
0x00000000000172aa: sar eax, 0x75; ret 0xc749; 
0x0000000000041a97: sar edi, 0x15; ret 0x254; 
0x0000000000009a80: sar esi, 1; je 0x9a98; mov rax, qword ptr [rip + 0x5d485]; test rax, rax; je 0x9a98; jmp rax; 
0x0000000000009a7f: sar rsi, 1; je 0x9a98; mov rax, qword ptr [rip + 0x5d485]; test rax, rax; je 0x9a98; jmp rax; 
0x000000000001ca6c: sbb al, 0; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x00000000000291f6: sbb al, 0x20; add byte ptr [rax - 1], cl; ret; 
0x0000000000010dcf: sbb al, 0x48; add esp, 0x38; ret; 
0x000000000004e0b6: sbb al, 0x48; mov edi, dword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x7258]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000000e18d: sbb al, 0x48; mov esi, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x28]; lea rdx, [rip + 0x557b9]; lea rax, [rip - 0x4c06]; call rax; 
0x000000000000e334: sbb al, 0x48; mov esi, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 8]; lea rdx, [rip + 0x55642]; lea rax, [rip - 0x4dad]; call rax; 
0x000000000002f7ee: sbb al, 0x4c; mov edi, edi; call rax; 
0x00000000000465bb: sbb al, 0x80; add rbx, rax; jmp rbx; 
0x000000000004bc04: sbb al, 0x97; add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000024f73: sbb al, 4; add byte ptr [rax - 1], cl; ret; 
0x000000000000b772: sbb al, byte ptr [rax]; add byte ptr [rax], al; pop rax; ret; 
0x00000000000454f7: sbb al, byte ptr [rbx + rbx*8 - 0xb7eb88]; ret 0x4b8d; 
0x000000000004668e: sbb al, byte ptr [rcx]; add byte ptr [rax], al; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + rcx], al; pop rbx; ret; 
0x000000000000a5a9: sbb al, byte ptr [rdx]; add byte ptr [rax], al; pop rcx; ret; 
0x000000000000b022: sbb al, ch; push 0x48000004; add esp, 0x38; ret; 
0x000000000000b0b2: sbb al, ch; sbb byte ptr [rdi], al; add byte ptr [rax], al; add rsp, 0x38; ret; 
0x0000000000042956: sbb ax, word ptr [rax]; add byte ptr [rax + rax*8 - 0xb7eb8b], al; ret; 
0x00000000000116e3: sbb bh, al; test eax, 0x89a76c34; ret; 
0x00000000000157ae: sbb bh, bh; jmp qword ptr [rsi + 0xf]; 
0x000000000002fb41: sbb bh, bh; push rax; sub byte ptr [rax - 0x77], cl; ret 0xdeb; 
0x000000000000b3de: sbb bl, al; lea rax, [rip - 0x1dc7]; call rax; 
0x000000000000b46e: sbb bl, al; lea rax, [rip - 0x1e57]; call rax; 
0x000000000000b606: sbb bl, al; lea rax, [rip - 0x1fef]; call rax; 
0x000000000000b66e: sbb bl, al; lea rax, [rip - 0x2057]; call rax; 
0x000000000000b706: sbb bl, al; lea rax, [rip - 0x20ef]; call rax; 
0x000000000000b756: sbb bl, al; lea rax, [rip - 0x213f]; call rax; 
0x000000000000b996: sbb bl, al; lea rax, [rip - 0x237f]; call rax; 
0x000000000000ba2f: sbb bl, al; lea rax, [rip - 0x2418]; call rax; 
0x000000000000bc66: sbb bl, al; lea rax, [rip - 0x264f]; call rax; 
0x000000000000c941: sbb bl, ch; add byte ptr [rax - 0x73], cl; add eax, 0x21055; call rax; 
0x0000000000030361: sbb bl, ch; sal byte ptr [rcx], 1; rcr byte ptr [rbx + 0x41], 0x5e; pop r15; ret; 
0x000000000003c6e5: sbb byte ptr [r8 - 0x77], r9b; mov dword ptr [rbp + 0x31], 0x8515ffc0; movsd dword ptr [rdi], dword ptr [rsi]; add al, byte ptr [rax]; pop rbx; ret; 
0x000000000001fb81: sbb byte ptr [r8 - 0x7d], r9b; ret 0x48e0; 
0x00000000000254a3: sbb byte ptr [r8 - 0x7d], r9b; ret 0x4de0; 
0x000000000002b9fe: sbb byte ptr [rax + 0x39], cl; ret 0x8948; 
0x000000000004a42c: sbb byte ptr [rax + 0x7c8b4801], cl; and al, 0x10; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000033166: sbb byte ptr [rax + 0xd8d4822], dh; fsub st(0), st(0); add dword ptr [rax], eax; movsxd rdx, dword ptr [rcx + rdi*4]; add rdx, rcx; jmp rdx; 
0x00000000000102be: sbb byte ptr [rax - 0x73], cl; add eax, 0xffff919a; call rax; 
0x000000000004ed6a: sbb byte ptr [rax - 0x73], cl; xor eax, 0x6f4b; mov edx, 5; jmp rax; 
0x000000000004effa: sbb byte ptr [rax - 0x73], cl; xor eax, 0x711d; mov edx, 0xb; jmp rax; 
0x000000000004aaa6: sbb byte ptr [rax - 0x73], cl; xor eax, 0xa877; mov edx, 1; jmp rax; 
0x000000000004aa61: sbb byte ptr [rax - 0x73], cl; xor eax, 0xa8ac; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a8c6: sbb byte ptr [rax - 0x73], cl; xor eax, 0xaa47; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000049f7a: sbb byte ptr [rax - 0x73], cl; xor eax, 0xb2d3; mov edx, 0xe; jmp rax; 
0x000000000000b16f: sbb byte ptr [rax - 0x75], cl; and al, 0x10; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x0000000000010ccd: sbb byte ptr [rax - 0x75], cl; and al, 0x18; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x20; ret; 
0x000000000000fb1b: sbb byte ptr [rax - 0x75], cl; and al, 0x20; call 0xf080; add rsp, 0x28; ret; 
0x000000000000b057: sbb byte ptr [rax - 0x75], cl; and al, 0x20; mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; add rsp, 0x30; ret; 
0x000000000000b1da: sbb byte ptr [rax - 0x75], cl; je 0xb203; and byte ptr [rax - 0x73], cl; add eax, 0x26149; lea rdi, [rsp + 0x38]; call rax; 
0x000000000003f53a: sbb byte ptr [rax - 0x75], cl; jg 0x3f54f; mov rax, rdi; pop rcx; ret; 
0x00000000000111df: sbb byte ptr [rax - 0x75], cl; jl 0x11208; adc byte ptr [rax - 0x73], cl; add eax, 0xffff8804; xor edx, edx; call rax; 
0x000000000004e04c: sbb byte ptr [rax - 0x75], cl; mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rip + 0x7c22]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000000d911: sbb byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; mov qword ptr [rcx], rdx; add rsp, 0x38; ret; 
0x00000000000113b0: sbb byte ptr [rax - 0x75], cl; push rsp; and al, 0x20; add rsp, 0x38; ret; 
0x000000000000e9ee: sbb byte ptr [rax - 0x75], cl; push rsp; and al, 0x50; mov qword ptr [rcx + 0x20], rdx; add rsp, 0x88; ret; 
0x0000000000007e5e: sbb byte ptr [rax - 0x77], cl; and al, 0x10; lea rdi, [rsp + 0x10]; call 0x8b30; add rsp, 0x28; ret; 
0x0000000000010cd2: sbb byte ptr [rax - 0x77], cl; and al, 0x10; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x20; ret; 
0x000000000000f24b: sbb byte ptr [rax - 0x77], cl; and al, 0x10; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000003c6e6: sbb byte ptr [rax - 0x77], cl; mov dword ptr [rbp + 0x31], 0x8515ffc0; movsd dword ptr [rdi], dword ptr [rsi]; add al, byte ptr [rax]; pop rbx; ret; 
0x000000000002ddc4: sbb byte ptr [rax - 0x77], cl; out 0x48, al; mov edi, eax; call 0x2e160; add rsp, 0x18; ret; 
0x0000000000031588: sbb byte ptr [rax - 0x77], cl; ret; 
0x0000000000025d10: sbb byte ptr [rax - 0x7d], cl; ret 0x4820; 
0x000000000001fb82: sbb byte ptr [rax - 0x7d], cl; ret 0x48e0; 
0x00000000000254a4: sbb byte ptr [rax - 0x7d], cl; ret 0x4de0; 
0x000000000001f394: sbb byte ptr [rax], al; add byte ptr [rax + 3], cl; test byte ptr [rax + rcx*4], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000002b271: sbb byte ptr [rax], al; add byte ptr [rax], al; mov edx, 8; mov rdi, r12; call rbx; 
0x000000000002bac0: sbb byte ptr [rax], al; add byte ptr [rax], al; mov edx, 8; mov rdi, rbp; call rbx; 
0x0000000000028153: sbb byte ptr [rbx + 0x3eee205], cl; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x18; ret; 
0x000000000003f417: sbb byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x0000000000028c14: sbb byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; ret; 
0x0000000000010dcb: sbb byte ptr [rbx + 0x481c2454], cl; add esp, 0x38; ret; 
0x0000000000011e2d: sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000003d559: sbb byte ptr [rbx + rcx*4 + 0x4e], cl; and byte ptr [rbp - 0x77], cl; ret 0xf749; 
0x000000000000c652: sbb byte ptr [rbx], al; add byte ptr [rax], al; ret; 
0x000000000000b34e: sbb byte ptr [rcx - 0x14dfdbbc], cl; in al, 0x8b; and al, 4; add rsp, 0x28; ret; 
0x000000000000cfda: sbb byte ptr [rcx - 0x14dfdbbc], cl; in al, 0xf; or ecx, dword ptr [rax - 0x73]; add eax, 0xffffc636; call rax; 
0x000000000000cf42: sbb byte ptr [rcx - 0x14dfdbbc], cl; in al, 0xf; or ecx, dword ptr [rax - 0x73]; add eax, 0xffffc6ce; call rax; 
0x000000000004e35a: sbb byte ptr [rcx - 0x75], cl; mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x6e69]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004badf: sbb byte ptr [rcx - 0x75], cl; mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x96e4]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x00000000000285b5: sbb byte ptr [rcx], al; add byte ptr [rax], al; call qword ptr [rax + 0x28]; 
0x000000000000b20c: sbb byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x000000000002557f: sbb byte ptr [rdi + 0x100], bh; mov esi, 8; call rbx; 
0x000000000000b0b4: sbb byte ptr [rdi], al; add byte ptr [rax], al; add rsp, 0x38; ret; 
0x000000000000fc51: sbb byte ptr [rdx + 0x28], bh; call 0x7078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x000000000000a5a8: sbb byte ptr [rdx], 2; add byte ptr [rax], al; pop rcx; ret; 
0x000000000000c17b: sbb byte ptr [rdx], al; add byte ptr [rdi + 1], bh; call rax; 
0x000000000001cc68: sbb byte ptr [rsi + 3], al; add byte ptr [rcx + 0x63], cl; add al, 0x81; add rax, r9; jmp rax; 
0x0000000000025110: sbb ch, al; add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000b402: sbb ch, byte ptr [rax]; add byte ptr [rax], al; pop rax; ret; 
0x000000000001cb2c: sbb cl, byte ptr [rax - 0x73]; or eax, 0x34708; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002d948: sbb cl, byte ptr [rax - 0x77]; ret; 
0x000000000004e340: sbb cl, byte ptr [rcx - 0x75]; mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x6fd3]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bac5: sbb cl, byte ptr [rcx - 0x75]; mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x984e]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000001ff2c: sbb cl, byte ptr [rcx - 0x7d]; ret; 
0x000000000004194d: sbb dh, byte ptr [rbx + 0x19]; xor ecx, ecx; shl rax, 0x20; or rax, rcx; ret; 
0x000000000002fb40: sbb dil, r15b; push rax; sub byte ptr [rax - 0x77], cl; ret 0xdeb; 
0x000000000004bbb8: sbb dword ptr [rax - 0x75], ecx; jge 0x4bbbd; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x960a]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004ade7: sbb dword ptr [rax - 0x75], ecx; jl 0x4ae10; or byte ptr [rax - 0x75], cl; and al, 0x10; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000002be16: sbb dword ptr [rax - 1], ecx; ret 0x3949; 
0x0000000000010540: sbb dword ptr [rax], eax; add byte ptr [rax], al; call rax; 
0x000000000004194f: sbb dword ptr [rcx], esi; leave; shl rax, 0x20; or rax, rcx; ret; 
0x0000000000007847: sbb dword ptr [rdx + 0x4d000000], 0x39; ret 0x830f; 
0x000000000004668d: sbb dword ptr [rdx], 1; add byte ptr [rax], al; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + rcx], al; pop rbx; ret; 
0x0000000000042e2e: sbb eax, 0x1128d; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x0000000000030a43: sbb eax, 0x36170; mov edx, 0x90; call rbx; 
0x000000000000b5ff: sbb eax, 0x48000000; add esp, 0x18; ret; 
0x0000000000042e28: sbb eax, 0x48000005; lea ebx, [rip + 0x1128d]; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x000000000003cf5f: sbb eax, 0x4800029b; add esp, 8; pop rbx; pop r14; ret; 
0x000000000002a45f: sbb eax, 0x590003cc; ret; 
0x000000000000dd4c: sbb eax, 0x68c48348; ret; 
0x000000000001ed5d: sbb eax, 0x8d480000; adc eax, 0x326ed; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000004effe: sbb eax, 0xba000071; or eax, dword ptr [rax]; add byte ptr [rax], al; jmp rax; 
0x0000000000039641: sbb eax, 0xfffd7dfa; call rbx; 
0x0000000000038ebd: sbb eax, 0xfffd856e; call rbx; 
0x000000000002baae: sbb eax, 0xfffe598d; je 0x2babf; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000002b3b9: sbb eax, 0xfffe6082; je 0x2b270; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000025567: sbb eax, 0xfffebec4; mov esi, 8; mov qword ptr [rsp + 0x1b0], rdi; call rbx; 
0x0000000000021d51: sbb eax, 0xfffef6ea; call rbx; 
0x0000000000020349: sbb eax, 0xffff10f2; call rbx; 
0x000000000001fc37: sbb eax, 0xffff17f4; mov esi, 8; mov qword ptr [rsp + 0x168], rdi; mov rbp, r9; call rbx; 
0x0000000000045572: sbb eax, 0xffff78e9; dec dword ptr [rax - 0x7d]; ret 0xc103; 
0x0000000000008374: sbb eax, 0xffff9db9; jmp qword ptr [rsi + 0xf]; 
0x0000000000042957: sbb eax, dword ptr [rax]; add byte ptr [rax + rax*8 - 0xb7eb8b], al; ret; 
0x0000000000047ba2: sbb eax, dword ptr [rcx + 0xf]; mov dh, 0x73; add cl, byte ptr [rcx - 0x7d]; ret; 
0x000000000004a9a4: sbb ecx, dword ptr [rax - 0x75]; jge 0x4a9a9; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xa963]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004bb9d: sbb ecx, dword ptr [rax - 0x75]; jge 0x4bba2; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x9775]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000025874: sbb ecx, dword ptr [rcx - 0x7d]; ret 0x48e0; 
0x00000000000156c4: sbb edi, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000004f07f: sbb edx, -1; mov rax, r10; mov rdx, r11; ret; 
0x000000000004f159: sbb esi, ecx; mov rax, r11; mov rdx, rsi; ret; 
0x000000000004f07c: sbb esi, ecx; sbb r10, -1; mov rax, r10; mov rdx, r11; ret; 
0x000000000004f07e: sbb r10, -1; mov rax, r10; mov rdx, r11; ret; 
0x000000000004f158: sbb rsi, r9; mov rax, r11; mov rdx, rsi; ret; 
0x000000000004f07b: sbb rsi, r9; sbb r10, -1; mov rax, r10; mov rdx, r11; ret; 
0x000000000001d98a: scasb al, byte ptr [rdi]; cmp dword ptr [rbx], eax; add byte ptr [rcx + 0x63], cl; cmp al, 0x98; add rdi, r8; jmp rdi; 
0x000000000002e856: scasb al, byte ptr [rdi]; xchg byte ptr [rbx], al; add byte ptr [rbp + 0x480675c0], al; mov eax, dword ptr [rsp]; pop rcx; ret; 
0x0000000000049fb0: scasd eax, dword ptr [rdi]; add byte ptr [rax], al; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x00000000000071c0: scasd eax, dword ptr [rdi]; pop rbx; ret; 
0x000000000000f55d: scasd eax, dword ptr [rdi]; popfq; add eax, dword ptr [rax]; call rax; 
0x0000000000049d42: scasd eax, dword ptr [rdi]; ret; 
0x0000000000041971: setae cl; mov eax, 0x110000; cmovae rax, rdx; shl rax, 0x20; or rax, rcx; ret; 
0x000000000000fcc6: setb al; and al, 1; movzx eax, al; ret; 
0x000000000001cbac: setb al; and al, cl; ret; 
0x000000000004ee78: setb al; or al, cl; ret; 
0x000000000004e03a: setb al; pop rcx; ret; 
0x000000000004ee6f: setb cl; add edi, -0x7f; cmp edi, 0x21; setb al; or al, cl; ret; 
0x000000000001cc2f: setb cl; and cl, al; movzx eax, cl; ret; 
0x0000000000030347: sete al; pop rbx; pop r14; pop r15; ret; 
0x0000000000008355: sete al; pop rcx; ret; 
0x000000000003f5da: sete al; ret; 
0x000000000004ba3f: sete byte ptr [rbx + 0x11]; mov rax, rbx; pop rbx; pop r14; pop r15; ret; 
0x000000000004a5f6: sete dl; or rdx, 2; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x000000000004d239: setge dl; add rax, rdx; mov rcx, rsi; cmp rsi, rdi; jne 0x4d230; ret; 
0x0000000000007111: setne al; pop rbx; ret; 
0x000000000001cbae: shl byte ptr [rax], 0xc8; ret; 
0x000000000000fcc8: shl byte ptr [rcx + rax], 0xf; mov dh, 0xc0; ret; 
0x000000000004efa5: shl byte ptr [rcx + rax], 1; pop rcx; ret; 
0x000000000001cc31: shl dword ptr [rax], 0xc1; movzx eax, cl; ret; 
0x0000000000030c4c: shl dword ptr [rbx + rax], 1; pop rcx; ret; 
0x0000000000048fb4: shl dword ptr [rsi + 0xf], 0x7e; ret 0x144; 
0x0000000000048f49: shl dword ptr [rsi + 0xf], 1; jo 0x48f27; jmp qword ptr [rsi + 0xf]; 
0x0000000000009b3b: shl dword ptr [rsp + rax], 1; lea rdx, [rip + 0x59a9a]; lea rax, [rip - 0x65d]; mov esi, 0x28; call rax; 
0x0000000000009b2b: shl dword ptr [rsp + rax], 1; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000041953: shl eax, 0x20; or rax, rcx; ret; 
0x000000000004af49: shl ebp, 4; mov rdi, qword ptr [rsp + 8]; mov rcx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x0000000000023435: shl ecx, cl; add al, byte ptr [rax]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x0000000000025562: shl edi, 5; lea rbx, [rip - 0x1413c]; mov esi, 8; mov qword ptr [rsp + 0x1b0], rdi; call rbx; 
0x000000000001fc32: shl edi, 5; lea rbx, [rip - 0xe80c]; mov esi, 8; mov qword ptr [rsp + 0x168], rdi; mov rbp, r9; call rbx; 
0x0000000000038eab: shl edi, 5; mov esi, 8; mov qword ptr [rsp + 0x550], rdi; lea rbx, [rip - 0x27a92]; call rbx; 
0x000000000002abfb: shl edx, 0xfe; dec dword ptr [rax - 0x7b]; fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x0000000000039634: shl esi, 4; mov edx, 8; mov rdi, r14; lea rbx, [rip - 0x28206]; call rbx; 
0x000000000002033c: shl esi, 4; mov edx, 8; mov rdi, r14; lea rbx, [rip - 0xef0e]; call rbx; 
0x0000000000021d44: shl esi, 4; mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x10916]; call rbx; 
0x000000000004af48: shl r13, 4; mov rdi, qword ptr [rsp + 8]; mov rcx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x0000000000041952: shl rax, 0x20; or rax, rcx; ret; 
0x0000000000025561: shl rdi, 5; lea rbx, [rip - 0x1413c]; mov esi, 8; mov qword ptr [rsp + 0x1b0], rdi; call rbx; 
0x000000000001fc31: shl rdi, 5; lea rbx, [rip - 0xe80c]; mov esi, 8; mov qword ptr [rsp + 0x168], rdi; mov rbp, r9; call rbx; 
0x0000000000038eaa: shl rdi, 5; mov esi, 8; mov qword ptr [rsp + 0x550], rdi; lea rbx, [rip - 0x27a92]; call rbx; 
0x0000000000039633: shl rsi, 4; mov edx, 8; mov rdi, r14; lea rbx, [rip - 0x28206]; call rbx; 
0x000000000002033b: shl rsi, 4; mov edx, 8; mov rdi, r14; lea rbx, [rip - 0xef0e]; call rbx; 
0x0000000000021d43: shl rsi, 4; mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x10916]; call rbx; 
0x000000000004b8e6: shr al, 2; ret; 
0x000000000004b8f6: shr al, 4; ret; 
0x000000000004b906: shr al, 5; ret; 
0x0000000000041895: shr bl, 0x79; mov qword ptr [rdi + 8], 0; xor eax, eax; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000000e2fd: shr byte ptr [rax - 0x14e18aff], 0x31; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x10]; lea rdx, [rip + 0x5565b]; lea rax, [rip - 0x4d7c]; call rax; 
0x000000000000e156: shr byte ptr [rax - 0x14e18aff], 0x31; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x30]; lea rdx, [rip + 0x557d2]; lea rax, [rip - 0x4bd5]; call rax; 
0x000000000000cf14: shr byte ptr [rcx + 5], 0; lea rax, [rip - 0x370f]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000004cf85: shr cl, 0xe8; add byte ptr [rax], al; add byte ptr [rcx - 1], cl; ret; 
0x000000000004e34b: shr dword ptr [rdi], cl; add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; 
0x000000000000d958: shr eax, 0; mov qword ptr [rsp + 0x20], rax; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x28; ret; 
0x000000000001cb72: shr eax, 0x3f; ret; 
0x0000000000029b87: shr edi, 0x20; lea rax, [rip + 0x27cc7]; movsxd rcx, dword ptr [rax + rdi*4]; add rcx, rax; jmp rcx; 
0x0000000000014ef7: shr edi, 8; mov eax, edi; ret; 
0x000000000000d957: shr rax, 0; mov qword ptr [rsp + 0x20], rax; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x28; ret; 
0x000000000001cb71: shr rax, 0x3f; ret; 
0x0000000000029b86: shr rdi, 0x20; lea rax, [rip + 0x27cc7]; movsxd rcx, dword ptr [rax + rdi*4]; add rcx, rax; jmp rcx; 
0x0000000000014ef6: shr rdi, 8; mov eax, edi; ret; 
0x0000000000046547: sidt [rax - 1]; ret 0x8948; 
0x000000000002536d: stc; add al, 0xf; test byte ptr [rbp + rdx], dh; add byte ptr [rbx + rcx*4 + 0x65], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000002b51a: stc; add dword ptr [rbp + 0x3d], esi; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000024414: stc; add eax, 0x8d488277; adc eax, 0x2d1d5; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000019e61: stc; and eax, 0x8d482e77; add eax, 0x36e84; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000001cf7c: stc; jne 0x1ceea; mov qword ptr [rdi + 8], rdx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000001d115: stc; jne 0x1d125; mov qword ptr [rdi + 8], rdx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x00000000000253b4: stc; or byte ptr [rdi], cl; test cl, ah; adc eax, 0x8b4c0000; add byte ptr gs:[rax - 0x7d], cl; ret; 
0x000000000004194c: stc; sbb dh, byte ptr [rbx + 0x19]; xor ecx, ecx; shl rax, 0x20; or rax, rcx; ret; 
0x000000000001ab3d: stc; sub ecx, dword ptr [rdi]; xchg dword ptr [rax + rax + 0x63490000], esi; add al, 0x89; add rax, r9; jmp rax; 
0x000000000004878c: std; add dword ptr [rdi], ecx; xchg eax, esp; ret 0x8040; 
0x0000000000010c31: std; add eax, dword ptr [rax]; lea rdx, [rip + 0x52df5]; lea rax, [rip - 0x7752]; mov esi, 0x2b; call rax; 
0x0000000000027509: std; cmp edx, 0x56; ja 0x2757e; movsxd rcx, dword ptr [r14 + rdx*4]; add rcx, r14; jmp rcx; 
0x000000000002a468: std; dec dword ptr [rax - 0x73]; add eax, 0x3cc0f; pop rcx; ret; 
0x000000000002a268: std; dec dword ptr [rax - 0x73]; add eax, 0x3cdd7; pop rcx; ret; 
0x0000000000030b54: std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000030f9b: std; dec dword ptr [rdi]; or ecx, dword ptr [rax - 0x77]; ret; 
0x0000000000037de2: sti; add dword ptr [rdi], ecx; xchg byte ptr [rax + rax - 0x76b70000], dl; ret; 
0x0000000000007008: sti; add eax, 0xc0854800; je 0x7012; call rax; 
0x0000000000007008: sti; add eax, 0xc0854800; je 0x7012; call rax; add rsp, 8; ret; 
0x00000000000071bd: sti; add esi, dword ptr [rbp - 0x51]; pop rbx; ret; 
0x000000000004aa83: sti; call 0x4a960; mov rax, rbx; pop rbx; ret; 
0x000000000004a0f3: sti; dec rdx; call qword ptr [rip + 0x1ce73]; mov rax, rbx; pop rbx; ret; 
0x000000000004f26d: sti; inc dword ptr [rax]; sub rsp, 8; add rsp, 8; ret; 
0x000000000001affa: sti; jg 0x1b071; ret 0xdb85; 
0x000000000004ea59: sti; jmp rax; 
0x000000000003297a: sti; mov eax, esi; lea rcx, [rip + 0x1f0b8]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004b959: sti; mov r13, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000003cf36: sti; mov rdi, qword ptr [rdi + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000004ba66: sti; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000004bbf9: sti; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x971c]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004b919: sti; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rsi, rdx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x000000000004e025: stosb byte ptr [rdi], al; add byte ptr [rax], al; je 0x4e02e; xor eax, eax; pop rcx; ret; 
0x000000000004a91d: stosb byte ptr [rdi], al; add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a82f: stosb byte ptr [rdi], al; add byte ptr [rax], al; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004c491: stosb byte ptr [rdi], al; add dword ptr [rax], eax; pop rcx; ret; 
0x000000000002ad0a: stosb byte ptr [rdi], al; ret; 
0x000000000004a77d: stosd dword ptr [rdi], eax; add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a725: stosd dword ptr [rdi], eax; add byte ptr [rax], al; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000002a7a1: stosd dword ptr [rdi], eax; ret 3; 
0x0000000000024401: stosd dword ptr [rdi], eax; rol dword ptr [rdx], 1; add byte ptr [rax + 0x63], cl; xor al, 0xb7; add rsi, rdi; jmp rsi; 
0x000000000001e329: stosd dword ptr [rdi], eax; test dword ptr [rax + rax], eax; pop rcx; ret; 
0x0000000000011b01: stosd dword ptr [rdi], eax; wait; add dword ptr [rax], eax; pop rcx; ret; 
0x000000000000b5c2: sub ah, byte ptr [rax]; add byte ptr [rax], al; pop rax; ret; 
0x000000000001ac0a: sub ah, byte ptr [rdx + 3]; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000003f083: sub ah, byte ptr [rsi - 0x77]; lahf; xor byte ptr [rip - 0xb80000], al; ret 0x3948; 
0x0000000000037ddd: sub al, 0; add byte ptr [rax - 0x7d], cl; sti; add dword ptr [rdi], ecx; xchg byte ptr [rax + rax - 0x76b70000], dl; ret; 
0x000000000001c7e6: sub al, 0; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004dfa0: sub al, 0; add byte ptr [rax], al; mov r8d, 0xc4; call 0x4de00; pop rcx; ret; 
0x000000000004be40: sub al, 0x24; mov rdi, rbx; mov rsi, rbp; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x000000000003d63f: sub al, 0x5b; pop r14; pop rbp; ret; 
0x000000000004acc8: sub al, 0xc2; add dword ptr [rax], eax; pop rcx; ret; 
0x000000000000bc10: sub al, 1; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000000afce: sub al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x18; ret; 
0x000000000001c8b5: sub al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000000b782: sub al, byte ptr [rdi]; add byte ptr [rax], al; pop rax; ret; 
0x000000000000c772: sub al, byte ptr [rip + 0xeb0000]; lea rax, [rip + 0x1e521]; lea rdi, [rsp + 0x280]; call rax; 
0x000000000000e008: sub al, ch; or byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x70; add rsp, 0x108; ret; 
0x000000000000b531: sub al, ch; sub dword ptr [rbx + 0xb0fffff], edi; lea rax, [rip - 0x1f20]; call rax; 
0x000000000000c8f1: sub bh, bh; adc eax, 0x5a0e8; add rsp, 0x1a8; ret; 
0x000000000000d968: sub bl, al; lea rdi, [rip + 0x42e7f]; lea rdx, [rip + 0x55fb0]; lea rax, [rip - 0x448f]; mov esi, 0x49; call rax; 
0x000000000000b35c: sub bl, al; nop; push rax; call rdi; 
0x000000000000e197: sub byte ptr [rax - 0x73], cl; adc eax, 0x557b9; lea rax, [rip - 0x4c06]; call rax; 
0x000000000000f670: sub byte ptr [rax - 0x73], cl; add eax, 0xffff9dd8; call rax; 
0x000000000000c1ed: sub byte ptr [rax - 0x73], cl; jl 0xc216; cmp al, ch; call 0x4800c20a; lea eax, [rip + 0x1e051]; call rax; 
0x000000000001133f: sub byte ptr [rax - 0x75], cl; and al, 0x20; mov edx, dword ptr [rsp + 0x28]; add rsp, 0x48; ret; 
0x000000000004a71b: sub byte ptr [rax - 0x75], cl; and al, 0x30; lea rsi, [rip + 0xabed]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000000c4b4: sub byte ptr [rax - 0x75], cl; and al, 0x70; call rax; 
0x000000000004bc62: sub byte ptr [rax - 0x75], cl; and byte ptr [rax - 0x77], cl; fistp qword ptr [rsi + 0x22]; mov qword ptr [rsp + 0x38], rax; call rax; 
0x00000000000111f6: sub byte ptr [rax - 0x75], cl; push rsp; and al, 0x30; add rsp, 0x38; ret; 
0x000000000000f2ec: sub byte ptr [rax - 0x75], cl; push rsp; and al, 0x30; add rsp, 0x58; ret; 
0x00000000000105a3: sub byte ptr [rax - 0x75], cl; push rsp; and al, 0x30; add rsp, 0x68; ret; 
0x00000000000362b2: sub byte ptr [rax - 0x75], cl; xor byte ptr [rax - 0x7d], cl; ret 0x4838; 
0x000000000000f2e2: sub byte ptr [rax - 0x77], cl; and al, 0x30; mov rax, qword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x58; ret; 
0x000000000000f0bf: sub byte ptr [rax - 0x77], cl; and al, 0x30; mov rdx, qword ptr [rsp + 0x30]; call qword ptr [rip + 0x579b0]; add rsp, 0x38; ret; 
0x000000000002fb44: sub byte ptr [rax - 0x77], cl; ret 0xdeb; 
0x00000000000211fb: sub byte ptr [rax - 0x7d], cl; ret; 
0x000000000001c9c3: sub byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000000fc53: sub byte ptr [rax], al; add byte ptr [rax], al; call 0x7078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x0000000000009b4e: sub byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000004df69: sub byte ptr [rax], al; add byte ptr [rax], al; mov r8d, 0x11f; call 0x4de00; pop rcx; ret; 
0x000000000004af5d: sub byte ptr [rax], cl; call qword ptr [rcx + 0x18]; 
0x000000000001a86d: sub byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x00000000000081ed: sub byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; ret; 
0x00000000000110ac: sub byte ptr [rbx + 0x48302454], cl; add esp, 0x38; ret; 
0x000000000003299e: sub byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000008815: sub byte ptr [rbx + 0x5e89815], cl; add bh, bh; ret 0x4475; 
0x0000000000007e83: sub byte ptr [rbx + 0x5f22e05], cl; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x0000000000007e33: sub byte ptr [rbx + 0x5f27e05], cl; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x0000000000007de3: sub byte ptr [rbx + 0x5f28e05], cl; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x000000000000cd74: sub byte ptr [rbx + 5], ch; add byte ptr [rax - 0x73], cl; add eax, 0xffffc6f1; call rax; 
0x000000000003d63c: sub byte ptr [rcx + 0x415b2c48], cl; pop rsi; pop rbp; ret; 
0x00000000000110a3: sub byte ptr [rcx + 0x48302454], cl; mov eax, dword ptr [rsp + 0x28]; mov edx, dword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x000000000000cfac: sub byte ptr [rcx + 5], ch; add byte ptr [rax - 0x73], cl; add eax, 0xffffc859; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000002ec2d: sub byte ptr [rcx + rcx*4 - 1], cl; call qword ptr [rip + 0x37bc9]; mov rbx, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000004a703: sub byte ptr [rcx + rcx*4 - 1], cl; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000000d097: sub byte ptr [rcx - 0x14cfdbbc], cl; in al, 0xf; or ecx, dword ptr [rax - 0x73]; add eax, 0xffffc579; call rax; 
0x000000000003856b: sub byte ptr [rcx - 0x75], cl; xchg eax, esi; add byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000000cb31: sub byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x000000000001eb48: sub byte ptr [rcx], ch; add eax, dword ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000d8cd: sub byte ptr [rdi], cl; adc dword ptr [rcx], eax; add rsp, 0x58; ret; 
0x000000000004af59: sub byte ptr [rdx - 0x75], cl; push rsp; sub byte ptr [rax], cl; call qword ptr [rcx + 0x18]; 
0x000000000000c72f: sub byte ptr [rdx], al; add byte ptr [rax], al; call rax; 
0x0000000000030128: sub byte ptr [rsp + 0xb0], al; movups xmmword ptr [rsp + 0x10], xmm0; mov qword ptr [rsp], rsi; call qword ptr [rax + 0x20]; 
0x00000000000073a3: sub byte ptr [rsp], al; movups xmmword ptr [rdi + rax*8], xmm0; add rsp, 0x20; pop rbx; ret; 
0x000000000000ba90: sub cl, byte ptr [rax - 0x73]; add eax, 0xffffdb88; call rax; 
0x0000000000041235: sub cl, byte ptr [rax - 0x77]; ret; 
0x0000000000028a47: sub dh, byte ptr [rcx]; rcr byte ptr [rbx + 0x41], 0x5e; pop r15; ret; 
0x0000000000049c72: sub dl, dl; add dword ptr [rax], eax; add rsp, 0x18; ret; 
0x0000000000021764: sub dword ptr [rax - 0x75], ecx; cmp dword ptr [rax - 1], ecx; ret; 
0x000000000001c920: sub dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000030923: sub dword ptr [rbp + 3], esp; add byte ptr [rdi], cl; or ebp, ebx; add byte ptr [rax - 0x77], cl; ret; 
0x000000000000b533: sub dword ptr [rbx + 0xb0fffff], edi; lea rax, [rip - 0x1f20]; call rax; 
0x000000000001eb49: sub dword ptr [rbx], eax; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000001ea75: sub dword ptr [rbx], eax; add byte ptr [rax + 0x63], cl; add al, 0x8a; add rax, rdx; jmp rax; 
0x000000000001ac03: sub dword ptr [rcx], ecx; add byte ptr [rax], al; lea rcx, [rip + 0x3622a]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004edff: sub dword ptr [rsp + 0x10], ecx; movaps xmmword ptr [rsp], xmm0; mov rdx, rsp; call qword ptr [rip + 0x18108]; add rsp, 0x38; ret; 
0x000000000004ee04: sub dword ptr [rsp], eax; mov rdx, rsp; call qword ptr [rip + 0x18108]; add rsp, 0x38; ret; 
0x000000000004ad51: sub dword ptr [rsp], eax; mov rdx, rsp; mov rdi, rax; call qword ptr [rip + 0x1c1b8]; add rsp, 0x38; ret; 
0x000000000001dfb7: sub eax, 0x33340; movsxd rsi, dword ptr [rbp + rsi*4]; add rsi, rbp; jmp rsi; 
0x000000000000b98f: sub eax, 0x48000000; add esp, 0x18; ret; 
0x000000000001cac9: sub eax, 0x48000000; add esp, 8; pop rbx; pop r14; ret; 
0x0000000000010c38: sub eax, 0x8d480005; add eax, 0xffff88ae; mov esi, 0x2b; call rax; 
0x000000000001c829: sub eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x00000000000106e6: sub eax, dword ptr [rax]; add byte ptr [rax], al; call rax; 
0x000000000000cf20: sub eax, dword ptr [rax]; add byte ptr [rax], al; lea rdx, [rsp + 0x10]; call rax; 
0x000000000000d075: sub eax, dword ptr [rax]; add byte ptr [rax], al; lea rdx, [rsp + 0x20]; call rax; 
0x000000000000d955: sub eax, ecx; shr rax, 0; mov qword ptr [rsp + 0x20], rax; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x28; ret; 
0x000000000004bff7: sub ebp, ebp; mov rdi, rbx; mov rdx, r13; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x000000000000c171: sub ebp, ebx; add dword ptr [rax], eax; call rax; 
0x000000000000f577: sub ecx, dword ptr [rax - 0x73]; add eax, 0x39d91; call rax; 
0x00000000000362c4: sub ecx, dword ptr [rax - 0x77]; fisttp qword ptr [rax - 0x7d]; ret; 
0x000000000002e643: sub ecx, dword ptr [rax]; test rax, rax; je 0x2e659; mov rdi, qword ptr [rbx + r13]; call rax; 
0x000000000004a821: sub ecx, dword ptr [rcx - 0x75]; cmp al, 0x24; mov rax, qword ptr [r12 + 8]; lea rsi, [rip + 0xaaed]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000001ab3e: sub ecx, dword ptr [rdi]; xchg dword ptr [rax + rax + 0x63490000], esi; add al, 0x89; add rax, r9; jmp rax; 
0x000000000003fc9e: sub ecx, edx; mov rax, rsi; mov rdx, rcx; pop rcx; ret; 
0x000000000000b2b2: sub edi, esi; mov qword ptr [rsp], rdi; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000046826: sub edx, 0; add byte ptr [rax], al; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + r10], al; pop rax; ret; 
0x000000000004a7fb: sub edx, eax; mov rdi, qword ptr [r12]; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x000000000001c1f8: sub esi, dword ptr [rdi + 0x15]; lea rdi, [rip + 0x34cba]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000000fc21: sub esp, 0x18; call 0xb360; add rsp, 0x18; ret; 
0x0000000000028151: sub esp, 0x18; mov eax, dword ptr [rip + 0x3eee2]; cmp eax, 4; jne 0x28164; add rsp, 0x18; ret; 
0x0000000000007e81: sub esp, 0x28; mov eax, dword ptr [rip + 0x5f22e]; cmp eax, 4; jne 0x7e94; add rsp, 0x28; ret; 
0x0000000000007e31: sub esp, 0x28; mov eax, dword ptr [rip + 0x5f27e]; cmp eax, 4; jne 0x7e44; add rsp, 0x28; ret; 
0x0000000000007de1: sub esp, 0x28; mov eax, dword ptr [rip + 0x5f28e]; cmp eax, 4; jne 0x7df4; add rsp, 0x28; ret; 
0x000000000003d092: sub esp, 0x40; mov rax, qword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rdi, rax; call qword ptr [rcx + 0x18]; 
0x0000000000011241: sub esp, 4; mov dword ptr [rsp], edi; mov eax, dword ptr [rsp]; add rsp, 4; ret; 
0x000000000004f271: sub esp, 8; add rsp, 8; ret; 
0x0000000000007001: sub esp, 8; mov rax, qword ptr [rip + 0x5fb95]; test rax, rax; je 0x7012; call rax; 
0x000000000004f1ce: sub esp, ebx; test qword ptr [rsp + 8], rsp; add rsp, rax; leave; ret; 
0x000000000004bff6: sub r13, rbp; mov rdi, rbx; mov rdx, r13; mov rax, qword ptr [rsp + 0x28]; call qword ptr [rax + 0x18]; 
0x000000000000afcd: sub r8b, byte ptr [r8]; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x18; ret; 
0x000000000002e642: sub r9d, dword ptr [rax]; test rax, rax; je 0x2e659; mov rdi, qword ptr [rbx + r13]; call rax; 
0x000000000000d954: sub rax, rcx; shr rax, 0; mov qword ptr [rsp + 0x20], rax; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x28; ret; 
0x000000000003fc9d: sub rcx, rdx; mov rax, rsi; mov rdx, rcx; pop rcx; ret; 
0x000000000000b2b1: sub rdi, rsi; mov qword ptr [rsp], rdi; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000004a7fa: sub rdx, rax; mov rdi, qword ptr [r12]; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x000000000000fc20: sub rsp, 0x18; call 0xb360; add rsp, 0x18; ret; 
0x0000000000028150: sub rsp, 0x18; mov eax, dword ptr [rip + 0x3eee2]; cmp eax, 4; jne 0x28164; add rsp, 0x18; ret; 
0x0000000000007e80: sub rsp, 0x28; mov eax, dword ptr [rip + 0x5f22e]; cmp eax, 4; jne 0x7e94; add rsp, 0x28; ret; 
0x0000000000007e30: sub rsp, 0x28; mov eax, dword ptr [rip + 0x5f27e]; cmp eax, 4; jne 0x7e44; add rsp, 0x28; ret; 
0x0000000000007de0: sub rsp, 0x28; mov eax, dword ptr [rip + 0x5f28e]; cmp eax, 4; jne 0x7df4; add rsp, 0x28; ret; 
0x000000000003d091: sub rsp, 0x40; mov rax, qword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rdi, rax; call qword ptr [rcx + 0x18]; 
0x0000000000011240: sub rsp, 4; mov dword ptr [rsp], edi; mov eax, dword ptr [rsp]; add rsp, 4; ret; 
0x000000000004f270: sub rsp, 8; add rsp, 8; ret; 
0x0000000000007000: sub rsp, 8; mov rax, qword ptr [rip + 0x5fb95]; test rax, rax; je 0x7012; call rax; 
0x000000000004f1cd: sub rsp, r11; test qword ptr [rsp + 8], rsp; add rsp, rax; leave; ret; 
0x0000000000015cf1: syscall; 
0x000000000004dec9: sysenter; 
0x000000000001ae7a: test ah, dh; add eax, dword ptr [rax]; add byte ptr [rcx], dh; jmp qword ptr [rsi + 0x66]; 
0x000000000000bc0b: test al, 0; add byte ptr [rax], al; call 0xbd40; add rsp, 0x18; ret; 
0x0000000000030a66: test al, 0; add byte ptr [rax], al; call rbx; 
0x000000000000a71d: test al, 0; add byte ptr [rax], al; ret; 
0x000000000004a93d: test al, 0; add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; 
0x000000000004aaab: test al, 0; add byte ptr [rdx + 1], bh; jmp rax; 
0x000000000004aa66: test al, 0; add byte ptr [rdx + 2], bh; call qword ptr [rax + 0x18]; 
0x000000000001ed44: test al, 0x4c; add ecx, eax; jmp rcx; 
0x000000000004eaec: test al, 0x7d; add dword ptr [rax], eax; add rsp, 0x30; pop rbx; ret; 
0x000000000000c5d4: test al, 0xde; add dword ptr [rax], eax; lea rdi, [rsp + 0x208]; call rax; 
0x000000000000c8fb: test al, 1; add byte ptr [rax], al; ret; 
0x000000000003c21b: test al, 2; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000004a6f7: test al, al; jne 0x4a5aa; lea rsi, [rsp + 0x28]; mov rdi, r15; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000004a638: test al, al; jne 0x4a5aa; mov rdi, r15; mov rsi, rbp; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000004e0a0: test al, al; mov al, 1; je 0x4e0ac; add rsp, 0x20; pop rbx; ret; 
0x0000000000014ef1: test bh, 1; jne 0x14efd; shr rdi, 8; mov eax, edi; ret; 
0x000000000001cda5: test bl, bl; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000001cca5: test bl, bl; add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret 0x3948; 
0x0000000000023f3b: test bl, cl; add al, byte ptr [rax]; add byte ptr [rbp - 0x77], cl; ret 0x8b48; 
0x000000000001c6f6: test byte ptr [rax + 3], 0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001f399: test byte ptr [rax + rcx*4], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000000c5cb: test byte ptr [rax + rcx], ah; add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x1dea8; lea rdi, [rsp + 0x208]; call rax; 
0x0000000000030129: test byte ptr [rax + rsi*4], ah; add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsp + 0x10], eax; mov qword ptr [rsp], rsi; call qword ptr [rax + 0x20]; 
0x000000000002baab: test byte ptr [rax - 0x73], 0x1d; lea ebx, [rcx - 2]; push qword ptr [rdx + rcx + 0x48]; mov edx, dword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x0000000000034cb1: test byte ptr [rax - 0x75], 0x54; and al, 0x38; call rbx; 
0x00000000000493c4: test byte ptr [rax - 0x77], 0x10; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000004bbf6: test byte ptr [rax - 0x77], 0xfb; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x971c]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004b916: test byte ptr [rax - 0x77], 0xfb; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rsi, rdx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x000000000002549b: test byte ptr [rax], ah; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 - 0x7d], r9b; ret 0x4de0; 
0x0000000000012c4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rdi; ret; 
0x000000000004d7aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi + 0x18]; ret; 
0x000000000004a19a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x10]; ret; 
0x000000000000a58a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; ret; 
0x000000000002f4ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; lea rdx, [rip + 0x35606]; ret; 
0x000000000002a115: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov al, 1; ret; 
0x0000000000049165: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; ret; 
0x000000000000eb27: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x0000000000033067: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000004a1a9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, qword ptr [rdi + 0x18]; ret; 
0x000000000000a829: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, qword ptr [rdi + 8]; ret; 
0x000000000004a1b9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; movzx eax, byte ptr [rdi + 0x20]; ret; 
0x000000000003fbf9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; ret; 
0x000000000000b7aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000000be7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000003e63d: test byte ptr [rax], al; or eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002763f: test byte ptr [rbp + rcx*4 + 0x35], 0x45; movabs al, byte ptr [0xe83024448d4c0002]; call qword ptr [rbp - 1]; 
0x0000000000025370: test byte ptr [rbp + rdx], dh; add byte ptr [rbx + rcx*4 + 0x65], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000306dc: test byte ptr [rbp - 0x46000000], dl; rol byte ptr [rax], 0; add byte ptr [rcx], cl; ret 0x298b; 
0x000000000004b114: test byte ptr [rbx + 2], ch; add byte ptr [rax], al; mov rdi, rbp; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x000000000002bd38: test byte ptr [rbx - 0x2776fffd], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000004cc58: test byte ptr [rbx], bh; add al, 0; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000045df8: test byte ptr [rcx + 0x48000000], ch; add esp, 0x68; pop rbx; pop r14; ret; 
0x00000000000345a4: test byte ptr [rcx + 0x48000000], ch; mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x00000000000116a8: test byte ptr [rcx + 5], dl; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x0000000000008724: test byte ptr [rcx + rax - 0x20], cl; jmp rax; 
0x000000000002c545: test byte ptr [rcx + rax], al; add byte ptr [rax], al; movzx ecx, byte ptr [r10]; movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x0000000000046e62: test byte ptr [rcx + rcx*4 - 0x36], 0xf6; ret 0x7502; 
0x000000000004f196: test byte ptr [rcx - 0x77], 0xd3; mov rax, r11; mov rdx, rsi; ret; 
0x0000000000045f4e: test byte ptr [rcx - 1], 0xd7; mov rax, rbx; pop rbx; pop r14; pop r15; ret; 
0x0000000000035a5e: test byte ptr [rcx], bl; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000003cda2: test byte ptr [rcx], ch; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000019fc6: test byte ptr [rcx], dh; or dword ptr [rax], eax; add byte ptr [rcx - 1], cl; ret 0x394c; 
0x000000000004554d: test byte ptr [rdi + rdi*8 - 1], ch; dec dword ptr [rax - 0x7d]; ret 0x8d04; 
0x000000000003b549: test byte ptr [rdi], 0x84; ret; 
0x0000000000025754: test byte ptr [rdi], bl; add eax, 0x8b480000; add dword ptr [rax - 1], ecx; ret; 
0x0000000000037d74: test byte ptr [rdx], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; add dword ptr [rax - 1], ecx; ret; 
0x0000000000019e68: test byte ptr [rsi + 3], ch; add byte ptr [rax + 0x63], cl; or al, 0x88; add rcx, rax; jmp rcx; 
0x000000000002b3bf: test byte ptr [rsi + rdi*8 - 0x74b70001], ch; push rax; adc byte ptr [rcx - 0x75], cl; cmp al, 0x24; call rbx; 
0x000000000002b0f7: test byte ptr [rsi + rdi*8 - 1], al; dec dword ptr [rax + 0x29]; ret; 
0x00000000000100ed: test byte ptr [rsp + 0x17], 1; jne 0x100fd; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x000000000001026d: test byte ptr [rsp + 0x17], 1; jne 0x1027d; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x0000000000010213: test byte ptr [rsp + 0x37], 1; jne 0x10228; mov rax, qword ptr [rsp + 0x20]; mov edx, dword ptr [rsp + 0x28]; add rsp, 0x38; ret; 
0x0000000000010192: test byte ptr [rsp + 0x57], 1; jne 0x101a3; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x00000000000253b7: test cl, ah; adc eax, 0x8b4c0000; add byte ptr gs:[rax - 0x7d], cl; ret; 
0x000000000002f68d: test cl, ch; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000359a0: test cl, ch; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000003fe7b: test cl, cl; je 0x3fe82; mov al, 1; ret; 
0x0000000000045df5: test cl, cl; je 0x45ea6; add rsp, 0x68; pop rbx; pop r14; ret; 
0x000000000003efd1: test dh, bl; fadd dword ptr [rax + rax]; add byte ptr [rax + 0x6b], cl; ret; 
0x0000000000014ef0: test dil, 1; jne 0x14efd; shr rdi, 8; mov eax, edi; ret; 
0x000000000004aeb5: test dword ptr [rax + rax - 0x7cb80000], ebp; ret; 
0x000000000001e32a: test dword ptr [rax + rax], eax; pop rcx; ret; 
0x000000000000cc46: test dword ptr [rax - 0x73], 0xfffef23d; push qword ptr [rcx]; leave; call 0xd1f0; pop rcx; ret; 
0x000000000004ba1a: test dword ptr [rax - 0x77], 0x3e8b48fb; mov rax, qword ptr [rsi + 8]; mov rsi, rdx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x0000000000030b4d: test dword ptr [rax - 0x77], 0x760ae8de; std; dec dword ptr [rax - 0x77]; ret; 
0x000000000000b2a3: test dword ptr [rax - 0x77], 0x8b48243c; add al, 0x24; pop rcx; ret; 
0x000000000004c48a: test dword ptr [rax - 0x77], 0xbc15ffc6; stosb byte ptr [rdi], al; add dword ptr [rax], eax; pop rcx; ret; 
0x0000000000037829: test dword ptr [rax - 0x9fffffe], ebp; ret; 
0x0000000000020de0: test dword ptr [rax], 0x89480000; ret; 
0x000000000001c263: test dword ptr [rax], eax; add rax, rbp; jmp rax; 
0x000000000001c262: test dword ptr [rax], r8d; add rax, rbp; jmp rax; 
0x000000000001d008: test dword ptr [rbp + 1], ebx; add byte ptr [rax], al; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000003a21e: test dword ptr [rbx + 0x48ffffc8], esi; lea ebx, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000004a6fa: test dword ptr [rbx + 0x48fffffe], ebp; lea esi, [rsp + 0x28]; mov rdi, r15; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000002e679: test dword ptr [rbx], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000001c779: test dword ptr [rbx], eax; add byte ptr [rax], al; lea rcx, [rip + 0x34a98]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000302dd: test dword ptr [rdx + 0x48000000], eax; lea eax, [rip + 0x2173b]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004f1d1: test dword ptr [rsp + 8], esp; add rsp, rax; leave; ret; 
0x000000000000710e: test dx, dx; setne al; pop rbx; ret; 
0x0000000000045df9: test eax, 0x48000000; add esp, 0x68; pop rbx; pop r14; ret; 
0x00000000000345a5: test eax, 0x48000000; mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x000000000004b3ab: test eax, 0x48ff894c; mov esi, dword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x20]; call qword ptr [rbp + 0x18]; 
0x0000000000013ad3: test eax, 0x5b00052f; pop r14; pop r15; ret; 
0x00000000000116e5: test eax, 0x89a76c34; ret; 
0x0000000000028b47: test eax, eax; je 0x28b4d; pop rcx; ret; 
0x000000000002e646: test eax, eax; je 0x2e659; mov rdi, qword ptr [rbx + r13]; call rax; 
0x000000000003d268: test eax, eax; je 0x3d279; bsf ax, ax; movzx edx, ax; mov eax, 1; ret; 
0x000000000000700c: test eax, eax; je 0x7012; call rax; 
0x000000000000700c: test eax, eax; je 0x7012; call rax; add rsp, 8; ret; 
0x0000000000009a4b: test eax, eax; je 0x9a58; jmp rax; 
0x0000000000009a8c: test eax, eax; je 0x9a98; jmp rax; 
0x0000000000008692: test eax, eax; jle 0x863a; pop rbx; ret; 
0x000000000002ad64: test eax, eax; jne 0x2ad78; add rsp, 0xb0; pop rbx; ret; 
0x000000000002e85a: test eax, eax; jne 0x2e864; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000034989: test eax, eax; lea rcx, [rip - 0x62d2]; cmovne rcx, rax; call rcx; 
0x000000000003a1f4: test eax, esp; ret 0xffff; 
0x000000000002f69c: test edx, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fmul dword ptr [rbp + rcx*4 + 0x73]; dec dword ptr [rax - 0x7d]; ret; 
0x000000000004ade4: test edx, edx; je 0x4ae01; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000004aef6: test edx, edx; je 0x4af0f; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000000710f: test edx, edx; setne al; pop rbx; ret; 
0x000000000004a010: test esi, esi; je 0x4a039; dec rsi; mov qword ptr [rdi], rsi; ret; 
0x000000000003f581: test esi, esi; js 0x3f58a; add qword ptr [rdi + 0x18], rsi; ret; 
0x000000000002b3b5: test esi, esi; lea rbx, [rip - 0x19f7e]; je 0x2b270; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [r12]; call rbx; 
0x000000000002baaa: test esi, esi; lea rbx, [rip - 0x1a673]; je 0x2babf; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x0000000000009a87: test esp, edx; add eax, 0xc0854800; je 0x9a98; jmp rax; 
0x00000000000345a1: test esp, esp; je 0x34652; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x000000000004f1d0: test qword ptr [rsp + 8], rsp; add rsp, rax; leave; ret; 
0x00000000000345a0: test r12, r12; je 0x34652; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x0000000000028b46: test rax, rax; je 0x28b4d; pop rcx; ret; 
0x000000000002e645: test rax, rax; je 0x2e659; mov rdi, qword ptr [rbx + r13]; call rax; 
0x000000000000700b: test rax, rax; je 0x7012; call rax; 
0x000000000000700b: test rax, rax; je 0x7012; call rax; add rsp, 8; ret; 
0x0000000000009a4a: test rax, rax; je 0x9a58; jmp rax; 
0x0000000000009a8b: test rax, rax; je 0x9a98; jmp rax; 
0x0000000000008691: test rax, rax; jle 0x863a; pop rbx; ret; 
0x000000000002ad63: test rax, rax; jne 0x2ad78; add rsp, 0xb0; pop rbx; ret; 
0x0000000000034988: test rax, rax; lea rcx, [rip - 0x62d2]; cmovne rcx, rax; call rcx; 
0x000000000004ade3: test rdx, rdx; je 0x4ae01; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000004aef5: test rdx, rdx; je 0x4af0f; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000004a00f: test rsi, rsi; je 0x4a039; dec rsi; mov qword ptr [rdi], rsi; ret; 
0x000000000003f580: test rsi, rsi; js 0x3f58a; add qword ptr [rdi + 0x18], rsi; ret; 
0x000000000002b3b4: test rsi, rsi; lea rbx, [rip - 0x19f7e]; je 0x2b270; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [r12]; call rbx; 
0x000000000002baa9: test rsi, rsi; lea rbx, [rip - 0x1a673]; je 0x2babf; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000002d991: ud2; call qword ptr [rip + 0x390b7]; ud2; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x00000000000116c3: ud2; call qword ptr [rip + 0x55385]; ud2; nop dword ptr [rax]; movabs rax, 0x245dac89066f9f; ret; 
0x000000000003fc55: ud2; jne 0x3fc47; mov rax, rsi; mov rdx, rcx; pop rcx; ret; 
0x000000000000b537: ud2; lea rax, [rip - 0x1f20]; call rax; 
0x000000000000b877: ud2; lea rax, [rip - 0x2260]; call rax; 
0x000000000000cf49: ud2; lea rax, [rip - 0x3932]; call rax; 
0x000000000000cfe1: ud2; lea rax, [rip - 0x39ca]; call rax; 
0x000000000000d09e: ud2; lea rax, [rip - 0x3a87]; call rax; 
0x00000000000102c8: ud2; mov al, byte ptr [rsp + 0x27]; add rsp, 0x28; ret; 
0x00000000000111f0: ud2; mov rax, qword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x000000000004d799: ud2; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; mov rdx, qword ptr [rdi + 8]; ret; 
0x000000000002f4c6: ud2; nop dword ptr [rax + rax]; mov rax, rdi; lea rdx, [rip + 0x35606]; ret; 
0x0000000000011e56: ud2; nop dword ptr [rax + rax]; ret; 
0x000000000002d999: ud2; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x00000000000116cb: ud2; nop dword ptr [rax]; movabs rax, 0x245dac89066f9f; ret; 
0x000000000000b76d: ud2; nop; push rax; call 0xb790; pop rax; ret; 
0x000000000000b9ad: ud2; nop; push rax; call 0xb960; pop rax; ret; 
0x000000000000b61d: ud2; nop; push rax; call 0xfb80; pop rax; ret; 
0x000000000000bc7d: ud2; nop; push rax; call qword ptr [rip + 0x5ad09]; pop rax; ret; 
0x000000000003cf60: wait; add al, byte ptr [rax]; add rsp, 8; pop rbx; pop r14; ret; 
0x00000000000324a5: wait; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000011b02: wait; add dword ptr [rax], eax; pop rcx; ret; 
0x0000000000037de5: xchg byte ptr [rax + rax - 0x76b70000], dl; ret; 
0x000000000000e785: xchg byte ptr [rax - 0x75], cl; and al, 0x48; add rsp, 0xd8; ret; 
0x000000000002f726: xchg byte ptr [rbp - 0x7ab70001], bh; sal byte ptr [rsp + rcx*2 + 0x48], 0x89; ret; 
0x000000000002e857: xchg byte ptr [rbx], al; add byte ptr [rbp + 0x480675c0], al; mov eax, dword ptr [rsp]; pop rcx; ret; 
0x000000000000e597: xchg byte ptr [rip + 0x448b4800], al; and al, 0x10; add rsp, 0x18; ret; 
0x000000000001c205: xchg dword ptr [rax + 1], ecx; clc; jmp rax; 
0x000000000001ab40: xchg dword ptr [rax + rax + 0x63490000], esi; add al, 0x89; add rax, r9; jmp rax; 
0x000000000001c778: xchg dword ptr [rbp + 0x48000003], eax; lea ecx, [rip + 0x34a98]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000904a: xchg dword ptr [rbx], edi; add dword ptr [rax], eax; add byte ptr [rcx + 0xc6349c1], cl; mov word ptr [rcx + rax - 0x1f], cs; jmp rcx; 
0x0000000000025182: xchg dword ptr [rcx + 0x15], ebp; add byte ptr [rax], al; lea rdx, [rip + 0x2c4be]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000004bea5: xchg dword ptr [rcx + rax - 8], ecx; mov esi, 0x5c; jmp rax; 
0x0000000000008b8a: xchg dword ptr [rcx + rax], edi; add byte ptr [rax], al; mov ecx, eax; movsxd rcx, dword ptr [r12 + rcx*4]; add rcx, r12; jmp rcx; 
0x0000000000024439: xchg dword ptr [rdi + rdi*8 - 1], ebx; dec dword ptr [rax - 0x73]; adc eax, 0x2d197; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000025298: xchg dword ptr [rdi*8 - 0x72b70001], ebp; or eax, 0x2c3c8; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000042e27: xchg dword ptr [rip + 0x48000005], ebx; lea ebx, [rip + 0x1128d]; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x0000000000008dfa: xchg dword ptr [rsi], ebp; add dword ptr [rax], eax; add byte ptr [rcx + 0xc6349c1], cl; mov word ptr [rcx + rax - 0x1f], cs; jmp rcx; 
0x000000000001c25b: xchg dword ptr [rsi], ecx; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; test dword ptr [rax], r8d; add rax, rbp; jmp rax; 
0x0000000000013be7: xchg eax, ebp; add eax, 0x5e415b00; pop r15; ret; 
0x0000000000018fe7: xchg eax, ebp; fiadd dword ptr [rax + rax]; ret; 
0x000000000002b722: xchg eax, ebp; rcr byte ptr [rbx + 0x41], 0x5c; pop r13; pop r14; pop r15; ret; 
0x00000000000227cb: xchg eax, ebp; ret 0x8366; 
0x0000000000033878: xchg eax, ebp; ret 0x840f; 
0x000000000003c679: xchg eax, ebp; ret 0xf41; 
0x00000000000247f8: xchg eax, ebp; ret 0xffbb; 
0x0000000000015bd9: xchg eax, ebp; ret; 
0x0000000000007007: xchg eax, ebp; sti; add eax, 0xc0854800; je 0x7012; call rax; 
0x000000000000deb9: xchg eax, ebx; add eax, 0x8b480000; add al, 0x24; pop rcx; ret; 
0x00000000000227d2: xchg eax, ebx; ret; 
0x0000000000041972: xchg eax, ebx; sar dword ptr [rax + 0x110000], 0x48; cmovae eax, edx; shl rax, 0x20; or rax, rcx; ret; 
0x000000000003d88f: xchg eax, ecx; add al, byte ptr [rax]; ret; 
0x000000000002fb26: xchg eax, ecx; add rdi, rcx; jmp rdi; 
0x000000000000f57b: xchg eax, ecx; popfq; add eax, dword ptr [rax]; call rax; 
0x000000000004bbaa: xchg eax, edi; add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000003a81d: xchg eax, edi; ret; 
0x0000000000024441: xchg eax, edi; rol dword ptr [rdx], 1; add byte ptr [rax + 0x63], cl; or al, 0x8a; add rcx, rdx; jmp rcx; 
0x000000000004bd66: xchg eax, edx; add byte ptr [rax], al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000127ea: xchg eax, edx; add eax, 0xc4834800; or byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x00000000000141d0: xchg eax, edx; ret 0x3948; 
0x0000000000014298: xchg eax, edx; ret 0x394c; 
0x000000000004597e: xchg eax, edx; ret 0xdb84; 
0x00000000000074c0: xchg eax, edx; ret 0xeeb; 
0x000000000003823f: xchg eax, edx; ret 0xf40; 
0x000000000004ee70: xchg eax, edx; rol dword ptr [rbx - 0x7c7e39], 0x21; setb al; or al, cl; ret; 
0x000000000004ee79: xchg eax, edx; ror byte ptr [rax], 0xc8; ret; 
0x000000000001cbad: xchg eax, edx; shl byte ptr [rax], 0xc8; ret; 
0x000000000000fcc7: xchg eax, edx; shl byte ptr [rcx + rax], 0xf; mov dh, 0xc0; ret; 
0x000000000001cc30: xchg eax, edx; shl dword ptr [rax], 0xc1; movzx eax, cl; ret; 
0x000000000004a93c: xchg eax, edx; test al, 0; add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; 
0x000000000003d830: xchg eax, esi; add al, byte ptr [rax]; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x000000000003856e: xchg eax, esi; add byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000004baeb: xchg eax, esi; add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000000d3c5: xchg eax, esi; add eax, 0x44894800; and al, 0x10; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x0000000000027512: xchg eax, esi; add rcx, r14; jmp rcx; 
0x000000000002c2f2: xchg eax, esi; add rdx, rsi; jmp rdx; 
0x000000000001993e: xchg eax, esi; ret 0x6948; 
0x000000000001950e: xchg eax, esi; ret 0x6b48; 
0x000000000001977e: xchg eax, esi; ret 0x8948; 
0x0000000000007a1e: xchg eax, esi; ret 0x8d48; 
0x0000000000032bc0: xchg eax, esi; ret 0xd184; 
0x000000000002a6e6: xchg eax, esi; ret; 
0x000000000004ba40: xchg eax, esp; adc dword ptr [r8 - 0x77], ecx; fcomp dword ptr [rbx + 0x41]; pop rsi; pop r15; ret; 
0x0000000000028341: xchg eax, esp; add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000037de6: xchg eax, esp; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000000d45e: xchg eax, esp; add eax, 0xf012400; mov dh, 0xc0; add rsp, 0x18; ret; 
0x0000000000026982: xchg eax, esp; and al, 0xa4; add byte ptr [rax], al; add byte ptr [rcx], cl; ret 0xc148; 
0x0000000000030348: xchg eax, esp; rcr byte ptr [rbx + 0x41], 0x5e; pop r15; ret; 
0x0000000000047d6c: xchg eax, esp; ret 0x4c89; 
0x000000000004878f: xchg eax, esp; ret 0x8040; 
0x000000000004a5f7: xchg eax, esp; ret 0x8348; 
0x0000000000007bc8: xchg eax, esp; ret 0x8948; 
0x000000000003725c: xchg eax, esp; ret 0x8b48; 
0x00000000000195d8: xchg eax, esp; ret 0x8d48; 
0x0000000000014128: xchg eax, esp; ret 0xc208; 
0x000000000002c3b1: xchg eax, esp; ret 0xf280; 
0x0000000000031853: xchg eax, esp; ret 0xf48; 
0x000000000002bce3: xchg eax, esp; ret; 
0x0000000000025108: xchg ebp, edx; adc eax, 0x8d480000; or eax, 0x2c518; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000871a: xchg esi, edx; add al, byte ptr [rax]; add byte ptr [rcx + 0x46349c0], cl; test byte ptr [rcx + rax - 0x20], cl; jmp rax; 
0x000000000001ed5b: xchg esp, eax; sbb eax, 0x8d480000; adc eax, 0x326ed; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000004ed40: xlatb; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x17b4a]; add rsp, 0x28; ret; 
0x000000000004ec10: xlatb; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x17c7a]; add rsp, 0x28; ret; 
0x00000000000343c2: xlatb; mov r14d, dword ptr [rax]; mov edi, r14d; call rbx; 
0x0000000000045f51: xlatb; mov rax, rbx; pop rbx; pop r14; pop r15; ret; 
0x000000000000b362: xlatb; pop rax; ret; 
0x000000000004e021: xlatb; ret; 
0x000000000003d266: xlatb; rol dword ptr [rbp + 0x660d74c0], 0xf; mov esp, 0xd0b70fc0; mov eax, 1; ret; 
0x000000000004eae7: xlatb; xor ecx, ecx; call qword ptr [rip + 0x17da8]; add rsp, 0x30; pop rbx; ret; 
0x0000000000030136: xor al, 0x24; call qword ptr [rax + 0x20]; 
0x000000000004af58: xor al, 0x28; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000004af06: xor al, 0x33; call qword ptr [rax + 0x18]; 
0x000000000004b3d5: xor al, 0x48; cmp eax, -1; je 0x4b3ed; mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x0000000000010057: xor al, 0x48; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000002ca7f: xor al, 0xb4; add rsi, r12; jmp rsi; 
0x000000000002343b: xor al, 0xb7; add rsi, rdi; jmp rsi; 
0x000000000004c0c7: xor al, 0xb9; add rsi, rcx; jmp rsi; 
0x0000000000013db9: xor al, 1; add byte ptr [rax], al; nop dword ptr [rax]; movzx edi, al; call rbx; 
0x0000000000034d71: xor al, 1; movzx eax, al; lea eax, [rax + rax*8]; add rsp, 0x28; ret; 
0x0000000000010535: xor al, 5; add byte ptr [rax - 0x73], cl; add eax, 0xffff8fb1; mov esi, 0x19; call rax; 
0x0000000000013815: xor al, byte ptr [eip + 0x5e415b00]; pop r15; ret; 
0x000000000001378b: xor al, byte ptr [rip + 0x5c415b00]; pop r13; pop r14; pop r15; ret; 
0x0000000000013816: xor al, byte ptr [rip + 0x5e415b00]; pop r15; ret; 
0x00000000000272a5: xor al, byte ptr [rip + 0x6b490000]; sal dword ptr [rax + 0x48], 0xc7; ret; 
0x000000000002764b: xor al, ch; call qword ptr [rbp - 1]; 
0x000000000000c4de: xor al, ch; mov esp, 0x48000007; mov edi, dword ptr [rsp + 0x30]; mov rax, qword ptr [rsp + 0x70]; call rax; 
0x000000000000f0c9: xor bh, bh; adc eax, 0x579b0; add rsp, 0x38; ret; 
0x000000000000d3c1: xor bh, bh; adc eax, 0x596e8; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000001314a: xor bh, byte ptr [rcx]; add eax, 0x5c415b00; pop r13; pop r14; pop r15; ret; 
0x000000000002ca77: xor bh, byte ptr [rdx + 6]; movsxd rsi, dword ptr [r12 + rsi*4]; add rsi, r12; jmp rsi; 
0x000000000000c17a: xor bl, byte ptr [rax]; add al, byte ptr [rax]; mov edi, 1; call rax; 
0x000000000000d09b: xor bl, ch; in al, 0xf; or ecx, dword ptr [rax - 0x73]; add eax, 0xffffc579; call rax; 
0x000000000004b8e2: xor byte ptr [r12 + r8], r12b; shr al, 2; ret; 
0x000000000004e33c: xor byte ptr [r14*2 + 0x3e8b491a], r8b; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x6fd3]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bac1: xor byte ptr [r14*2 + 0x3e8b491a], r8b; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x984e]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a90d: xor byte ptr [r14*2 + 0x3f8b4920], r8b; mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xaa02]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000007619: xor byte ptr [r15], cl; or dword ptr [rdi - 2], 0xffffffff; dec dword ptr [rax - 0x7d]; ret; 
0x000000000004b8f2: xor byte ptr [r8 + r10], r12b; shr al, 4; ret; 
0x000000000004b902: xor byte ptr [r8 + r12], r12b; shr al, 5; ret; 
0x0000000000010893: xor byte ptr [r8 - 0x75], r9b; and al, 0x38; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x000000000001066a: xor byte ptr [r8 - 0x75], r9b; and al, 0x58; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x80; ret; 
0x000000000003e043: xor byte ptr [rax + 0x6b], cl; ret; 
0x000000000004b8f3: xor byte ptr [rax + rdx], ah; shr al, 4; ret; 
0x0000000000021d42: xor byte ptr [rax - 0x3f], cl; out 4, al; mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x10916]; call rbx; 
0x000000000000e166: xor byte ptr [rax - 0x73], cl; adc eax, 0x557d2; lea rax, [rip - 0x4bd5]; call rax; 
0x000000000004a720: xor byte ptr [rax - 0x73], cl; xor eax, 0xabed; mov edx, 2; call qword ptr [rax + 0x18]; 
0x00000000000110a7: xor byte ptr [rax - 0x75], cl; and al, 0x28; mov edx, dword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x000000000000f2e7: xor byte ptr [rax - 0x75], cl; and al, 0x28; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x58; ret; 
0x0000000000010894: xor byte ptr [rax - 0x75], cl; and al, 0x38; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x000000000001066b: xor byte ptr [rax - 0x75], cl; and al, 0x58; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x80; ret; 
0x000000000000c4e8: xor byte ptr [rax - 0x75], cl; and al, 0x70; call rax; 
0x000000000000f66b: xor byte ptr [rax - 0x75], cl; jl 0xf694; sub byte ptr [rax - 0x73], cl; add eax, 0xffff9dd8; call rax; 
0x000000000000f0c4: xor byte ptr [rax - 0x75], cl; push rsp; and al, 0x30; call qword ptr [rip + 0x579b0]; add rsp, 0x38; ret; 
0x000000000000da0c: xor byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x38; ret; 
0x0000000000047118: xor byte ptr [rax - 0x77], cl; ret; 
0x0000000000010890: xor byte ptr [rax - 0x77], cl; xor byte ptr [r8 - 0x75], r9b; and al, 0x38; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x00000000000362b6: xor byte ptr [rax - 0x7d], cl; ret 0x4838; 
0x000000000004555f: xor byte ptr [rax - 0x7d], cl; ret 0xc102; 
0x00000000000316f3: xor byte ptr [rax - 0x7d], cl; ret; 
0x000000000004a4a5: xor byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000004b903: xor byte ptr [rax], ah; shr al, 5; ret; 
0x00000000000106f8: xor byte ptr [rax], al; add byte ptr [rax], al; call 0x7078; mov rax, qword ptr [rsp + 8]; add rsp, 0x58; ret; 
0x000000000004b11d: xor byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rbx + 0x20]; 
0x000000000004c0ba: xor byte ptr [rax], al; add byte ptr [rax], al; lea rcx, [rip + 0x8fbf]; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x0000000000036250: xor byte ptr [rbx + 0x41], bl; pop rsi; pop r15; ret; 
0x00000000000343c5: xor byte ptr [rcx + rcx*4 - 9], al; call rbx; 
0x0000000000039fd7: xor byte ptr [rcx], al; add byte ptr [rax], al; call qword ptr [rcx + 0x20]; 
0x000000000000d8c8: xor byte ptr [rdi], cl; adc byte ptr [rsp + 0x28], al; movups xmmword ptr [rcx], xmm0; add rsp, 0x58; ret; 
0x000000000000761a: xor byte ptr [rdi], cl; or dword ptr [rdi - 2], 0xffffffff; dec dword ptr [rax - 0x7d]; ret; 
0x000000000002bce1: xor byte ptr [rdi], cl; xchg eax, esp; ret; 
0x0000000000013a6b: xor byte ptr [rip + 0x5c415b00], al; pop r13; pop r14; pop r15; ret; 
0x000000000003f087: xor byte ptr [rip - 0xb80000], al; ret 0x3948; 
0x000000000004e33d: xor byte ptr [rsi*2 + 0x3e8b491a], al; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x6fd3]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bac2: xor byte ptr [rsi*2 + 0x3e8b491a], al; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x984e]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a90e: xor byte ptr [rsi*2 + 0x3f8b4920], al; mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xaa02]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004b8e3: xor byte ptr [rsp + rax], ah; shr al, 2; ret; 
0x0000000000049b6b: xor cl, byte ptr [rax - 1]; leave; mov rax, rdx; neg rax; and rax, rcx; ret; 
0x000000000000e15c: xor dword ptr [rax - 0x75], ecx; je 0xe185; mov rdi, qword ptr [rsp + 0x30]; lea rdx, [rip + 0x557d2]; lea rax, [rip - 0x4bd5]; call rax; 
0x000000000000e303: xor dword ptr [rax - 0x75], ecx; je 0xe32c; mov rdi, qword ptr [rsp + 0x10]; lea rdx, [rip + 0x5565b]; lea rax, [rip - 0x4d7c]; call rax; 
0x00000000000394bc: xor dword ptr [rax - 0x77], ecx; ret 0x3949; 
0x000000000003f4a9: xor dword ptr [rax - 1], ecx; ret 0x8948; 
0x000000000002bce8: xor dword ptr [rbx + 0x48d88901], esi; add esp, 0x20; pop rbx; ret; 
0x00000000000138b4: xor dword ptr [rip + 0x5e415b00], eax; pop r15; ret; 
0x000000000004211b: xor eax, 0x11f00; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000002c2ea: xor eax, 0x2565d; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x00000000000303ac: xor eax, 0x36d5f; ret; 
0x0000000000042b0a: xor eax, 0x4100011b; call rdi; 
0x0000000000013499: xor eax, 0x415b0005; pop rsp; pop r13; pop r14; pop r15; ret; 
0x000000000000c8a1: xor eax, 0x43da1; lea rdi, [rsp + 0xc8]; mov edx, 7; call 0xb180; lea rax, [rip + 0x210e1]; call rax; 
0x000000000000c78d: xor eax, 0x43e27; lea rax, [rip + 0x3cec7]; lea rdi, [rsp + 0x2f0]; mov edx, 1; mov ecx, 0x4a; call rax; 
0x000000000000cd73: xor eax, 0x56b28; lea rax, [rip - 0x390f]; call rax; 
0x000000000000cb24: xor eax, 0x56d27; call 0xced0; add rsp, 0x128; ret; 
0x000000000004e364: xor eax, 0x6e69; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004ed6d: xor eax, 0x6f4b; mov edx, 5; jmp rax; 
0x000000000004e34a: xor eax, 0x6fd3; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004effd: xor eax, 0x711d; mov edx, 0xb; jmp rax; 
0x000000000004e0dc: xor eax, 0x723b; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004e0dc: xor eax, 0x723b; mov edx, 1; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000004e0c0: xor eax, 0x7258; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004e2d8: xor eax, 0x79cf; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000004e056: xor eax, 0x7c22; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x00000000000103f9: xor eax, 0x8d480005; add eax, 0xffff919d; mov esi, 0x100; call rax; 
0x000000000004bbc3: xor eax, 0x960a; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bae9: xor eax, 0x96e4; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bc03: xor eax, 0x971c; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bba8: xor eax, 0x9775; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004bacf: xor eax, 0x984e; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004b9e8: xor eax, 0x992f; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a54d: xor eax, 0xa76e; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000004aaa9: xor eax, 0xa877; mov edx, 1; jmp rax; 
0x000000000004a93b: xor eax, 0xa892; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004aa64: xor eax, 0xa8ac; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a9dd: xor eax, 0xa941; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a9af: xor eax, 0xa963; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a91b: xor eax, 0xaa02; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a8c9: xor eax, 0xaa47; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a82d: xor eax, 0xaaed; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a77b: xor eax, 0xab9c; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a723: xor eax, 0xabed; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a661: xor eax, 0xacac; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000004a62b: xor eax, 0xace0; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000049fda: xor eax, 0xafd9; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000049fae: xor eax, 0xaff5; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000049f7d: xor eax, 0xb2d3; mov edx, 0xe; jmp rax; 
0x0000000000044ffd: xor eax, 0xf29e; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000001dfb9: xor eax, dword ptr [rbx]; add byte ptr [rax + 0x63], cl; je 0x1df75; add byte ptr [rax + 1], cl; out dx, al; jmp rsi; 
0x00000000000136c5: xor eax, dword ptr [rip + 0x5c415b00]; pop r13; pop r14; pop r15; ret; 
0x0000000000011cab: xor eax, eax; add rsp, 0x10; pop rbx; pop r14; pop r15; ret; 
0x0000000000015e04: xor eax, eax; add rsp, 0x10; pop rbx; pop r14; pop rbp; ret; 
0x0000000000011543: xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000042090: xor eax, eax; add rsp, 0x20; pop rbx; pop r14; pop rbp; ret; 
0x0000000000041d45: xor eax, eax; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000002b559: xor eax, eax; add rsp, 0x40; pop rbx; pop r14; pop r15; ret; 
0x000000000003d1f5: xor eax, eax; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000003c6eb: xor eax, eax; call qword ptr [rip + 0x2a585]; pop rbx; ret; 
0x0000000000008689: xor eax, eax; call qword ptr [rip + 0x5e4f7]; test rax, rax; jle 0x863a; pop rbx; ret; 
0x000000000004e29f: xor eax, eax; mov byte ptr [r8], al; mov rax, r8; ret; 
0x000000000004184f: xor eax, eax; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000000a558: xor eax, eax; mov ecx, eax; call 0xa230; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000a578: xor eax, eax; mov ecx, eax; call 0xa250; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000004e1dd: xor eax, eax; mov edx, 0x100; or rax, r8; or rax, rdx; pop rbx; ret; 
0x000000000003d44d: xor eax, eax; mov qword ptr [rbx], rax; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000032fd0: xor eax, eax; mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000030fed: xor eax, eax; mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000001ce8d: xor eax, eax; mov qword ptr [rdi], rax; add rsp, 0x30; ret; 
0x000000000004e13e: xor eax, eax; or rax, r8; or rax, rdx; pop rbx; ret; 
0x0000000000028a48: xor eax, eax; pop rbx; pop r14; pop r15; ret; 
0x00000000000071c3: xor eax, eax; pop rbx; ret; 
0x0000000000014f49: xor eax, eax; pop rcx; ret; 
0x000000000000be80: xor eax, eax; ret; 
0x000000000004195f: xor eax, eax; shl rax, 0x20; or rax, rcx; ret; 
0x000000000004e127: xor eax, eax; xor edx, edx; or rax, r8; or rax, rdx; pop rbx; ret; 
0x000000000002261f: xor ebx, ebx; jmp rax; 
0x000000000002bc96: xor ebx, ebx; lea rcx, [rip + 0x25c6d]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004f09b: xor ebx, ebx; mov rax, r10; mov rdx, r11; ret; 
0x0000000000032e85: xor ebx, ebx; mov rax, rbx; add rsp, 0x70; pop rbx; ret; 
0x000000000002a20e: xor ebx, ebx; mov rax, rbx; pop rbx; pop r14; pop r15; ret; 
0x0000000000018e90: xor ecx, dword ptr [rcx + rcx*4 - 8]; mov rdx, r14; pop rbx; pop r14; pop r15; ret; 
0x0000000000047933: xor ecx, dword ptr [rcx - 0x7d]; ret; 
0x000000000000cc4e: xor ecx, ecx; call 0xd1f0; pop rcx; ret; 
0x000000000000f0f1: xor ecx, ecx; call 0xeb40; pop rcx; ret; 
0x000000000004ed46: xor ecx, ecx; call qword ptr [rip + 0x17b4a]; add rsp, 0x28; ret; 
0x000000000004ec16: xor ecx, ecx; call qword ptr [rip + 0x17c7a]; add rsp, 0x28; ret; 
0x000000000004eae8: xor ecx, ecx; call qword ptr [rip + 0x17da8]; add rsp, 0x30; pop rbx; ret; 
0x000000000004e9b2: xor ecx, ecx; call qword ptr [rip + 0x17ede]; add rsp, 0x28; ret; 
0x000000000004e904: xor ecx, ecx; call qword ptr [rip + 0x17f8c]; add rsp, 0x88; ret; 
0x000000000001cba3: xor ecx, ecx; cmp rdx, 0x100; setb al; and al, cl; ret; 
0x000000000004c9f6: xor ecx, ecx; mov qword ptr [rax], rcx; pop rbx; pop r14; pop rbp; ret; 
0x000000000004938e: xor ecx, ecx; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x00000000000493a8: xor ecx, ecx; mov rdx, rsi; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x0000000000041950: xor ecx, ecx; shl rax, 0x20; or rax, rcx; ret; 
0x00000000000111ec: xor edx, edx; call rax; 
0x00000000000281e8: xor edx, edx; call rbp; cmp eax, -1; jne 0x282b8; call rbx; 
0x0000000000034cc1: xor edx, edx; call rbx; 
0x000000000004e129: xor edx, edx; or rax, r8; or rax, rdx; pop rbx; ret; 
0x000000000004e17e: xor edx, edx; xor r8d, r8d; or rax, r8; or rax, rdx; pop rbx; ret; 
0x00000000000493c3: xor esi, esi; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000004f195: xor esi, esi; mov r11, rdx; mov rax, r11; mov rdx, rsi; ret; 
0x0000000000034cb0: xor esi, esi; mov rdx, qword ptr [rsp + 0x38]; call rbx; 
0x000000000004c342: xor esp, esp; mov ebp, edx; jmp rax; 
0x000000000004bec8: xor esp, esp; mov r13d, r14d; jmp rax; 
0x000000000004f09a: xor r11d, r11d; mov rax, r10; mov rdx, r11; ret; 
0x000000000004c341: xor r12d, r12d; mov ebp, edx; jmp rax; 
0x000000000004bec7: xor r12d, r12d; mov r13d, r14d; jmp rax; 
0x000000000003c6ea: xor r8d, r8d; call qword ptr [rip + 0x2a585]; pop rbx; ret; 
0x000000000004e180: xor r8d, r8d; or rax, r8; or rax, rdx; pop rbx; ret; 
0x000000000003f3bf: xorps xmm0, xmm0; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0xc], xmm0; ret; 
0x0000000000028068: xorps xmm0, xmm0; movups xmmword ptr [rdi], xmm0; pop rbx; pop r14; pop rbp; ret; 

9573 gadgets found
